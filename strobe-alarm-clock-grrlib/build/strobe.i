# 1 "d:/devkitPro/0wn/strobe-alarm-clock-grrlib/source/strobe.c"
# 1 "d:\\devkitPro\\0wn\\strobe-alarm-clock-grrlib\\build//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "d:/devkitPro/0wn/strobe-alarm-clock-grrlib/source/strobe.c"
# 1 "d:/devkitPro/libogc/include/grrlib.h" 1
# 36 "d:/devkitPro/libogc/include/grrlib.h"
# 1 "d:/devkitPro/libogc/include/gccore.h" 1
# 39 "d:/devkitPro/libogc/include/gccore.h"
# 1 "d:/devkitPro/libogc/include/ogc/dsp.h" 1
# 39 "d:/devkitPro/libogc/include/ogc/dsp.h"
# 1 "d:/devkitPro/libogc/include/gctypes.h" 1
# 9 "d:/devkitPro/libogc/include/gctypes.h"
# 1 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/include/stdbool.h" 1 3 4
# 10 "d:/devkitPro/libogc/include/gctypes.h" 2






typedef unsigned char u8;
typedef unsigned short u16;
typedef unsigned int u32;
typedef unsigned long long u64;

typedef signed char s8;
typedef signed short s16;
typedef signed int s32;
typedef signed long long s64;

typedef volatile unsigned char vu8;
typedef volatile unsigned short vu16;
typedef volatile unsigned int vu32;
typedef volatile unsigned long long vu64;

typedef volatile signed char vs8;
typedef volatile signed short vs16;
typedef volatile signed int vs32;
typedef volatile signed long long vs64;


typedef s16 sfp16;
typedef s32 sfp32;
typedef u16 ufp16;
typedef u32 ufp32;

typedef float f32;
typedef double f64;

typedef volatile float vf32;
typedef volatile double vf64;



typedef unsigned int BOOL;
# 92 "d:/devkitPro/libogc/include/gctypes.h"
struct __argv {
 int argvMagic;
 char *commandLine;
 int length;
 int argc;
 char **argv;
 char **endARGV;
};


extern struct __argv *__system_argv;
# 40 "d:/devkitPro/libogc/include/ogc/dsp.h" 2
# 80 "d:/devkitPro/libogc/include/ogc/dsp.h"
typedef struct _dsp_task dsptask_t;






typedef void (*DSPTaskCallback)(dsptask_t *task);





typedef void (*DSPCallback)(void);
# 115 "d:/devkitPro/libogc/include/ogc/dsp.h"
struct _dsp_task {
 vu32 state;
 vu32 prio;
 vu32 flags;

 u16 init_vec;
 u16 resume_vec;

 u16 *iram_maddr;
 u32 iram_len;
 u16 iram_addr;

 u16 *dram_maddr;
 u32 dram_len;
 u16 dram_addr;

 DSPTaskCallback init_cb;
 DSPTaskCallback res_cb;
 DSPTaskCallback done_cb;
 DSPTaskCallback req_cb;

 struct _dsp_task *next;
 struct _dsp_task *prev;
};







void DSP_Init();







u32 DSP_CheckMailTo();







u32 DSP_CheckMailFrom();







u32 DSP_ReadMailFrom();







void DSP_AssertInt();
# 187 "d:/devkitPro/libogc/include/ogc/dsp.h"
void DSP_SendMailTo(u32 mail);







u32 DSP_ReadCPUtoDSP();
# 204 "d:/devkitPro/libogc/include/ogc/dsp.h"
dsptask_t* DSP_AddTask(dsptask_t *task);

dsptask_t* DSP_AssertTask(dsptask_t *task);

void DSP_CancelTask(dsptask_t *task);

void DSP_Reset();

void DSP_Halt();

void DSP_Unhalt();







DSPCallback DSP_RegisterCallback(DSPCallback usr_cb);
# 40 "d:/devkitPro/libogc/include/gccore.h" 2
# 1 "d:/devkitPro/libogc/include/ogc/aram.h" 1
# 81 "d:/devkitPro/libogc/include/ogc/aram.h"
typedef void (*ARCallback)(void);
# 94 "d:/devkitPro/libogc/include/ogc/aram.h"
ARCallback AR_RegisterCallback(ARCallback callback);
# 103 "d:/devkitPro/libogc/include/ogc/aram.h"
u32 AR_GetDMAStatus();
# 147 "d:/devkitPro/libogc/include/ogc/aram.h"
u32 AR_Init(u32 *stack_idx_array,u32 num_entries);
# 167 "d:/devkitPro/libogc/include/ogc/aram.h"
void AR_StartDMA(u32 dir,u32 memaddr,u32 aramaddr,u32 len);
# 180 "d:/devkitPro/libogc/include/ogc/aram.h"
u32 AR_Alloc(u32 len);
# 191 "d:/devkitPro/libogc/include/ogc/aram.h"
u32 AR_Free(u32 *len);
# 202 "d:/devkitPro/libogc/include/ogc/aram.h"
void AR_Clear(u32 flag);
# 212 "d:/devkitPro/libogc/include/ogc/aram.h"
BOOL AR_CheckInit();
# 223 "d:/devkitPro/libogc/include/ogc/aram.h"
void AR_Reset();
# 232 "d:/devkitPro/libogc/include/ogc/aram.h"
u32 AR_GetSize();
# 241 "d:/devkitPro/libogc/include/ogc/aram.h"
u32 AR_GetBaseAddress();
# 250 "d:/devkitPro/libogc/include/ogc/aram.h"
u32 AR_GetInternalSize();
# 41 "d:/devkitPro/libogc/include/gccore.h" 2
# 1 "d:/devkitPro/libogc/include/ogc/arqueue.h" 1
# 36 "d:/devkitPro/libogc/include/ogc/arqueue.h"
# 1 "d:/devkitPro/libogc/include/ogc/lwp_queue.h" 1
# 16 "d:/devkitPro/libogc/include/ogc/lwp_queue.h"
typedef struct _lwpnode {
 struct _lwpnode *next;
 struct _lwpnode *prev;
} lwp_node;

typedef struct _lwpqueue {
 lwp_node *first;
 lwp_node *perm_null;
 lwp_node *last;
} lwp_queue;

void __lwp_queue_initialize(lwp_queue *,void *,u32,u32);
lwp_node* __lwp_queue_get(lwp_queue *);
void __lwp_queue_append(lwp_queue *,lwp_node *);
void __lwp_queue_extract(lwp_node *);
void __lwp_queue_insert(lwp_node *,lwp_node *);
# 37 "d:/devkitPro/libogc/include/ogc/arqueue.h" 2
# 1 "d:/devkitPro/libogc/include/ogc/aram.h" 1
# 38 "d:/devkitPro/libogc/include/ogc/arqueue.h" 2
# 51 "d:/devkitPro/libogc/include/ogc/arqueue.h"
enum {
 ARQ_TASK_READY = 0,
 ARQ_TASK_RUNNING,
 ARQ_TASK_FINISHED
};

typedef struct _arq_request ARQRequest;
typedef void (*ARQCallback)(ARQRequest *);

struct _arq_request {
 lwp_node node;
 u32 owner,dir,prio,state;
 u32 aram_addr,mram_addr,len;
 ARQCallback callback;
};

void ARQ_Init();
void ARQ_Reset();
# 86 "d:/devkitPro/libogc/include/ogc/arqueue.h"
void ARQ_PostRequest(ARQRequest *req,u32 owner,u32 dir,u32 prio,u32 aram_addr,u32 mram_addr,u32 len);
# 104 "d:/devkitPro/libogc/include/ogc/arqueue.h"
void ARQ_PostRequestAsync(ARQRequest *req,u32 owner,u32 dir,u32 prio,u32 aram_addr,u32 mram_addr,u32 len,ARQCallback cb);
void ARQ_RemoveRequest(ARQRequest *req);
void ARQ_SetChunkSize(u32 size);
u32 ARQ_GetChunkSize();
void ARQ_FlushQueue();
u32 ARQ_RemoveOwnerRequest(u32 owner);
# 42 "d:/devkitPro/libogc/include/gccore.h" 2
# 1 "d:/devkitPro/libogc/include/ogc/arqmgr.h" 1
# 56 "d:/devkitPro/libogc/include/ogc/arqmgr.h"
typedef void (*ARQMCallback)(s32 result);
# 68 "d:/devkitPro/libogc/include/ogc/arqmgr.h"
void ARQM_Init(u32 arambase,s32 len);
# 80 "d:/devkitPro/libogc/include/ogc/arqmgr.h"
u32 ARQM_PushData(void *buffer,s32 len);
# 89 "d:/devkitPro/libogc/include/ogc/arqmgr.h"
u32 ARQM_GetZeroBuffer();
# 98 "d:/devkitPro/libogc/include/ogc/arqmgr.h"
u32 ARQM_GetStackPointer();
# 107 "d:/devkitPro/libogc/include/ogc/arqmgr.h"
u32 ARQM_GetFreeSize();
# 43 "d:/devkitPro/libogc/include/gccore.h" 2
# 1 "d:/devkitPro/libogc/include/ogc/audio.h" 1
# 79 "d:/devkitPro/libogc/include/ogc/audio.h"
typedef void (*AIDCallback)(void);
# 88 "d:/devkitPro/libogc/include/ogc/audio.h"
typedef void (*AISCallback)(u32 smp_cnt);
# 99 "d:/devkitPro/libogc/include/ogc/audio.h"
AISCallback AUDIO_RegisterStreamCallback(AISCallback callback);
# 110 "d:/devkitPro/libogc/include/ogc/audio.h"
void AUDIO_Init(u8 *stack);
# 121 "d:/devkitPro/libogc/include/ogc/audio.h"
void AUDIO_SetStreamVolLeft(u8 vol);
# 130 "d:/devkitPro/libogc/include/ogc/audio.h"
u8 AUDIO_GetStreamVolLeft();
# 141 "d:/devkitPro/libogc/include/ogc/audio.h"
void AUDIO_SetStreamVolRight(u8 vol);
# 150 "d:/devkitPro/libogc/include/ogc/audio.h"
u8 AUDIO_GetStreamVolRight();
# 161 "d:/devkitPro/libogc/include/ogc/audio.h"
void AUDIO_SetStreamSampleRate(u32 rate);
# 170 "d:/devkitPro/libogc/include/ogc/audio.h"
u32 AUDIO_GetStreamSampleRate();
# 184 "d:/devkitPro/libogc/include/ogc/audio.h"
AIDCallback AUDIO_RegisterDMACallback(AIDCallback callback);
# 196 "d:/devkitPro/libogc/include/ogc/audio.h"
void AUDIO_InitDMA(u32 startaddr,u32 len);
# 205 "d:/devkitPro/libogc/include/ogc/audio.h"
u16 AUDIO_GetDMAEnableFlag();
# 217 "d:/devkitPro/libogc/include/ogc/audio.h"
void AUDIO_StartDMA();
# 226 "d:/devkitPro/libogc/include/ogc/audio.h"
void AUDIO_StopDMA();
# 235 "d:/devkitPro/libogc/include/ogc/audio.h"
u32 AUDIO_GetDMABytesLeft();
# 244 "d:/devkitPro/libogc/include/ogc/audio.h"
u32 AUDIO_GetDMALength();
# 253 "d:/devkitPro/libogc/include/ogc/audio.h"
u32 AUDIO_GetDMAStartAddr();
# 264 "d:/devkitPro/libogc/include/ogc/audio.h"
void AUDIO_SetStreamTrigger(u32 cnt);
# 273 "d:/devkitPro/libogc/include/ogc/audio.h"
void AUDIO_ResetStreamSampleCnt();
# 284 "d:/devkitPro/libogc/include/ogc/audio.h"
void AUDIO_SetDSPSampleRate(u8 rate);
# 293 "d:/devkitPro/libogc/include/ogc/audio.h"
u32 AUDIO_GetDSPSampleRate();
# 304 "d:/devkitPro/libogc/include/ogc/audio.h"
void AUDIO_SetStreamPlayState(u32 state);
# 313 "d:/devkitPro/libogc/include/ogc/audio.h"
u32 AUDIO_GetStreamPlayState();
# 44 "d:/devkitPro/libogc/include/gccore.h" 2
# 1 "d:/devkitPro/libogc/include/ogc/cache.h" 1
# 57 "d:/devkitPro/libogc/include/ogc/cache.h"
void DCEnable();
# 66 "d:/devkitPro/libogc/include/ogc/cache.h"
void DCDisable();
# 78 "d:/devkitPro/libogc/include/ogc/cache.h"
void DCFreeze();
# 90 "d:/devkitPro/libogc/include/ogc/cache.h"
void DCUnfreeze();
# 102 "d:/devkitPro/libogc/include/ogc/cache.h"
void DCFlashInvalidate();
# 116 "d:/devkitPro/libogc/include/ogc/cache.h"
void DCInvalidateRange(void *startaddress,u32 len);
# 131 "d:/devkitPro/libogc/include/ogc/cache.h"
void DCFlushRange(void *startaddress,u32 len);
# 144 "d:/devkitPro/libogc/include/ogc/cache.h"
void DCStoreRange(void *startaddress,u32 len);
# 159 "d:/devkitPro/libogc/include/ogc/cache.h"
void DCFlushRangeNoSync(void *startaddress,u32 len);
# 173 "d:/devkitPro/libogc/include/ogc/cache.h"
void DCStoreRangeNoSync(void *startaddress,u32 len);
# 185 "d:/devkitPro/libogc/include/ogc/cache.h"
void DCZeroRange(void *startaddress,u32 len);
# 197 "d:/devkitPro/libogc/include/ogc/cache.h"
void DCTouchRange(void *startaddress,u32 len);
# 208 "d:/devkitPro/libogc/include/ogc/cache.h"
void ICSync();
# 220 "d:/devkitPro/libogc/include/ogc/cache.h"
void ICFlashInvalidate();
# 229 "d:/devkitPro/libogc/include/ogc/cache.h"
void ICEnable();
# 238 "d:/devkitPro/libogc/include/ogc/cache.h"
void ICDisable();
# 250 "d:/devkitPro/libogc/include/ogc/cache.h"
void ICFreeze();
# 262 "d:/devkitPro/libogc/include/ogc/cache.h"
void ICUnfreeze();
# 275 "d:/devkitPro/libogc/include/ogc/cache.h"
void ICBlockInvalidate(void *startaddress);
# 289 "d:/devkitPro/libogc/include/ogc/cache.h"
void ICInvalidateRange(void *startaddress,u32 len);

void LCEnable();
void LCDisable();
void LCLoadBlocks(void *,void *,u32);
void LCStoreBlocks(void *,void *,u32);
u32 LCLoadData(void *,void *,u32);
u32 LCStoreData(void *,void *,u32);
u32 LCQueueLength();
u32 LCQueueWait(u32);
void LCFlushQueue();
void LCAlloc(void *,u32);
void LCAllocNoInvalidate(void *,u32);
void LCAllocOneTag(BOOL,void *);
void LCAllocTags(BOOL,void *,u32);
# 45 "d:/devkitPro/libogc/include/gccore.h" 2
# 1 "d:/devkitPro/libogc/include/ogc/card.h" 1
# 129 "d:/devkitPro/libogc/include/ogc/card.h"
typedef struct _card_file {
 s32 chn;
 s32 filenum;
 s32 offset;
 s32 len;
 u16 iblock;
} card_file;
# 148 "d:/devkitPro/libogc/include/ogc/card.h"
typedef struct _card_dir {
      s32 chn;
      u32 fileno;
   u32 filelen;
   u8 permissions;
      u8 filename[32];
      u8 gamecode[4];
      u8 company[2];
      _Bool showall;
} card_dir;
# 176 "d:/devkitPro/libogc/include/ogc/card.h"
typedef struct _card_stat {
 u8 filename[32];
 u32 len;
 u32 time;
 u8 gamecode[4];
 u8 company[2];
 u8 banner_fmt;
 u32 icon_addr;
 u16 icon_fmt;
 u16 iconfmt[8];
 u16 icon_speed;
 u16 iconspeed[8];
 u32 comment_addr;
 u32 offset_banner;
 u32 offset_banner_tlut;
 u32 offset_icon[8];
 u32 offset_icon_tlut[8];
 u32 offset_data;
} card_stat;
# 210 "d:/devkitPro/libogc/include/ogc/card.h"
typedef void (*cardcallback)(s32 chan,s32 result);
# 220 "d:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_Init(const char *gamecode,const char *company);
# 229 "d:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_Probe(s32 chn);
# 240 "d:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_ProbeEx(s32 chn,s32 *mem_size,s32 *sect_size);
# 251 "d:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_Mount(s32 chn,void *workarea,cardcallback detach_cb);
# 263 "d:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_MountAsync(s32 chn,void *workarea,cardcallback detach_cb,cardcallback attach_cb);
# 272 "d:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_Unmount(s32 chn);
# 284 "d:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_Read(card_file *file,void *buffer,u32 len,u32 offset);
# 297 "d:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_ReadAsync(card_file *file,void *buffer,u32 len,u32 offset,cardcallback callback);
# 308 "d:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_Open(s32 chn,const char *filename,card_file *file);
# 319 "d:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_OpenEntry(s32 chn,card_dir *entry,card_file *file);
# 328 "d:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_Close(card_file *file);
# 340 "d:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_Create(s32 chn,const char *filename,u32 size,card_file *file);
# 353 "d:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_CreateAsync(s32 chn,const char *filename,u32 size,card_file *file,cardcallback callback);
# 364 "d:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_CreateEntry(s32 chn,card_dir *direntry,card_file *file);
# 376 "d:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_CreateEntryAsync(s32 chn,card_dir *direntry,card_file *file,cardcallback callback);
# 386 "d:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_Delete(s32 chn,const char *filename);
# 397 "d:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_DeleteAsync(s32 chn,const char *filename,cardcallback callback);
# 407 "d:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_DeleteEntry(s32 chn,card_dir *dir_entry);
# 418 "d:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_DeleteEntryAsync(s32 chn,card_dir *dir_entry,cardcallback callback);
# 430 "d:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_Write(card_file *file,void *buffer,u32 len,u32 offset);
# 443 "d:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_WriteAsync(card_file *file,void *buffer,u32 len,u32 offset,cardcallback callback);
# 452 "d:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_GetErrorCode(s32 chn);
# 463 "d:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_FindFirst(s32 chn, card_dir *dir, _Bool showall);
# 472 "d:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_FindNext(card_dir *dir);
# 484 "d:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_GetDirectory(s32 chn, card_dir *dir_entries, s32 *count, _Bool showall);
# 494 "d:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_GetSectorSize(s32 chn,u32 *sector_size);
# 504 "d:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_GetBlockCount(s32 chn,u32 *block_count);
# 515 "d:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_GetStatus(s32 chn,s32 fileno,card_stat *stats);
# 526 "d:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_SetStatus(s32 chn,s32 fileno,card_stat *stats);
# 538 "d:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_SetStatusAsync(s32 chn,s32 fileno,card_stat *stats,cardcallback callback);
# 549 "d:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_GetAttributes(s32 chn,s32 fileno,u8 *attr);
# 560 "d:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_SetAttributes(s32 chn,s32 fileno,u8 attr);
# 572 "d:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_SetAttributesAsync(s32 chn,s32 fileno,u8 attr,cardcallback callback);




s32 CARD_Format(s32 chn);



s32 CARD_FormatAsync(s32 chn,cardcallback callback);
# 590 "d:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_SetCompany(const char *company);
# 599 "d:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_SetGamecode(const char *gamecode);
# 46 "d:/devkitPro/libogc/include/gccore.h" 2
# 1 "d:/devkitPro/libogc/include/ogc/cast.h" 1
# 33 "d:/devkitPro/libogc/include/ogc/cast.h"
static inline void CAST_Init()
{
 __asm__ __volatile__ (
  "li		3,0x0004\n		 oris	3,3,0x0004\n		 mtspr	914,3\n		 li		3,0x0005\n		 oris	3,3,0x0005\n		 mtspr	915,3\n		 li		3,0x0006\n		 oris	3,3,0x0006\n		 mtspr	916,3\n		 li		3,0x0007\n		 oris	3,3,0x0007\n		 mtspr	917,3\n"
# 48 "d:/devkitPro/libogc/include/ogc/cast.h"
   : : : "r3"
 );
}

static inline void CAST_SetGQR2(u32 type,u32 scale)
{
 register u32 val = (((((scale)<<8)|(type))<<16)|(((scale)<<8)|(type)));
 asm volatile("mtspr %0,%1" : : "i"(914), "b"(val));
}

static inline void CAST_SetGQR3(u32 type,u32 scale)
{
 register u32 val = (((((scale)<<8)|(type))<<16)|(((scale)<<8)|(type)));
 asm volatile("mtspr %0,%1" : : "i"(915), "b"(val));
}

static inline void CAST_SetGQR4(u32 type,u32 scale)
{
 register u32 val = (((((scale)<<8)|(type))<<16)|(((scale)<<8)|(type)));
 asm volatile("mtspr %0,%1" : : "i"(916), "b"(val));
}

static inline void CAST_SetGQR5(u32 type,u32 scale)
{
 register u32 val = (((((scale)<<8)|(type))<<16)|(((scale)<<8)|(type)));
 asm volatile("mtspr %0,%1" : : "i"(917), "b"(val));
}

static inline void CAST_SetGQR6(u32 type,u32 scale)
{
 register u32 val = (((((scale)<<8)|(type))<<16)|(((scale)<<8)|(type)));
 asm volatile("mtspr %0,%1" : : "i"(918), "b"(val));
}

static inline void CAST_SetGQR7(u32 type,u32 scale)
{
 register u32 val = (((((scale)<<8)|(type))<<16)|(((scale)<<8)|(type)));
 asm volatile("mtspr %0,%1" : : "i"(919), "b"(val));
}
# 95 "d:/devkitPro/libogc/include/ogc/cast.h"
static inline f32 __castu8f32(register u8 *in)
{
 register f32 rval;
 __asm__ __volatile__ (
  "psq_l	%[rval],0(%[in]),1,2" : [rval]"=f"(rval) : [in]"r"(in)
 );
 return rval;
}

static inline f32 __castu16f32(register u16 *in)
{
 register f32 rval;
 __asm__ __volatile__ (
  "psq_l	%[rval],0(%[in]),1,3" : [rval]"=f"(rval) : [in]"r"(in)
 );
 return rval;
}

static inline f32 __casts8f32(register s8 *in)
{
 register f32 rval;
 __asm__ __volatile__ (
  "psq_l	%[rval],0(%[in]),1,4" : [rval]"=f"(rval) : [in]"r"(in)
 );
 return rval;
}

static inline f32 __casts16f32(register s16 *in)
{
 register f32 rval;
 __asm__ __volatile__ (
  "psq_l	%[rval],0(%[in]),1,5" : [rval]"=f"(rval) : [in]"r"(in)
 );
 return rval;
}

static inline void castu8f32(register u8 *in,register volatile f32 *out)
{
 *out = __castu8f32(in);
}

static inline void castu16f32(register u16 *in,register volatile f32 *out)
{
 *out = __castu16f32(in);
}

static inline void casts8f32(register s8 *in,register volatile f32 *out)
{
 *out = __casts8f32(in);
}

static inline void casts16f32(register s16 *in,register volatile f32 *out)
{
 *out = __casts16f32(in);
}







static inline u8 __castf32u8(register f32 in)
{
 f32 a;
 register u8 rval;
 register f32 *ptr = &a;

 __asm__ __volatile__ (
  "psq_st	%[in],0(%[ptr]),1,2\n"
  "lbz	%[out],0(%[ptr])\n"
  : [out]"=r"(rval), [ptr]"+r"(ptr) : [in]"f"(in)
 );
 return rval;
}

static inline u16 __castf32u16(register f32 in)
{
 f32 a;
 register u16 rval;
 register f32 *ptr = &a;

 __asm__ __volatile__ (
  "psq_st	%[in],0(%[ptr]),1,3\n"
  "lhz	%[out],0(%[ptr])\n"
  : [out]"=r"(rval), [ptr]"+r"(ptr) : [in]"f"(in)
 );
 return rval;
}

static inline s8 __castf32s8(register f32 in)
{
 f32 a;
 register s8 rval;
 register f32 *ptr = &a;

 __asm__ __volatile__ (
  "psq_st	%[in],0(%[ptr]),1,4\n"
  "lbz	%[out],0(%[ptr])\n"
  : [out]"=r"(rval), [ptr]"+r"(ptr) : [in]"f"(in)
 );
 return rval;
}

static inline s16 __castf32s16(register f32 in)
{
 f32 a;
 register s16 rval;
 register f32 *ptr = &a;

 __asm__ __volatile__ (
  "psq_st	%[in],0(%[ptr]),1,5\n"
  "lha	%[out],0(%[ptr])\n"
  : [out]"=r"(rval), [ptr]"+r"(ptr) : [in]"f"(in)
 );
 return rval;
}

static inline void castf32u8(register f32 *in,register vu8 *out)
{
 *out = __castf32u8(*in);
}

static inline void castf32u16(register f32 *in,register vu16 *out)
{
 *out = __castf32u16(*in);
}

static inline void castf32s8(register f32 *in,register vs8 *out)
{
 *out = __castf32s8(*in);
}

static inline void castf32s16(register f32 *in,register vs16 *out)
{
 *out = __castf32s16(*in);
}
# 47 "d:/devkitPro/libogc/include/gccore.h" 2
# 1 "d:/devkitPro/libogc/include/ogc/color.h" 1
# 48 "d:/devkitPro/libogc/include/gccore.h" 2
# 1 "d:/devkitPro/libogc/include/ogc/consol.h" 1
# 10 "d:/devkitPro/libogc/include/ogc/consol.h"
# 1 "d:/devkitPro/libogc/include/ogc/gx_struct.h" 1
# 58 "d:/devkitPro/libogc/include/ogc/gx_struct.h"
typedef struct _gx_rmodeobj {
 u32 viTVMode;
 u16 fbWidth;
 u16 efbHeight;
 u16 xfbHeight;
 u16 viXOrigin;
 u16 viYOrigin;
 u16 viWidth;
 u16 viHeight;
 u32 xfbMode;
 u8 field_rendering;
 u8 aa;
 u8 sample_pattern[12][2];
 u8 vfilter[7];
} GXRModeObj;
# 11 "d:/devkitPro/libogc/include/ogc/consol.h" 2
# 31 "d:/devkitPro/libogc/include/ogc/consol.h"
void CON_Init(void *framebuffer,int xstart,int ystart,int xres,int yres,int stride);
# 44 "d:/devkitPro/libogc/include/ogc/consol.h"
s32 CON_InitEx(GXRModeObj *rmode, s32 conXOrigin,s32 conYOrigin,s32 conWidth,s32 conHeight);
# 54 "d:/devkitPro/libogc/include/ogc/consol.h"
void CON_GetMetrics(int *cols, int *rows);
# 64 "d:/devkitPro/libogc/include/ogc/consol.h"
void CON_GetPosition(int *cols, int *rows);
# 75 "d:/devkitPro/libogc/include/ogc/consol.h"
void CON_EnableGecko(int channel,int safe);
# 49 "d:/devkitPro/libogc/include/gccore.h" 2
# 1 "d:/devkitPro/libogc/include/ogc/dvd.h" 1
# 110 "d:/devkitPro/libogc/include/ogc/dvd.h"
typedef struct _dvddiskid dvddiskid;
# 127 "d:/devkitPro/libogc/include/ogc/dvd.h"
struct _dvddiskid {
 s8 gamename[4];
 s8 company[2];
 u8 disknum;
 u8 gamever;
 u8 streaming;
 u8 streambufsize;
 u8 pad[22];
};





typedef struct _dvdcmdblk dvdcmdblk;






typedef void (*dvdcbcallback)(s32 result,dvdcmdblk *block);







struct _dvdcmdblk {
 lwp_node node;
 u32 cmd;
 s32 state;
 s64 offset;
 u32 len;
 void *buf;
 u32 currtxsize;
 u32 txdsize;
 dvddiskid *id;
 dvdcbcallback cb;
 void *usrdata;
};






typedef struct _dvddrvinfo dvddrvinfo;
# 189 "d:/devkitPro/libogc/include/ogc/dvd.h"
struct _dvddrvinfo {
 u16 rev_level;
 u16 dev_code;
 u32 rel_date;
 u8 pad[24];
};






typedef struct _dvdfileinfo dvdfileinfo;
# 211 "d:/devkitPro/libogc/include/ogc/dvd.h"
typedef void (*dvdcallback)(s32 result,dvdfileinfo *info);







struct _dvdfileinfo {
 dvdcmdblk block;
 u32 addr;
 u32 len;
 dvdcallback cb;
};
# 235 "d:/devkitPro/libogc/include/ogc/dvd.h"
void DVD_Init();
void DVD_Pause();
# 247 "d:/devkitPro/libogc/include/ogc/dvd.h"
void DVD_Reset(u32 reset_mode);
# 258 "d:/devkitPro/libogc/include/ogc/dvd.h"
s32 DVD_Mount();
s32 DVD_GetDriveStatus();
# 282 "d:/devkitPro/libogc/include/ogc/dvd.h"
s32 DVD_MountAsync(dvdcmdblk *block,dvdcbcallback cb);
# 296 "d:/devkitPro/libogc/include/ogc/dvd.h"
s32 DVD_ControlDrive(dvdcmdblk *block,u32 cmd);
# 309 "d:/devkitPro/libogc/include/ogc/dvd.h"
s32 DVD_ControlDriveAsync(dvdcmdblk *block,u32 cmd,dvdcbcallback cb);
# 323 "d:/devkitPro/libogc/include/ogc/dvd.h"
s32 DVD_SetGCMOffset(dvdcmdblk *block,s64 offset);
# 338 "d:/devkitPro/libogc/include/ogc/dvd.h"
s32 DVD_SetGCMOffsetAsync(dvdcmdblk *block,s64 offset,dvdcbcallback cb);

s32 DVD_GetCmdBlockStatus(dvdcmdblk *block);
s32 DVD_SpinUpDrive(dvdcmdblk *block);
s32 DVD_SpinUpDriveAsync(dvdcmdblk *block,dvdcbcallback cb);
s32 DVD_Inquiry(dvdcmdblk *block,dvddrvinfo *info);
s32 DVD_InquiryAsync(dvdcmdblk *block,dvddrvinfo *info,dvdcbcallback cb);
s32 DVD_ReadPrio(dvdcmdblk *block,void *buf,u32 len,s64 offset,s32 prio);
s32 DVD_ReadAbsAsyncPrio(dvdcmdblk *block,void *buf,u32 len,s64 offset,dvdcbcallback cb,s32 prio);
s32 DVD_ReadAbsAsyncForBS(dvdcmdblk *block,void *buf,u32 len,s64 offset,dvdcbcallback cb);
s32 DVD_SeekPrio(dvdcmdblk *block,s64 offset,s32 prio);
s32 DVD_SeekAbsAsyncPrio(dvdcmdblk *block,s64 offset,dvdcbcallback cb,s32 prio);
s32 DVD_CancelAllAsync(dvdcbcallback cb);
s32 DVD_StopStreamAtEndAsync(dvdcmdblk *block,dvdcbcallback cb);
s32 DVD_StopStreamAtEnd(dvdcmdblk *block);
s32 DVD_ReadDiskID(dvdcmdblk *block,dvddiskid *id,dvdcbcallback cb);
u32 DVD_SetAutoInvalidation(u32 auto_inv);
dvddiskid* DVD_GetCurrentDiskID();
dvddrvinfo* DVD_GetDriveInfo();
# 50 "d:/devkitPro/libogc/include/gccore.h" 2
# 1 "d:/devkitPro/libogc/include/ogc/exi.h" 1
# 146 "d:/devkitPro/libogc/include/ogc/exi.h"
typedef s32 (*EXICallback)(s32 chn,s32 dev);
# 155 "d:/devkitPro/libogc/include/ogc/exi.h"
s32 EXI_ProbeEx(s32 nChn);
# 164 "d:/devkitPro/libogc/include/ogc/exi.h"
s32 EXI_Probe(s32 nChn);
# 175 "d:/devkitPro/libogc/include/ogc/exi.h"
s32 EXI_Lock(s32 nChn,s32 nDev,EXICallback unlockCB);
# 184 "d:/devkitPro/libogc/include/ogc/exi.h"
s32 EXI_Unlock(s32 nChn);
# 195 "d:/devkitPro/libogc/include/ogc/exi.h"
s32 EXI_Select(s32 nChn,s32 nDev,s32 nFrq);
# 206 "d:/devkitPro/libogc/include/ogc/exi.h"
s32 EXI_SelectSD(s32 nChn,s32 nDev,s32 nFrq);
# 215 "d:/devkitPro/libogc/include/ogc/exi.h"
s32 EXI_Deselect(s32 nChn);
# 224 "d:/devkitPro/libogc/include/ogc/exi.h"
s32 EXI_Sync(s32 nChn);
# 237 "d:/devkitPro/libogc/include/ogc/exi.h"
s32 EXI_Imm(s32 nChn,void *pData,u32 nLen,u32 nMode,EXICallback tc_cb);
# 249 "d:/devkitPro/libogc/include/ogc/exi.h"
s32 EXI_ImmEx(s32 nChn,void *pData,u32 nLen,u32 nMode);
# 262 "d:/devkitPro/libogc/include/ogc/exi.h"
s32 EXI_Dma(s32 nChn,void *pData,u32 nLen,u32 nMode,EXICallback tc_cb);
# 271 "d:/devkitPro/libogc/include/ogc/exi.h"
s32 EXI_GetState(s32 nChn);
# 282 "d:/devkitPro/libogc/include/ogc/exi.h"
s32 EXI_GetID(s32 nChn,s32 nDev,u32 *nId);
# 292 "d:/devkitPro/libogc/include/ogc/exi.h"
s32 EXI_Attach(s32 nChn,EXICallback ext_cb);
# 301 "d:/devkitPro/libogc/include/ogc/exi.h"
s32 EXI_Detach(s32 nChn);







void EXI_ProbeReset();
# 319 "d:/devkitPro/libogc/include/ogc/exi.h"
EXICallback EXI_RegisterEXICallback(s32 nChn,EXICallback exi_cb);
# 51 "d:/devkitPro/libogc/include/gccore.h" 2
# 1 "d:/devkitPro/libogc/include/ogc/gu.h" 1
# 39 "d:/devkitPro/libogc/include/ogc/gu.h"
typedef struct _vecf {
 f32 x,y,z;
} guVector;

typedef struct _qrtn {
 f32 x,y,z,w;
} guQuaternion;

typedef f32 Mtx[3][4];
typedef f32 (*MtxP)[4];
typedef f32 ROMtx[4][3];
typedef f32 (*ROMtxP)[3];
typedef f32 Mtx33[3][3];
typedef f32 (*Mtx33P)[3];
typedef f32 Mtx44[4][4];
typedef f32 (*Mtx44P)[4];

void guFrustum(Mtx44 mt,f32 t,f32 b,f32 l,f32 r,f32 n,f32 f);
void guPerspective(Mtx44 mt,f32 fovy,f32 aspect,f32 n,f32 f);
void guOrtho(Mtx44 mt,f32 t,f32 b,f32 l,f32 r,f32 n,f32 f);

void guLightPerspective(Mtx mt,f32 fovY,f32 aspect,f32 scaleS,f32 scaleT,f32 transS,f32 transT);
void guLightOrtho(Mtx mt,f32 t,f32 b,f32 l,f32 r,f32 scaleS,f32 scaleT,f32 transS,f32 transT);
void guLightFrustum(Mtx mt,f32 t,f32 b,f32 l,f32 r,f32 n,f32 scaleS,f32 scaleT,f32 transS,f32 transT);

void guLookAt(Mtx mt,guVector *camPos,guVector *camUp,guVector *target);

void guVecHalfAngle(guVector *a,guVector *b,guVector *half);

void c_guVecAdd(guVector *a,guVector *b,guVector *ab);
void c_guVecSub(guVector *a,guVector *b,guVector *ab);
void c_guVecScale(guVector *src,guVector *dst,f32 scale);
void c_guVecNormalize(guVector *v);
void c_guVecMultiply(Mtx mt,guVector *src,guVector *dst);
void c_guVecCross(guVector *a,guVector *b,guVector *axb);
void c_guVecMultiplySR(Mtx mt,guVector *src,guVector *dst);
f32 c_guVecDotProduct(guVector *a,guVector *b);


void ps_guVecAdd(register guVector *a,register guVector *b,register guVector *ab);
void ps_guVecSub(register guVector *a,register guVector *b,register guVector *ab);
void ps_guVecScale(register guVector *src,register guVector *dst,f32 scale);
void ps_guVecNormalize(register guVector *v);
void ps_guVecCross(register guVector *a,register guVector *b,register guVector *axb);
void ps_guVecMultiply(register Mtx mt,register guVector *src,register guVector *dst);
void ps_guVecMultiplySR(register Mtx mt,register guVector *src,register guVector *dst);
f32 ps_guVecDotProduct(register guVector *a,register guVector *b);


void c_guQuatAdd(guQuaternion *a,guQuaternion *b,guQuaternion *ab);
void c_guQuatSub(guQuaternion *a,guQuaternion *b,guQuaternion *ab);
void c_guQuatMultiply(guQuaternion *a,guQuaternion *b,guQuaternion *ab);
void c_guQuatNormalize(guQuaternion *a,guQuaternion *d);
void c_guQuatInverse(guQuaternion *a,guQuaternion *d);
void c_guQuatMtx(guQuaternion *a,Mtx m);


void ps_guQuatAdd(register guQuaternion *a,register guQuaternion *b,register guQuaternion *ab);
void ps_guQuatSub(register guQuaternion *a,register guQuaternion *b,register guQuaternion *ab);
void ps_guQuatMultiply(register guQuaternion *a,register guQuaternion *b,register guQuaternion *ab);
void ps_guQuatNormalize(register guQuaternion *a,register guQuaternion *d);
void ps_guQuatInverse(register guQuaternion *a,register guQuaternion *d);


void c_guMtxIdentity(Mtx mt);
void c_guMtxCopy(Mtx src,Mtx dst);
void c_guMtxConcat(Mtx a,Mtx b,Mtx ab);
void c_guMtxScale(Mtx mt,f32 xS,f32 yS,f32 zS);
void c_guMtxScaleApply(Mtx src,Mtx dst,f32 xS,f32 yS,f32 zS);
void c_guMtxApplyScale(Mtx src,Mtx dst,f32 xS,f32 yS,f32 zS);
void c_guMtxTrans(Mtx mt,f32 xT,f32 yT,f32 zT);
void c_guMtxTransApply(Mtx src,Mtx dst,f32 xT,f32 yT,f32 zT);
void c_guMtxApplyTrans(Mtx src,Mtx dst,f32 xT,f32 yT,f32 zT);
u32 c_guMtxInverse(Mtx src,Mtx inv);
void c_guMtxTranspose(Mtx src,Mtx xPose);
void c_guMtxRotRad(Mtx mt,const char axis,f32 rad);
void c_guMtxRotTrig(Mtx mt,const char axis,f32 sinA,f32 cosA);
void c_guMtxRotAxisRad(Mtx mt,guVector *axis,f32 rad);
void c_guMtxReflect(Mtx m,guVector *p,guVector *n);
void c_guMtxQuat(Mtx m,guQuaternion *a);


void ps_guMtxIdentity(register Mtx mt);
void ps_guMtxCopy(register Mtx src,register Mtx dst);
void ps_guMtxConcat(register Mtx a,register Mtx b,register Mtx ab);
void ps_guMtxTranspose(register Mtx src,register Mtx xPose);
u32 ps_guMtxInverse(register Mtx src,register Mtx inv);
u32 ps_guMtxInvXpos(register Mtx src,register Mtx invx);
void ps_guMtxScale(register Mtx mt,register f32 xS,register f32 yS,register f32 zS);
void ps_guMtxScaleApply(register Mtx src,register Mtx dst,register f32 xS,register f32 yS,register f32 zS);
void ps_guMtxApplyScale(register Mtx src,register Mtx dst,register f32 xS,register f32 yS,register f32 zS);
void ps_guMtxTrans(register Mtx mt,register f32 xT,register f32 yT,register f32 zT);
void ps_guMtxTransApply(register Mtx src,register Mtx dst,register f32 xT,register f32 yT,register f32 zT);
void ps_guMtxApplyTrans(register Mtx src,register Mtx dst,register f32 xT,register f32 yT,register f32 zT);
void ps_guMtxRotRad(register Mtx mt,register const char axis,register f32 rad);
void ps_guMtxRotTrig(register Mtx mt,register const char axis,register f32 sinA,register f32 cosA);
void ps_guMtxRotAxisRad(register Mtx mt,register guVector *axis,register f32 tmp0);
void ps_guMtxReflect(register Mtx m,register guVector *p,register guVector *n);
# 52 "d:/devkitPro/libogc/include/gccore.h" 2
# 1 "d:/devkitPro/libogc/include/ogc/gx.h" 1
# 11 "d:/devkitPro/libogc/include/ogc/gx.h"
# 1 "d:/devkitPro/libogc/include/ogc/lwp.h" 1
# 62 "d:/devkitPro/libogc/include/ogc/lwp.h"
typedef u32 lwp_t;





typedef u32 lwpq_t;
# 81 "d:/devkitPro/libogc/include/ogc/lwp.h"
s32 LWP_CreateThread(lwp_t *thethread,void* (*entry)(void *),void *arg,void *stackbase,u32 stack_size,u8 prio);
# 90 "d:/devkitPro/libogc/include/ogc/lwp.h"
s32 LWP_SuspendThread(lwp_t thethread);
# 99 "d:/devkitPro/libogc/include/ogc/lwp.h"
s32 LWP_ResumeThread(lwp_t thethread);
# 108 "d:/devkitPro/libogc/include/ogc/lwp.h"
BOOL LWP_ThreadIsSuspended(lwp_t thethread);







lwp_t LWP_GetSelf();
# 126 "d:/devkitPro/libogc/include/ogc/lwp.h"
void LWP_SetThreadPriority(lwp_t thethread,u32 prio);







void LWP_YieldThread();
# 143 "d:/devkitPro/libogc/include/ogc/lwp.h"
void LWP_Reschedule(u32 prio);
# 153 "d:/devkitPro/libogc/include/ogc/lwp.h"
s32 LWP_JoinThread(lwp_t thethread,void **value_ptr);
# 162 "d:/devkitPro/libogc/include/ogc/lwp.h"
s32 LWP_InitQueue(lwpq_t *thequeue);
# 171 "d:/devkitPro/libogc/include/ogc/lwp.h"
void LWP_CloseQueue(lwpq_t thequeue);
# 180 "d:/devkitPro/libogc/include/ogc/lwp.h"
s32 LWP_ThreadSleep(lwpq_t thequeue);
# 189 "d:/devkitPro/libogc/include/ogc/lwp.h"
void LWP_ThreadSignal(lwpq_t thequeue);
# 198 "d:/devkitPro/libogc/include/ogc/lwp.h"
void LWP_ThreadBroadcast(lwpq_t thequeue);
# 12 "d:/devkitPro/libogc/include/ogc/gx.h" 2

# 1 "d:/devkitPro/libogc/include/ogc/gu.h" 1
# 14 "d:/devkitPro/libogc/include/ogc/gx.h" 2
# 942 "d:/devkitPro/libogc/include/ogc/gx.h"
typedef union _wgpipe
{
 vu8 U8;
 vs8 S8;
 vu16 U16;
 vs16 S16;
 vu32 U32;
 vs32 S32;
 vf32 F32;
} WGPipe;

typedef struct _gx_color {
  u8 r;
  u8 g;
  u8 b;
 u8 a;
} GXColor;

typedef struct _gx_colors10 {
  s16 r;
  s16 g;
  s16 b;
 s16 a;
} GXColorS10;

typedef struct _gx_texobj {
 u32 val[8];
} GXTexObj;

typedef struct _gx_tlutobj {
 u32 val[3];
} GXTlutObj;

typedef struct _gx_texreg {
 u32 val[4];
} GXTexRegion;

typedef struct _gx_tlutreg {
 u32 val[4];
} GXTlutRegion;

typedef struct _gx_litobj {
 u32 val[16];
} GXLightObj;

typedef struct _vtx {
 f32 x,y,z;
 u16 s,t;
 u32 rgba;
} Vtx;

typedef struct {
 u8 attr;
 u8 type;
} GXVtxDesc;

typedef struct {
 u32 vtxattr;
 u32 comptype;
 u32 compsize;
 u32 frac;
} GXVtxAttrFmt;

typedef struct {
 u8 pad[128];
} GXFifoObj;

typedef struct {
 u8 dummy[4];
} GXTexReg;

typedef struct {
 u16 r[10];
} GXFogAdjTbl;

typedef void (*GXBreakPtCallback)(void);
typedef void (*GXDrawDoneCallback)(void);





typedef void (*GXDrawSyncCallback)(u16 token);





typedef GXTexRegion* (*GXTexRegionCallback)(GXTexObj *obj,u8 mapid);





typedef GXTlutRegion* (*GXTlutRegionCallback)(u32 tlut_name);

extern WGPipe* const wgPipe;
# 1048 "d:/devkitPro/libogc/include/ogc/gx.h"
GXFifoObj* GX_Init(void *base,u32 size);

void GX_InitFifoBase(GXFifoObj *fifo,void *base,u32 size);
void GX_InitFifoLimits(GXFifoObj *fifo,u32 hiwatermark,u32 lowatermark);
void GX_InitFifoPtrs(GXFifoObj *fifo,void *rd_ptr,void *wt_ptr);
void GX_SetCPUFifo(GXFifoObj *fifo);
void GX_SetGPFifo(GXFifoObj *fifo);
void GX_GetCPUFifo(GXFifoObj *fifo);
void GX_GetGPFifo(GXFifoObj *fifo);
GXDrawDoneCallback GX_SetDrawDoneCallback(GXDrawDoneCallback cb);
GXBreakPtCallback GX_SetBreakPtCallback(GXBreakPtCallback cb);

void GX_AbortFrame();
void GX_Flush();
void GX_SetMisc(u32 token,u32 value);
void GX_SetDrawDone();
void GX_WaitDrawDone();







u16 GX_GetDrawSync();
# 1085 "d:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetDrawSync(u16 token);
# 1097 "d:/devkitPro/libogc/include/ogc/gx.h"
GXDrawSyncCallback GX_SetDrawSyncCallback(GXDrawSyncCallback cb);

void GX_DisableBreakPt();
void GX_EnableBreakPt(void *break_pt);
void GX_DrawDone();
void GX_TexModeSync();
void GX_InvVtxCache();
void GX_ClearVtxDesc();
void GX_LoadProjectionMtx(Mtx44 mt,u8 type);
void GX_SetViewport(f32 xOrig,f32 yOrig,f32 wd,f32 ht,f32 nearZ,f32 farZ);
void GX_SetViewportJitter(f32 xOrig,f32 yOrig,f32 wd,f32 ht,f32 nearZ,f32 farZ,u32 field);
void GX_SetChanCtrl(s32 channel,u8 enable,u8 ambsrc,u8 matsrc,u8 litmask,u8 diff_fn,u8 attn_fn);
void GX_SetChanAmbColor(s32 channel,GXColor color);
void GX_SetChanMatColor(s32 channel,GXColor color);
void GX_SetArray(u32 attr,void *ptr,u8 stride);
# 1127 "d:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetVtxAttrFmt(u8 vtxfmt,u32 vtxattr,u32 comptype,u32 compsize,u32 frac);
void GX_SetVtxAttrFmtv(u8 vtxfmt,GXVtxAttrFmt *attr_list);
void GX_SetVtxDesc(u8 attr,u8 type);
void GX_SetVtxDescv(GXVtxDesc *attr_list);

u32 GX_EndDispList();
void GX_Begin(u8 primitve,u8 vtxfmt,u16 vtxcnt);
void GX_BeginDispList(void *list,u32 size);
void GX_CallDispList(void *list,u32 nbytes);

static inline void GX_End()
{
}

static inline void GX_Position3f32(f32 x,f32 y,f32 z)
{
 wgPipe->F32 = x;
 wgPipe->F32 = y;
 wgPipe->F32 = z;
}

static inline void GX_Position3u16(u16 x,u16 y,u16 z)
{
 wgPipe->U16 = x;
 wgPipe->U16 = y;
 wgPipe->U16 = z;
}

static inline void GX_Position3s16(s16 x,s16 y,s16 z)
{
 wgPipe->S16 = x;
 wgPipe->S16 = y;
 wgPipe->S16 = z;
}

static inline void GX_Position3u8(u8 x,u8 y,u8 z)
{
 wgPipe->U8 = x;
 wgPipe->U8 = y;
 wgPipe->U8 = z;
}

static inline void GX_Position3s8(s8 x,s8 y,s8 z)
{
 wgPipe->S8 = x;
 wgPipe->S8 = y;
 wgPipe->S8 = z;
}

static inline void GX_Position2f32(f32 x,f32 y)
{
 wgPipe->F32 = x;
 wgPipe->F32 = y;
}

static inline void GX_Position2u16(u16 x,u16 y)
{
 wgPipe->U16 = x;
 wgPipe->U16 = y;
}

static inline void GX_Position2s16(s16 x,s16 y)
{
 wgPipe->S16 = x;
 wgPipe->S16 = y;
}

static inline void GX_Position2u8(u8 x,u8 y)
{
 wgPipe->U8 = x;
 wgPipe->U8 = y;
}

static inline void GX_Position2s8(s8 x,s8 y)
{
 wgPipe->S8 = x;
 wgPipe->S8 = y;
}

static inline void GX_Position1x8(u8 index)
{
 wgPipe->U8 = index;
}

static inline void GX_Position1x16(u16 index)
{
 wgPipe->U16 = index;
}

static inline void GX_Normal3f32(f32 nx,f32 ny,f32 nz)
{
 wgPipe->F32 = nx;
 wgPipe->F32 = ny;
 wgPipe->F32 = nz;
}

static inline void GX_Normal3s16(s16 nx,s16 ny,s16 nz)
{
 wgPipe->S16 = nx;
 wgPipe->S16 = ny;
 wgPipe->S16 = nz;
}

static inline void GX_Normal3s8(s8 nx,s8 ny,s8 nz)
{
 wgPipe->S8 = nx;
 wgPipe->S8 = ny;
 wgPipe->S8 = nz;
}

static inline void GX_Normal1x8(u8 index)
{
 wgPipe->U8 = index;
}

static inline void GX_Normal1x16(u16 index)
{
 wgPipe->U16 = index;
}

static inline void GX_Color4u8(u8 r,u8 g,u8 b,u8 a)
{
 wgPipe->U8 = r;
 wgPipe->U8 = g;
 wgPipe->U8 = b;
 wgPipe->U8 = a;
}

static inline void GX_Color3u8(u8 r,u8 g,u8 b)
{
 wgPipe->U8 = r;
 wgPipe->U8 = g;
 wgPipe->U8 = b;
}

static inline void GX_Color3f32(f32 r, f32 g, f32 b)
{
 wgPipe->U8 = (u8)(r * 255.0);
 wgPipe->U8 = (u8)(g * 255.0);
 wgPipe->U8 = (u8)(b * 255.0);

}

static inline void GX_Color1u32(u32 clr)
{
 wgPipe->U32 = clr;
}

static inline void GX_Color1u16(u16 clr)
{
 wgPipe->U16 = clr;
}

static inline void GX_Color1x8(u8 index)
{
 wgPipe->U8 = index;
}

static inline void GX_Color1x16(u16 index)
{
 wgPipe->U16 = index;
}

static inline void GX_TexCoord2f32(f32 s,f32 t)
{
 wgPipe->F32 = s;
 wgPipe->F32 = t;
}

static inline void GX_TexCoord2u16(u16 s,u16 t)
{
 wgPipe->U16 = s;
 wgPipe->U16 = t;
}

static inline void GX_TexCoord2s16(s16 s,s16 t)
{
 wgPipe->S16 = s;
 wgPipe->S16 = t;
}

static inline void GX_TexCoord2u8(u8 s,u8 t)
{
 wgPipe->U8 = s;
 wgPipe->U8 = t;
}

static inline void GX_TexCoord2s8(s8 s,s8 t)
{
 wgPipe->S8 = s;
 wgPipe->S8 = t;
}

static inline void GX_TexCoord1f32(f32 s)
{
 wgPipe->F32 = s;
}

static inline void GX_TexCoord1u16(u16 s)
{
 wgPipe->U16 = s;
}

static inline void GX_TexCoord1s16(s16 s)
{
 wgPipe->S16 = s;
}

static inline void GX_TexCoord1u8(u8 s)
{
 wgPipe->U8 = s;
}

static inline void GX_TexCoord1s8(s8 s)
{
 wgPipe->S8 = s;
}

static inline void GX_TexCoord1x8(u8 index)
{
 wgPipe->U8 = index;
}

static inline void GX_TexCoord1x16(u16 index)
{
 wgPipe->U16 = index;
}

static inline void GX_MatrixIndex1x8(u8 index)
{
 wgPipe->U8 = index;
}

void GX_AdjustForOverscan(GXRModeObj *rmin,GXRModeObj *rmout,u16 hor,u16 ver);
void GX_LoadPosMtxImm(Mtx mt,u32 pnidx);
void GX_LoadPosMtxIdx(u16 mtxidx,u32 pnidx);
void GX_LoadNrmMtxImm(Mtx mt,u32 pnidx);
void GX_LoadNrmMtxIdx3x3(u16 mtxidx,u32 pnidx);
void GX_LoadTexMtxImm(Mtx mt,u32 texidx,u8 type);
void GX_LoadTexMtxIdx(u16 mtxidx,u32 texidx,u8 type);
void GX_SetCurrentMtx(u32 mtx);
# 1379 "d:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetTevOp(u8 tevstage,u8 mode);
# 1390 "d:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetTevColor(u8 tev_regid,GXColor color);
# 1401 "d:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetTevColorS10(u8 tev_regid,GXColorS10 color);
# 1418 "d:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetTevColorIn(u8 tevstage,u8 a,u8 b,u8 c,u8 d);
# 1434 "d:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetTevAlphaIn(u8 tevstage,u8 a,u8 b,u8 c,u8 d);
# 1453 "d:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetTevColorOp(u8 tevstage,u8 tevop,u8 tevbias,u8 tevscale,u8 clamp,u8 tevregid);
# 1473 "d:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetTevAlphaOp(u8 tevstage,u8 tevop,u8 tevbias,u8 tevscale,u8 clamp,u8 tevregid);
void GX_SetNumTexGens(u32 nr);
void GX_SetTexCoordGen(u16 texcoord,u32 tgen_typ,u32 tgen_src,u32 mtxsrc);
void GX_SetTexCoordGen2(u16 texcoord,u32 tgen_typ,u32 tgen_src,u32 mtxsrc,u32 normalize,u32 postmtx);
# 1488 "d:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetZTexture(u8 op,u8 fmt,u32 bias);
void GX_SetZMode(u8 enable,u8 func,u8 update_enable);
void GX_SetZCompLoc(u8 before_tex);
void GX_SetLineWidth(u8 width,u8 fmt);
void GX_SetPointSize(u8 width,u8 fmt);

void GX_SetBlendMode(u8 type,u8 src_fact,u8 dst_fact,u8 op);
void GX_SetCullMode(u8 mode);
void GX_SetCoPlanar(u8 enable);
void GX_EnableTexOffsets(u8 coord,u8 line_enable,u8 point_enable);
void GX_SetClipMode(u8 mode);
void GX_SetScissor(u32 xOrigin,u32 yOrigin,u32 wd,u32 ht);
void GX_SetScissorBoxOffset(s32 xoffset,s32 yoffset);
void GX_SetNumChans(u8 num);

void GX_SetTevOrder(u8 tevstage,u8 texcoord,u32 texmap,u8 color);
void GX_SetNumTevStages(u8 num);

void GX_SetAlphaCompare(u8 comp0,u8 ref0,u8 aop,u8 comp1,u8 ref1);
void GX_SetTevKColor(u8 sel, GXColor col);
void GX_SetTevKColorSel(u8 tevstage,u8 sel);
void GX_SetTevKAlphaSel(u8 tevstage,u8 sel);
void GX_SetTevKColorS10(u8 sel, GXColorS10 col);
# 1525 "d:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetTevSwapMode(u8 tevstage,u8 ras_sel,u8 tex_sel);
# 1540 "d:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetTevSwapModeTable(u8 swapid,u8 r,u8 g,u8 b,u8 a);
void GX_SetTevIndirect(u8 tevstage,u8 indtexid,u8 format,u8 bias,u8 mtxid,u8 wrap_s,u8 wrap_t,u8 addprev,u8 utclod,u8 a);
void GX_SetTevDirect(u8 tevstage);
void GX_SetNumIndStages(u8 nstages);
void GX_SetIndTexOrder(u8 indtexstage,u8 texcoord,u8 texmap);
void GX_SetIndTexCoordScale(u8 indtexid,u8 scale_s,u8 scale_t);
void GX_SetFog(u8 type,f32 startz,f32 endz,f32 nearz,f32 farz,GXColor col);
void GX_SetFogRangeAdj(u8 enable,u16 center,GXFogAdjTbl *table);
void GX_SetIndTexMatrix(u8 indtexmtx,f32 offset_mtx[2][3],s8 scale_exp);
void GX_SetTevIndBumpST(u8 tevstage,u8 indstage,u8 mtx_sel);
void GX_SetTevIndBumpXYZ(u8 tevstage,u8 indstage,u8 mtx_sel);
void GX_SetTevIndTile(u8 tevstage,u8 indtexid,u16 tilesize_x,u16 tilesize_y,u16 tilespacing_x,u16 tilespacing_y,u8 indtexfmt,u8 indtexmtx,u8 bias_sel,u8 alpha_sel);

void GX_SetColorUpdate(u8 enable);
void GX_SetAlphaUpdate(u8 enable);
void GX_SetPixelFmt(u8 pix_fmt,u8 z_fmt);
void GX_SetDither(u8 dither);
void GX_SetDstAlpha(u8 enable,u8 a);
void GX_SetFieldMask(u8 even_mask,u8 odd_mask);
void GX_SetFieldMode(u8 field_mode,u8 half_aspect_ratio);
# 1571 "d:/devkitPro/libogc/include/ogc/gx.h"
f32 GX_GetYScaleFactor(u16 efbHeight,u16 xfbHeight);
# 1583 "d:/devkitPro/libogc/include/ogc/gx.h"
u32 GX_SetDispCopyYScale(f32 yscale);
# 1596 "d:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetDispCopySrc(u16 left,u16 top,u16 wd,u16 ht);
# 1609 "d:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetDispCopyDst(u16 wd,u16 ht);
# 1619 "d:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetCopyClamp(u8 clamp);
# 1629 "d:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetDispCopyGamma(u8 gamma);

void GX_SetCopyFilter(u8 aa,u8 sample_pattern[12][2],u8 vf,u8 vfilter[7]);
void GX_SetDispCopyFrame2Field(u8 mode);
# 1643 "d:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetCopyClear(GXColor color,u32 zvalue);
# 1660 "d:/devkitPro/libogc/include/ogc/gx.h"
void GX_CopyDisp(void *dest,u8 clear);

void GX_SetTexCopySrc(u16 left,u16 top,u16 wd,u16 ht);
# 1678 "d:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetTexCopyDst(u16 wd,u16 ht,u32 fmt,u8 mipmap);
# 1692 "d:/devkitPro/libogc/include/ogc/gx.h"
void GX_CopyTex(void *dest,u8 clear);
# 1702 "d:/devkitPro/libogc/include/ogc/gx.h"
void GX_PixModeSync();
# 1711 "d:/devkitPro/libogc/include/ogc/gx.h"
void GX_ClearBoundingBox();
void GX_PokeAlphaMode(u8 func,u8 threshold);
void GX_PokeAlphaUpdate(u8 update_enable);
void GX_PokeColorUpdate(u8 update_enable);
void GX_PokeDither(u8 dither);
void GX_PokeBlendMode(u8 type,u8 src_fact,u8 dst_fact,u8 op);
void GX_PokeAlphaRead(u8 mode);
void GX_PokeDstAlpha(u8 enable,u8 a);
void GX_PokeARGB(u16 x,u16 y,GXColor color);
void GX_PeekARGB(u16 x,u16 y,GXColor *color);
void GX_PokeZ(u16 x,u16 y,u32 z);
void GX_PeekZ(u16 x,u16 y,u32 *z);
void GX_PokeZMode(u8 comp_enable,u8 func,u8 update_enable);

u32 GX_GetTexObjFmt(GXTexObj *obj);
u32 GX_GetTexObjMipMap(GXTexObj *obj);

u8 GX_GetTexFmt(GXTexObj *obj);
u32 GX_GetTexBufferSize(u16 wd,u16 ht,u32 fmt,u8 mipmap,u8 maxlod);
void GX_InvalidateTexAll();
void GX_InvalidateTexRegion(GXTexRegion *region);
void GX_InitTexCacheRegion(GXTexRegion *region,u8 is32bmipmap,u32 tmem_even,u8 size_even,u32 tmem_odd,u8 size_odd);
void GX_InitTexPreloadRegion(GXTexRegion *region,u32 tmem_even,u32 size_even,u32 tmem_odd,u32 size_odd);
void GX_InitTexObj(GXTexObj *obj,void *img_ptr,u16 wd,u16 ht,u8 fmt,u8 wrap_s,u8 wrap_t,u8 mipmap);
void GX_InitTexObjCI(GXTexObj *obj,void *img_ptr,u16 wd,u16 ht,u8 fmt,u8 wrap_s,u8 wrap_t,u8 mipmap,u32 tlut_name);
void GX_InitTexObjTlut(GXTexObj *obj,u32 tlut_name);
void GX_InitTexObjData(GXTexObj *obj,void *img_ptr);
void GX_InitTexObjWrapMode(GXTexObj *obj,u8 wrap_s,u8 wrap_t);
void GX_InitTexObjFilterMode(GXTexObj *obj,u8 minfilt,u8 magfilt);
void GX_InitTexObjMinLOD(GXTexObj *obj,f32 minlod);
void GX_InitTexObjMaxLOD(GXTexObj *obj,f32 maxlod);
void GX_InitTexObjLODBias(GXTexObj *obj,f32 lodbias);
void GX_InitTexObjBiasClamp(GXTexObj *obj,u8 biasclamp);
void GX_InitTexObjEdgeLOD(GXTexObj *obj,u8 edgelod);
void GX_InitTexObjMaxAniso(GXTexObj *obj,u8 maxaniso);
void GX_LoadTexObj(GXTexObj *obj,u8 mapid);
void GX_LoadTlut(GXTlutObj *obj,u32 tlut_name);
void GX_LoadTexObjPreloaded(GXTexObj *obj,GXTexRegion *region,u8 mapid);
void GX_PreloadEntireTex(GXTexObj *obj,GXTexRegion *region);
void GX_InitTlutObj(GXTlutObj *obj,void *lut,u8 fmt,u16 entries);
void GX_InitTlutRegion(GXTlutRegion *region,u32 tmem_addr,u8 tlut_sz);
void GX_InitTexObjLOD(GXTexObj *obj,u8 minfilt,u8 magfilt,f32 minlod,f32 maxlod,f32 lodbias,u8 biasclamp,u8 edgelod,u8 maxaniso);
void GX_SetTexCoorScaleManually(u8 texcoord,u8 enable,u16 ss,u16 ts);
void GX_SetTexCoordBias(u8 texcoord,u8 s_enable,u8 t_enable);
GXTexRegionCallback GX_SetTexRegionCallback(GXTexRegionCallback cb);
GXTlutRegionCallback GX_SetTlutRegionCallback(GXTlutRegionCallback cb);

void GX_InitLightPos(GXLightObj *lit_obj,f32 x,f32 y,f32 z);
void GX_InitLightColor(GXLightObj *lit_obj,GXColor col);
void GX_InitLightDir(GXLightObj *lit_obj,f32 nx,f32 ny,f32 nz);
void GX_LoadLightObj(GXLightObj *lit_obj,u8 lit_id);
void GX_LoadLightObjIdx(u32 litobjidx,u8 litid);
void GX_InitLightDistAttn(GXLightObj *lit_obj,f32 ref_dist,f32 ref_brite,u8 dist_fn);
void GX_InitLightAttn(GXLightObj *lit_obj,f32 a0,f32 a1,f32 a2,f32 k0,f32 k1,f32 k2);
void GX_InitLightAttnA(GXLightObj *lit_obj,f32 a0,f32 a1,f32 a2);
void GX_InitLightAttnK(GXLightObj *lit_obj,f32 k0,f32 k1,f32 k2);
void GX_InitSpecularDirHA(GXLightObj *lit_obj,f32 nx,f32 ny,f32 nz,f32 hx,f32 hy,f32 hz);
void GX_InitSpecularDir(GXLightObj *lit_obj,f32 nx,f32 ny,f32 nz);
void GX_InitLightSpot(GXLightObj *lit_obj,f32 cut_off,u8 spotfn);

u32 GX_ReadClksPerVtx();
u32 GX_GetOverflowCount();
u32 GX_ResetOverflowCount();
lwp_t GX_GetCurrentGXThread();
lwp_t GX_SetCurrentGXThread();
void GX_RestoreWriteGatherPipe();
void GX_SetGPMetric(u32 perf0,u32 perf1);
void GX_ClearGPMetric();
void GX_InitXfRasMetric();
void GX_ReadXfRasMetric(u32 *xfwaitin,u32 *xfwaitout,u32 *rasbusy,u32 *clks);
void GX_ClearVCacheMetric();
void GX_ReadVCacheMetric(u32 *check,u32 *miss,u32 *stall);
void GX_SetVCacheMetric(u32 attr);
void GX_GetGPStatus(u8 *overhi,u8 *underlow,u8 *readIdle,u8 *cmdIdle,u8 *brkpt);
void GX_ReadGPMetric(u32 *cnt0,u32 *cnt1);
void GX_GetFifoPtrs(GXFifoObj *fifo,void **rd_ptr,void **wt_ptr);
volatile void* GX_RedirectWriteGatherPipe(void *ptr);
# 53 "d:/devkitPro/libogc/include/gccore.h" 2
# 1 "d:/devkitPro/libogc/include/ogc/si.h" 1
# 69 "d:/devkitPro/libogc/include/ogc/si.h"
typedef void (*SICallback)(s32,u32);
typedef void (*RDSTHandler)(u32,void*);

u32 SI_Sync();
u32 SI_Busy();
u32 SI_IsChanBusy(s32 chan);
void SI_EnablePolling(u32 poll);
void SI_DisablePolling(u32 poll);
void SI_SetCommand(s32 chan,u32 cmd);
u32 SI_GetStatus(s32 chan);
u32 SI_GetResponse(s32 chan,void *buf);
u32 SI_GetResponseRaw(s32 chan);
void SI_RefreshSamplingRate();
u32 SI_Transfer(s32 chan,void *out,u32 out_len,void *in,u32 in_len,SICallback cb,u32 us_delay);
u32 SI_GetTypeAsync(s32 chan,SICallback cb);
u32 SI_GetType(s32 chan);
u32 SI_GetCommand(s32 chan);
void SI_TransferCommands();
u32 SI_RegisterPollingHandler(RDSTHandler handler);
u32 SI_UnregisterPollingHandler(RDSTHandler handler);
u32 SI_EnablePollingInterrupt(s32 enable);
# 54 "d:/devkitPro/libogc/include/gccore.h" 2
# 1 "d:/devkitPro/libogc/include/ogc/gx_struct.h" 1
# 55 "d:/devkitPro/libogc/include/gccore.h" 2
# 1 "d:/devkitPro/libogc/include/ogc/irq.h" 1
# 41 "d:/devkitPro/libogc/include/ogc/irq.h"
# 1 "d:/devkitPro/libogc/include/ogc/context.h" 1
# 30 "d:/devkitPro/libogc/include/ogc/context.h"
typedef struct _excption_frame {
 u32 EXCPT_Number;
 u32 SRR0,SRR1;
 u32 GPR[32];
 u32 GQR[8];
 u32 CR, LR, CTR, XER, MSR, DAR;

 u16 state;
 u16 mode;

 f64 FPR[32];
 u32 FPSCR_PAD;
 u32 FPSCR;
 f64 PSFPR[32];
} frame_context;
# 42 "d:/devkitPro/libogc/include/ogc/irq.h" 2
# 134 "d:/devkitPro/libogc/include/ogc/irq.h"
typedef void (*raw_irq_handler_t)(u32 irq,void *ctx);
# 145 "d:/devkitPro/libogc/include/ogc/irq.h"
raw_irq_handler_t IRQ_Request(u32 nIrq,raw_irq_handler_t pHndl,void *pCtx);
# 154 "d:/devkitPro/libogc/include/ogc/irq.h"
raw_irq_handler_t IRQ_Free(u32 nIrq);
# 163 "d:/devkitPro/libogc/include/ogc/irq.h"
raw_irq_handler_t IRQ_GetHandler(u32 nIrq);







u32 IRQ_Disable(void);
# 180 "d:/devkitPro/libogc/include/ogc/irq.h"
void IRQ_Restore(u32 level);

void __MaskIrq(u32 nMask);
void __UnmaskIrq(u32 nMask);
# 56 "d:/devkitPro/libogc/include/gccore.h" 2
# 1 "d:/devkitPro/libogc/include/ogc/lwp.h" 1
# 57 "d:/devkitPro/libogc/include/gccore.h" 2
# 1 "d:/devkitPro/libogc/include/ogc/mutex.h" 1
# 51 "d:/devkitPro/libogc/include/ogc/mutex.h"
typedef u32 mutex_t;
# 61 "d:/devkitPro/libogc/include/ogc/mutex.h"
s32 LWP_MutexInit(mutex_t *mutex,u8 use_recursive);
# 70 "d:/devkitPro/libogc/include/ogc/mutex.h"
s32 LWP_MutexDestroy(mutex_t mutex);
# 79 "d:/devkitPro/libogc/include/ogc/mutex.h"
s32 LWP_MutexLock(mutex_t mutex);
# 88 "d:/devkitPro/libogc/include/ogc/mutex.h"
s32 LWP_MutexTryLock(mutex_t mutex);
# 97 "d:/devkitPro/libogc/include/ogc/mutex.h"
s32 LWP_MutexUnlock(mutex_t mutex);
# 58 "d:/devkitPro/libogc/include/gccore.h" 2
# 1 "d:/devkitPro/libogc/include/ogc/message.h" 1
# 58 "d:/devkitPro/libogc/include/ogc/message.h"
typedef u32 mqbox_t;





typedef void* mqmsg_t;
# 75 "d:/devkitPro/libogc/include/ogc/message.h"
s32 MQ_Init(mqbox_t *mqbox,u32 count);
# 84 "d:/devkitPro/libogc/include/ogc/message.h"
void MQ_Close(mqbox_t mqbox);
# 95 "d:/devkitPro/libogc/include/ogc/message.h"
BOOL MQ_Send(mqbox_t mqbox,mqmsg_t msg,u32 flags);
# 106 "d:/devkitPro/libogc/include/ogc/message.h"
BOOL MQ_Jam(mqbox_t mqbox,mqmsg_t msg,u32 flags);
# 117 "d:/devkitPro/libogc/include/ogc/message.h"
BOOL MQ_Receive(mqbox_t mqbox,mqmsg_t *msg,u32 flags);
# 59 "d:/devkitPro/libogc/include/gccore.h" 2
# 1 "d:/devkitPro/libogc/include/ogc/semaphore.h" 1
# 52 "d:/devkitPro/libogc/include/ogc/semaphore.h"
typedef u32 sem_t;
# 63 "d:/devkitPro/libogc/include/ogc/semaphore.h"
s32 LWP_SemInit(sem_t *sem,u32 start,u32 max);
# 72 "d:/devkitPro/libogc/include/ogc/semaphore.h"
s32 LWP_SemDestroy(sem_t sem);
# 81 "d:/devkitPro/libogc/include/ogc/semaphore.h"
s32 LWP_SemWait(sem_t sem);
# 90 "d:/devkitPro/libogc/include/ogc/semaphore.h"
s32 LWP_SemPost(sem_t sem);
# 60 "d:/devkitPro/libogc/include/gccore.h" 2
# 1 "d:/devkitPro/libogc/include/ogc/pad.h" 1
# 46 "d:/devkitPro/libogc/include/ogc/pad.h"
typedef struct _padstatus {
 u16 button;
 s8 stickX;
 s8 stickY;
 s8 substickX;
 s8 substickY;
 u8 triggerL;
 u8 triggerR;
 u8 analogA;
 u8 analogB;
 s8 err;
} PADStatus;

typedef void (*sampling_callback)(void);




u32 PAD_Init();
u32 PAD_Sync();
u32 PAD_Read(PADStatus *status);
u32 PAD_Reset(u32 mask);
u32 PAD_Recalibrate(u32 mask);
void PAD_Clamp(PADStatus *status);
void PAD_ControlMotor(s32 chan,u32 cmd);
void PAD_SetSpec(u32 spec);

u32 PAD_ScanPads();

u16 PAD_ButtonsUp(int pad);
u16 PAD_ButtonsDown(int pad);
u16 PAD_ButtonsHeld(int pad);

s8 PAD_SubStickX(int pad);
s8 PAD_SubStickY(int pad);

s8 PAD_StickX(int pad);
s8 PAD_StickY(int pad);

u8 PAD_TriggerL(int pad);
u8 PAD_TriggerR(int pad);


sampling_callback PAD_SetSamplingCallback(sampling_callback cb);
# 61 "d:/devkitPro/libogc/include/gccore.h" 2
# 1 "d:/devkitPro/libogc/include/ogc/tpl.h" 1



# 1 "d:/devkitPro/libogc/include/ogc/gx.h" 1
# 5 "d:/devkitPro/libogc/include/ogc/tpl.h" 2





typedef void* FHANDLE;


typedef struct _tplfile {
 int type;
 int ntextures;
 void *texdesc;
 FHANDLE tpl_file;
} TPLFile;

s32 TPL_OpenTPLFromFile(TPLFile* tdf, const char* file_name);
s32 TPL_OpenTPLFromMemory(TPLFile* tdf, const void *memory,u32 len);
s32 TPL_GetTexture(TPLFile *tdf,s32 id,GXTexObj *texObj);
s32 TPL_GetTextureCI(TPLFile *tdf,s32 id,GXTexObj *texObj,GXTlutObj *tlutObj,u8 tluts);
void TPL_CloseTPLFile(TPLFile *tdf);
# 62 "d:/devkitPro/libogc/include/gccore.h" 2
# 1 "d:/devkitPro/libogc/include/ogc/system.h" 1
# 42 "d:/devkitPro/libogc/include/ogc/system.h"
# 1 "d:/devkitPro/libogc/include/gcutil.h" 1
# 43 "d:/devkitPro/libogc/include/ogc/system.h" 2
# 1 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/time.h" 1 3
# 10 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/time.h" 3
# 1 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/_ansi.h" 1 3
# 15 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/_ansi.h" 3
# 1 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/newlib.h" 1 3
# 16 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/_ansi.h" 2 3
# 1 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/config.h" 1 3



# 1 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/machine/ieeefp.h" 1 3
# 5 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/config.h" 2 3
# 17 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/_ansi.h" 2 3
# 11 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/time.h" 2 3
# 1 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/reent.h" 1 3
# 13 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/reent.h" 3
# 1 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/_ansi.h" 1 3
# 14 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/reent.h" 2 3
# 1 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/_types.h" 1 3
# 12 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/_types.h" 3
# 1 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/machine/_types.h" 1 3






# 1 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/machine/_default_types.h" 1 3
# 26 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/machine/_default_types.h" 3
typedef signed char __int8_t ;
typedef unsigned char __uint8_t ;
# 36 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/machine/_default_types.h" 3
typedef signed short __int16_t;
typedef unsigned short __uint16_t;
# 46 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/machine/_default_types.h" 3
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
# 58 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/machine/_default_types.h" 3
typedef signed int __int32_t;
typedef unsigned int __uint32_t;
# 76 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/machine/_default_types.h" 3
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
# 99 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/machine/_default_types.h" 3
typedef signed long long __int64_t;
typedef unsigned long long __uint64_t;
# 8 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/machine/_types.h" 2 3


typedef long long _fpos_t;


typedef long long _off_t;
# 13 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/_types.h" 2 3
# 1 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/lock.h" 1 3





typedef int _LOCK_T;
typedef int _LOCK_RECURSIVE_T;
# 47 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/lock.h" 3
extern int __libc_lock_init(int*,int);
extern int __libc_lock_close(int*);
extern int __libc_lock_acquire(int*);
extern int __libc_lock_try_acquire(int*);
extern int __libc_lock_release(int*);
# 14 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/_types.h" 2 3
# 24 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/_types.h" 3
typedef short __dev_t;




typedef unsigned short __uid_t;


typedef unsigned short __gid_t;



__extension__ typedef long long _off64_t;
# 56 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/_types.h" 3
typedef int _ssize_t;






# 1 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/include/stddef.h" 1 3 4
# 355 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/include/stddef.h" 3 4
typedef unsigned int wint_t;
# 64 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/_types.h" 2 3



typedef struct
{
  int __count;
  union
  {
    wint_t __wch;
    unsigned char __wchb[4];
  } __value;
} _mbstate_t;



typedef _LOCK_RECURSIVE_T _flock_t;




typedef void *_iconv_t;
# 15 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/reent.h" 2 3






typedef unsigned long __ULong;
# 37 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/reent.h" 3
struct _reent;






struct _Bigint
{
  struct _Bigint *_next;
  int _k, _maxwds, _sign, _wds;
  __ULong _x[1];
};


struct __tm
{
  int __tm_sec;
  int __tm_min;
  int __tm_hour;
  int __tm_mday;
  int __tm_mon;
  int __tm_year;
  int __tm_wday;
  int __tm_yday;
  int __tm_isdst;
};







struct _on_exit_args {
 void * _fnargs[32];
 void * _dso_handle[32];

 __ULong _fntypes;


 __ULong _is_cxa;
};
# 89 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/reent.h" 3
struct _atexit {
 struct _atexit *_next;
 int _ind;

 void (*_fns[32])(void);
        struct _on_exit_args _on_exit_args;
};
# 105 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/reent.h" 3
struct __sbuf {
 unsigned char *_base;
 int _size;
};
# 169 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/reent.h" 3
struct __sFILE {
  unsigned char *_p;
  int _r;
  int _w;
  short _flags;
  short _file;
  struct __sbuf _bf;
  int _lbfsize;






  void * _cookie;

  int (*_read) (struct _reent *, void *, char *, int);

  int (*_write) (struct _reent *, void *, const char *, int);

  _fpos_t (*_seek) (struct _reent *, void *, _fpos_t, int);
  int (*_close) (struct _reent *, void *);


  struct __sbuf _ub;
  unsigned char *_up;
  int _ur;


  unsigned char _ubuf[3];
  unsigned char _nbuf[1];


  struct __sbuf _lb;


  int _blksize;
  int _offset;


  struct _reent *_data;



  _flock_t _lock;

  _mbstate_t _mbstate;
  int _flags2;
};
# 273 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/reent.h" 3
typedef struct __sFILE __FILE;



struct _glue
{
  struct _glue *_next;
  int _niobs;
  __FILE *_iobs;
};
# 305 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/reent.h" 3
struct _rand48 {
  unsigned short _seed[3];
  unsigned short _mult[3];
  unsigned short _add;




};
# 579 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/reent.h" 3
struct _reent
{
  int _errno;




  __FILE *_stdin, *_stdout, *_stderr;

  int _inc;
  char _emergency[25];

  int _current_category;
  const char *_current_locale;

  int __sdidinit;

  void (*__cleanup) (struct _reent *);


  struct _Bigint *_result;
  int _result_k;
  struct _Bigint *_p5s;
  struct _Bigint **_freelist;


  int _cvtlen;
  char *_cvtbuf;

  union
    {
      struct
        {
          unsigned int _unused_rand;
          char * _strtok_last;
          char _asctime_buf[26];
          struct __tm _localtime_buf;
          int _gamma_signgam;
          __extension__ unsigned long long _rand_next;
          struct _rand48 _r48;
          _mbstate_t _mblen_state;
          _mbstate_t _mbtowc_state;
          _mbstate_t _wctomb_state;
          char _l64a_buf[8];
          char _signal_buf[24];
          int _getdate_err;
          _mbstate_t _mbrlen_state;
          _mbstate_t _mbrtowc_state;
          _mbstate_t _mbsrtowcs_state;
          _mbstate_t _wcrtomb_state;
          _mbstate_t _wcsrtombs_state;
   int _h_errno;
        } _reent;



      struct
        {

          unsigned char * _nextf[30];
          unsigned int _nmalloc[30];
        } _unused;
    } _new;


  struct _atexit *_atexit;
  struct _atexit _atexit0;


  void (**(_sig_func))(int);




  struct _glue __sglue;
  __FILE __sf[3];
};
# 812 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/reent.h" 3
extern struct _reent *_impure_ptr __attribute__((__section__(".sdata")));
extern struct _reent *const _global_impure_ptr __attribute__((__section__(".sdata")));

void _reclaim_reent (struct _reent *);
# 12 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/time.h" 2 3






# 1 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/machine/time.h" 1 3
# 19 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/time.h" 2 3
# 27 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/time.h" 3
# 1 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/include/stddef.h" 1 3 4
# 214 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/include/stddef.h" 3 4
typedef unsigned int size_t;
# 28 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/time.h" 2 3

# 1 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/types.h" 1 3
# 69 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/types.h" 3
# 1 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/include/stddef.h" 1 3 4
# 152 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/include/stddef.h" 3 4
typedef int ptrdiff_t;
# 326 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/include/stddef.h" 3 4
typedef long int wchar_t;
# 70 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/types.h" 2 3
# 1 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/machine/types.h" 1 3
# 19 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/machine/types.h" 3
typedef long int __off_t;
typedef int __pid_t;

__extension__ typedef long long int __loff_t;
# 71 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/types.h" 2 3
# 92 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/types.h" 3
typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;
typedef unsigned long u_long;



typedef unsigned short ushort;
typedef unsigned int uint;



typedef unsigned long clock_t;




typedef long time_t;




struct timespec {
  time_t tv_sec;
  long tv_nsec;
};

struct itimerspec {
  struct timespec it_interval;
  struct timespec it_value;
};


typedef long daddr_t;
typedef char * caddr_t;






typedef unsigned int ino_t;
# 162 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/types.h" 3
typedef _off_t off_t;
typedef __dev_t dev_t;
typedef __uid_t uid_t;
typedef __gid_t gid_t;


typedef int pid_t;

typedef long key_t;

typedef _ssize_t ssize_t;
# 186 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/types.h" 3
typedef unsigned int mode_t __attribute__ ((__mode__ (__SI__)));




typedef unsigned short nlink_t;
# 213 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/types.h" 3
typedef long fd_mask;







typedef struct _types_fd_set {
 fd_mask fds_bits[(((64)+(((sizeof (fd_mask) * 8))-1))/((sizeof (fd_mask) * 8)))];
} _types_fd_set;
# 244 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/types.h" 3
typedef unsigned long clockid_t;




typedef unsigned long timer_t;



typedef unsigned long useconds_t;
typedef long suseconds_t;

typedef __uint32_t fsblkcnt_t;
typedef __uint32_t fsfilcnt_t;

# 1 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/features.h" 1 3
# 260 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/types.h" 2 3
# 30 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/time.h" 2 3



struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;
};

clock_t clock (void);
double difftime (time_t _time2, time_t _time1);
time_t mktime (struct tm *_timeptr);
time_t time (time_t *_timer);

char *asctime (const struct tm *_tblock);
char *ctime (const time_t *_time);
struct tm *gmtime (const time_t *_timer);
struct tm *localtime (const time_t *_timer);

size_t strftime (char *_s, size_t _maxsize, const char *_fmt, const struct tm *_t);

char *asctime_r (const struct tm *, char *);
char *ctime_r (const time_t *, char *);
struct tm *gmtime_r (const time_t *, struct tm *);
struct tm *localtime_r (const time_t *, struct tm *);








char *strptime (const char *, const char *, struct tm *);
void tzset (void);
void _tzset_r (struct _reent *);

typedef struct __tzrule_struct
{
  char ch;
  int m;
  int n;
  int d;
  int s;
  time_t change;
  long offset;
} __tzrule_type;

typedef struct __tzinfo_struct
{
  int __tznorth;
  int __tzyear;
  __tzrule_type __tzrule[2];
} __tzinfo_type;

__tzinfo_type *__gettzinfo (void);
# 118 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/time.h" 3
extern long _timezone;
extern int _daylight;
extern char *_tzname[2];
# 44 "d:/devkitPro/libogc/include/ogc/system.h" 2
# 134 "d:/devkitPro/libogc/include/ogc/system.h"
typedef u32 syswd_t;
# 150 "d:/devkitPro/libogc/include/ogc/system.h"
typedef struct _syssram syssram;

struct _syssram {
 u16 checksum;
 u16 checksum_inv;
 u32 ead0;
 u32 ead1;
 u32 counter_bias;
 s8 display_offsetH;
 u8 ntd;
 u8 lang;
 u8 flags;
} __attribute__((packed));
# 176 "d:/devkitPro/libogc/include/ogc/system.h"
typedef struct _syssramex syssramex;

struct _syssramex {
 u8 flash_id[2][12];
 u32 wirelessKbd_id;
 u16 wirelessPad_id[4];
 u8 dvderr_code;
 u8 __padding0;
 u16 flashID_chksum[2];
 u8 __padding1[4];
} __attribute__((packed));

typedef void (*alarmcallback)(syswd_t alarm,void *cb_arg);

typedef struct _sys_fontheader sys_fontheader;

struct _sys_fontheader {
 u16 font_type;
 u16 first_char;
 u16 last_char;
 u16 inval_char;
 u16 asc;
 u16 desc;
 u16 width;
 u16 leading;
    u16 cell_width;
    u16 cell_height;
    u32 sheet_size;
    u16 sheet_format;
    u16 sheet_column;
    u16 sheet_row;
    u16 sheet_width;
    u16 sheet_height;
    u16 width_table;
    u32 sheet_image;
    u32 sheet_fullsize;
    u8 c0;
    u8 c1;
    u8 c2;
    u8 c3;
} __attribute__((packed));

typedef void (*resetcallback)(void);
typedef void (*powercallback)(void);
typedef s32 (*resetfunction)(s32 final);
typedef struct _sys_resetinfo sys_resetinfo;

struct _sys_resetinfo {
 lwp_node node;
 resetfunction func;
 u32 prio;
};






void SYS_Init();
# 244 "d:/devkitPro/libogc/include/ogc/system.h"
void* SYS_AllocateFramebuffer(GXRModeObj *rmode);


void SYS_ProtectRange(u32 chan,void *addr,u32 bytes,u32 cntrl);
void SYS_StartPMC(u32 mcr0val,u32 mcr1val);
void SYS_DumpPMC();
void SYS_StopPMC();
# 259 "d:/devkitPro/libogc/include/ogc/system.h"
s32 SYS_CreateAlarm(syswd_t *thealarm);
# 270 "d:/devkitPro/libogc/include/ogc/system.h"
s32 SYS_SetAlarm(syswd_t thealarm,const struct timespec *tp,alarmcallback cb,void *cbarg);
# 282 "d:/devkitPro/libogc/include/ogc/system.h"
s32 SYS_SetPeriodicAlarm(syswd_t thealarm,const struct timespec *tp_start,const struct timespec *tp_period,alarmcallback cb,void *cbarg);
# 291 "d:/devkitPro/libogc/include/ogc/system.h"
s32 SYS_RemoveAlarm(syswd_t thealarm);
# 300 "d:/devkitPro/libogc/include/ogc/system.h"
s32 SYS_CancelAlarm(syswd_t thealarm);


void SYS_SetWirelessID(u32 chan,u32 id);
u32 SYS_GetWirelessID(u32 chan);
u32 SYS_GetFontEncoding();
u32 SYS_InitFont(sys_fontheader **font_header);
void SYS_GetFontTexture(s32 c,void **image,s32 *xpos,s32 *ypos,s32 *width);
void SYS_GetFontTexel(s32 c,void *image,s32 pos,s32 stride,s32 *width);
void SYS_ResetSystem(s32 reset,u32 reset_code,s32 force_menu);
void SYS_RegisterResetFunc(sys_resetinfo *info);
u32 SYS_GetArena1Size();
void SYS_SwitchFiber(u32 arg0,u32 arg1,u32 arg2,u32 arg3,u32 pc,u32 newsp);

void* SYS_GetArena1Lo();
void SYS_SetArena1Lo(void *newLo);
void* SYS_GetArena1Hi();
void SYS_SetArena1Hi(void *newHi);
u32 SYS_GetArena1Size();

resetcallback SYS_SetResetCallback(resetcallback cb);

u32 SYS_ResetButtonDown();


u32 SYS_GetHollywoodRevision();
void* SYS_GetArena2Lo();
void SYS_SetArena2Lo(void *newLo);
void* SYS_GetArena2Hi();
void SYS_SetArena2Hi(void *newHi);
u32 SYS_GetArena2Size();
powercallback SYS_SetPowerCallback(powercallback cb);


void kprintf(const char *str, ...);
# 63 "d:/devkitPro/libogc/include/gccore.h" 2
# 1 "d:/devkitPro/libogc/include/ogc/video.h" 1
# 42 "d:/devkitPro/libogc/include/ogc/video.h"
# 1 "d:/devkitPro/libogc/include/ogc/video_types.h" 1
# 152 "d:/devkitPro/libogc/include/ogc/video_types.h"
extern GXRModeObj TVNtsc240Ds;
extern GXRModeObj TVNtsc240DsAa;
extern GXRModeObj TVNtsc240Int;
extern GXRModeObj TVNtsc240IntAa;
extern GXRModeObj TVNtsc480Int;
extern GXRModeObj TVNtsc480IntDf;
extern GXRModeObj TVNtsc480IntAa;
extern GXRModeObj TVNtsc480Prog;
extern GXRModeObj TVNtsc480ProgSoft;
extern GXRModeObj TVNtsc480ProgAa;
extern GXRModeObj TVMpal480IntDf;
extern GXRModeObj TVMpal480IntAa;
extern GXRModeObj TVMpal240Ds;
extern GXRModeObj TVMpal240DsAa;
extern GXRModeObj TVPal264Ds;
extern GXRModeObj TVPal264DsAa;
extern GXRModeObj TVPal264Int;
extern GXRModeObj TVPal264IntAa;
extern GXRModeObj TVPal524IntAa;
extern GXRModeObj TVPal528Int;
extern GXRModeObj TVPal528IntDf;
extern GXRModeObj TVPal574IntDfScale;
extern GXRModeObj TVEurgb60Hz240Ds;
extern GXRModeObj TVEurgb60Hz240DsAa;
extern GXRModeObj TVEurgb60Hz240Int;
extern GXRModeObj TVEurgb60Hz240IntAa;
extern GXRModeObj TVEurgb60Hz480Int;
extern GXRModeObj TVEurgb60Hz480IntDf;
extern GXRModeObj TVEurgb60Hz480IntAa;
extern GXRModeObj TVEurgb60Hz480Prog;
extern GXRModeObj TVEurgb60Hz480ProgSoft;
extern GXRModeObj TVEurgb60Hz480ProgAa;
# 43 "d:/devkitPro/libogc/include/ogc/video.h" 2
# 54 "d:/devkitPro/libogc/include/ogc/video.h"
typedef void (*VIRetraceCallback)(u32 retraceCnt);

typedef void (*VIPositionCallback)(u32 posX,u32 posY);

void* VIDEO_GetNextFramebuffer();
void* VIDEO_GetCurrentFramebuffer();
# 68 "d:/devkitPro/libogc/include/ogc/video.h"
void VIDEO_Init();
# 77 "d:/devkitPro/libogc/include/ogc/video.h"
void VIDEO_Flush();
# 88 "d:/devkitPro/libogc/include/ogc/video.h"
void VIDEO_SetBlack(u8 black);
# 97 "d:/devkitPro/libogc/include/ogc/video.h"
u32 VIDEO_GetNextField();
# 106 "d:/devkitPro/libogc/include/ogc/video.h"
u32 VIDEO_GetCurrentLine();
# 115 "d:/devkitPro/libogc/include/ogc/video.h"
u32 VIDEO_GetCurrentTvMode();
# 126 "d:/devkitPro/libogc/include/ogc/video.h"
void VIDEO_Configure(GXRModeObj *rmode);
# 139 "d:/devkitPro/libogc/include/ogc/video.h"
void VIDEO_ClearFrameBuffer(GXRModeObj *rmode,void *fb,u32 color);
# 148 "d:/devkitPro/libogc/include/ogc/video.h"
void VIDEO_WaitVSync(void);
# 157 "d:/devkitPro/libogc/include/ogc/video.h"
void VIDEO_SetNextFramebuffer(void *fb);
# 166 "d:/devkitPro/libogc/include/ogc/video.h"
void VIDEO_SetNextRightFramebuffer(void *fb);
# 177 "d:/devkitPro/libogc/include/ogc/video.h"
VIRetraceCallback VIDEO_SetPreRetraceCallback(VIRetraceCallback callback);
# 188 "d:/devkitPro/libogc/include/ogc/video.h"
VIRetraceCallback VIDEO_SetPostRetraceCallback(VIRetraceCallback callback);
# 197 "d:/devkitPro/libogc/include/ogc/video.h"
u32 VIDEO_HaveComponentCable(void);

GXRModeObj * VIDEO_GetPreferredMode(GXRModeObj *mode);
# 64 "d:/devkitPro/libogc/include/gccore.h" 2
# 1 "d:/devkitPro/libogc/include/ogc/usbgecko.h" 1
# 10 "d:/devkitPro/libogc/include/ogc/usbgecko.h"
void usb_flush(s32 chn);
int usb_isgeckoalive(s32 chn);
int usb_recvbuffer(s32 chn,void *buffer,int size);
int usb_sendbuffer(s32 chn,const void *buffer,int size);
int usb_recvbuffer_safe(s32 chn,void *buffer,int size);
int usb_sendbuffer_safe(s32 chn,const void *buffer,int size);
# 65 "d:/devkitPro/libogc/include/gccore.h" 2
# 1 "d:/devkitPro/libogc/include/ogc/video_types.h" 1
# 66 "d:/devkitPro/libogc/include/gccore.h" 2
# 1 "d:/devkitPro/libogc/include/ogc/texconv.h" 1
# 45 "d:/devkitPro/libogc/include/ogc/texconv.h"
void MakeTexture565(const void *src,void *dst,s32 width,s32 height);
# 67 "d:/devkitPro/libogc/include/gccore.h" 2


# 1 "d:/devkitPro/libogc/include/ogc/ipc.h" 1
# 56 "d:/devkitPro/libogc/include/ogc/ipc.h"
typedef struct _ioctlv
{
 void *data;
 u32 len;
} ioctlv;

void __IPC_Reinitialize(void);
u32 IPC_ReadReg(u32 reg);

typedef s32 (*ipccallback)(s32 result,void *usrdata);

s32 iosCreateHeap(s32 size);
s32 iosDestroyHeap(s32 hid);
void* iosAlloc(s32 hid,s32 size);
void iosFree(s32 hid,void *ptr);

void* IPC_GetBufferLo();
void* IPC_GetBufferHi();
void IPC_SetBufferLo(void *bufferlo);
void IPC_SetBufferHi(void *bufferhi);

s32 IOS_Open(const char *filepath,u32 mode);
s32 IOS_OpenAsync(const char *filepath,u32 mode,ipccallback ipc_cb,void *usrdata);

s32 IOS_Close(s32 fd);
s32 IOS_CloseAsync(s32 fd,ipccallback ipc_cb,void *usrdata);

s32 IOS_Seek(s32 fd,s32 where,s32 whence);
s32 IOS_SeekAsync(s32 fd,s32 where,s32 whence,ipccallback ipc_cb,void *usrdata);
s32 IOS_Read(s32 fd,void *buf,s32 len);
s32 IOS_ReadAsync(s32 fd,void *buf,s32 len,ipccallback ipc_cb,void *usrdata);
s32 IOS_Write(s32 fd,const void *buf,s32 len);
s32 IOS_WriteAsync(s32 fd,const void *buf,s32 len,ipccallback ipc_cb,void *usrdata);

s32 IOS_Ioctl(s32 fd,s32 ioctl,void *buffer_in,s32 len_in,void *buffer_io,s32 len_io);
s32 IOS_IoctlAsync(s32 fd,s32 ioctl,void *buffer_in,s32 len_in,void *buffer_io,s32 len_io,ipccallback ipc_cb,void *usrdata);
s32 IOS_Ioctlv(s32 fd,s32 ioctl,s32 cnt_in,s32 cnt_io,ioctlv *argv);
s32 IOS_IoctlvAsync(s32 fd,s32 ioctl,s32 cnt_in,s32 cnt_io,ioctlv *argv,ipccallback ipc_cb,void *usrdata);

s32 IOS_IoctlvFormat(s32 hId,s32 fd,s32 ioctl,const char *format,...);
s32 IOS_IoctlvFormatAsync(s32 hId,s32 fd,s32 ioctl,ipccallback usr_cb,void *usr_data,const char *format,...);

s32 IOS_IoctlvReboot(s32 fd,s32 ioctl,s32 cnt_in,s32 cnt_io,ioctlv *argv);
s32 IOS_IoctlvRebootBackground(s32 fd,s32 ioctl,s32 cnt_in,s32 cnt_io,ioctlv *argv);
# 70 "d:/devkitPro/libogc/include/gccore.h" 2
# 1 "d:/devkitPro/libogc/include/ogc/es.h" 1
# 59 "d:/devkitPro/libogc/include/ogc/es.h"
typedef u32 sigtype;
typedef sigtype sig_header;
typedef sig_header signed_blob;

typedef u8 sha1[20];
typedef u8 aeskey[16];

typedef struct _sig_rsa2048 {
 sigtype type;
 u8 sig[256];
 u8 fill[60];
} __attribute__((packed)) sig_rsa2048;

typedef struct _sig_rsa4096 {
 sigtype type;
 u8 sig[512];
 u8 fill[60];
} __attribute__((packed)) sig_rsa4096;

typedef char sig_issuer[0x40];

typedef struct _tiklimit {
 u32 tag;
 u32 value;
} __attribute__((packed)) tiklimit;

typedef struct _tikview {
 u32 view;
 u64 ticketid;
 u32 devicetype;
 u64 titleid;
 u16 access_mask;
 u8 reserved[0x3c];
 u8 cidx_mask[0x40];
 u16 padding;
 tiklimit limits[8];
} __attribute__((packed)) tikview;

typedef struct _tik {
 sig_issuer issuer;
 u8 fill[63];
 aeskey cipher_title_key;
 u8 fill2;
 u64 ticketid;
 u32 devicetype;
 u64 titleid;
 u16 access_mask;
 u8 reserved[0x3c];
 u8 cidx_mask[0x40];
 u16 padding;
 tiklimit limits[8];
} __attribute__((packed)) tik;

typedef struct _tmd_content {
 u32 cid;
 u16 index;
 u16 type;
 u64 size;
 sha1 hash;
} __attribute__((packed)) tmd_content;

typedef struct _tmd {
 sig_issuer issuer;
 u8 version;
 u8 ca_crl_version;
 u8 signer_crl_version;
 u8 fill2;
 u64 sys_version;
 u64 title_id;
 u32 title_type;
 u16 group_id;
 u16 zero;
 u16 region;
 u8 ratings[16];
 u8 reserved[12];
 u8 ipc_mask[12];
 u8 reserved2[18];
 u32 access_rights;
 u16 title_version;
 u16 num_contents;
 u16 boot_index;
 u16 fill3;


 tmd_content contents[];
} __attribute__((packed)) tmd;

typedef struct _cert_header {
 sig_issuer issuer;
 u32 cert_type;
 char cert_name[64];
 u32 cert_id;
} __attribute__((packed)) cert_header;

typedef struct _cert_rsa2048 {
 sig_issuer issuer;
 u32 cert_type;
 char cert_name[64];
 u32 cert_id;
 u8 modulus[256];
 u32 exponent;
 u8 pad[0x34];
} __attribute__((packed)) cert_rsa2048;

typedef struct _cert_rsa4096 {
 sig_issuer issuer;
 u32 cert_type;
 char cert_name[64];
 u32 cert_id;
 u8 modulus[512];
 u32 exponent;
 u8 pad[0x34];
} __attribute__((packed)) cert_rsa4096;
# 206 "d:/devkitPro/libogc/include/ogc/es.h"
s32 __ES_Init(void);
s32 __ES_Close(void);
s32 __ES_Reset(void);
s32 ES_GetTitleID(u64 *titleID);
s32 ES_SetUID(u64 uid);
s32 ES_GetDataDir(u64 titleID, char *filepath);
s32 ES_GetNumTicketViews(u64 titleID, u32 *cnt);
s32 ES_GetTicketViews(u64 titleID, tikview *views, u32 cnt);
s32 ES_GetNumOwnedTitles(u32 *cnt);
s32 ES_GetOwnedTitles(u64 *titles, u32 cnt);
s32 ES_GetNumTitles(u32 *cnt);
s32 ES_GetTitles(u64 *titles, u32 cnt);
s32 ES_GetNumStoredTMDContents(const signed_blob *stmd, u32 tmd_size, u32 *cnt);
s32 ES_GetStoredTMDContents(const signed_blob *stmd, u32 tmd_size, u32 *contents, u32 cnt);
s32 ES_GetStoredTMDSize(u64 titleID, u32 *size);
s32 ES_GetStoredTMD(u64 titleID, signed_blob *stmd, u32 size);
s32 ES_GetTitleContentsCount(u64 titleID, u32 *num);
s32 ES_GetTitleContents(u64 titleID, u8 *data, u32 size);
s32 ES_GetTMDViewSize(u64 titleID, u32 *size);
s32 ES_GetTMDView(u64 titleID, u8 *data, u32 size);
s32 ES_GetNumSharedContents(u32 *cnt);
s32 ES_GetSharedContents(sha1 *contents, u32 cnt);
s32 ES_LaunchTitle(u64 titleID, const tikview *view);
s32 ES_LaunchTitleBackground(u64 titleID, const tikview *view);
s32 ES_Identify(const signed_blob *certificates, u32 certificates_size, const signed_blob *tmd, u32 tmd_size, const signed_blob *ticket, u32 ticket_size, u32 *keyid);
s32 ES_AddTicket(const signed_blob *tik, u32 tik_size, const signed_blob *certificates, u32 certificates_size, const signed_blob *crl, u32 crl_size);
s32 ES_DeleteTicket(const tikview *view);
s32 ES_AddTitleTMD(const signed_blob *tmd, u32 tmd_size);
s32 ES_AddTitleStart(const signed_blob *tmd, u32 tmd_size, const signed_blob *certificatess, u32 certificatess_size, const signed_blob *crl, u32 crl_size);
s32 ES_AddContentStart(u64 titleID, u32 cid);
s32 ES_AddContentData(s32 cid, u8 *data, u32 data_size);
s32 ES_AddContentFinish(u32 cid);
s32 ES_AddTitleFinish(void);
s32 ES_AddTitleCancel(void);
s32 ES_ImportBoot(const signed_blob *tik, u32 tik_size,const signed_blob *tik_certs, u32 tik_certs_size,const signed_blob *tmd, u32 tmd_size,const signed_blob *tmd_certs, u32 tmd_certs_size,const u8 *content, u32 content_size);
s32 ES_OpenContent(u16 index);
s32 ES_OpenTitleContent(u64 titleID, u16 index);
s32 ES_ReadContent(s32 cfd, u8 *data, u32 data_size);
s32 ES_SeekContent(s32 cfd, s32 where, s32 whence);
s32 ES_CloseContent(s32 cfd);
s32 ES_DeleteTitle(u64 titleID);
s32 ES_DeleteTitleContent(u64 titleID);
s32 ES_Encrypt(u32 keynum, u8 *iv, u8 *source, u32 size, u8 *dest);
s32 ES_Decrypt(u32 keynum, u8 *iv, u8 *source, u32 size, u8 *dest);
s32 ES_Sign(u8 *source, u32 size, u8 *sig, u8 *certs);
s32 ES_GetDeviceCert(u8 *outbuf);
s32 ES_GetDeviceID(u32 *device_id);
s32 ES_GetBoot2Version(u32 *version);
signed_blob *ES_NextCert(const signed_blob *certs);
# 71 "d:/devkitPro/libogc/include/gccore.h" 2
# 1 "d:/devkitPro/libogc/include/ogc/stm.h" 1
# 50 "d:/devkitPro/libogc/include/ogc/stm.h"
typedef void (*stmcallback)(u32 event);

s32 __STM_Init();
s32 __STM_Close();
s32 STM_ShutdownToStandby();
s32 STM_ShutdownToIdle();
s32 STM_SetLedMode(u32 mode);
s32 STM_RebootSystem();
stmcallback STM_RegisterEventHandler(stmcallback newhandler);
# 72 "d:/devkitPro/libogc/include/gccore.h" 2
# 1 "d:/devkitPro/libogc/include/ogc/ios.h" 1
# 48 "d:/devkitPro/libogc/include/ogc/ios.h"
s32 __IOS_InitializeSubsystems(void);
s32 __IOS_ShutdownSubsystems(void);
s32 __IOS_LoadStartupIOS(void);
s32 __IOS_LaunchNewIOS(int version);
s32 IOS_GetPreferredVersion(void);
s32 IOS_ReloadIOS(int version);
s32 IOS_GetVersion();
s32 IOS_GetRevision();
s32 IOS_GetRevisionMajor();
s32 IOS_GetRevisionMinor();
# 73 "d:/devkitPro/libogc/include/gccore.h" 2
# 1 "d:/devkitPro/libogc/include/ogc/usb.h" 1
# 83 "d:/devkitPro/libogc/include/ogc/usb.h"
typedef struct _usbendpointdesc
{
 u8 bLength;
 u8 bDescriptorType;
 u8 bEndpointAddress;
 u8 bmAttributes;
 u16 wMaxPacketSize;
 u8 bInterval;
} __attribute__((packed)) usb_endpointdesc;

typedef struct _usbinterfacedesc
{
 u8 bLength;
 u8 bDescriptorType;
 u8 bInterfaceNumber;
 u8 bAlternateSetting;
 u8 bNumEndpoints;
 u8 bInterfaceClass;
 u8 bInterfaceSubClass;
 u8 bInterfaceProtocol;
 u8 iInterface;
 u8 *extra;
 u8 extra_size;
 struct _usbendpointdesc *endpoints;
} __attribute__((packed)) usb_interfacedesc;

typedef struct _usbconfdesc
{
 u8 bLength;
 u8 bDescriptorType;
 u16 wTotalLength;
 u8 bNumInterfaces;
 u8 bConfigurationValue;
 u8 iConfiguration;
 u8 bmAttributes;
 u8 bMaxPower;
 struct _usbinterfacedesc *interfaces;
} __attribute__((packed)) usb_configurationdesc;

typedef struct _usbdevdesc
{
 u8 bLength;
 u8 bDescriptorType;
 u16 bcdUSB;
 u8 bDeviceClass;
 u8 bDeviceSubClass;
 u8 bDeviceProtocol;
 u8 bMaxPacketSize0;
 u16 idVendor;
 u16 idProduct;
 u16 bcdDevice;
 u8 iManufacturer;
 u8 iProduct;
 u8 iSerialNumber;
 u8 bNumConfigurations;
 struct _usbconfdesc *configurations;
} __attribute__((packed)) usb_devdesc;

typedef struct _usbhiddesc
{
 u8 bLength;
 u8 bDescriptorType;
 u16 bcdHID;
 u8 bCountryCode;
 u8 bNumDescriptors;
 struct {
  u8 bDescriptorType;
  u16 wDescriptorLength;
 } descr[1];
} __attribute__((packed)) usb_hiddesc;

typedef s32 (*usbcallback)(s32 result,void *usrdata);

s32 USB_Initialize();
s32 USB_Deinitialize();

s32 USB_OpenDevice(const char *device,u16 vid,u16 pid,s32 *fd);
s32 USB_CloseDevice(s32 *fd);
s32 USB_CloseDeviceAsync(s32 *fd,usbcallback cb,void *usrdata);

s32 USB_GetDescriptors(s32 fd, usb_devdesc *udd);
void USB_FreeDescriptors(usb_devdesc *udd);

s32 USB_GetHIDDescriptor(s32 fd,usb_hiddesc *uhd);

s32 USB_GetDeviceDescription(s32 fd,usb_devdesc *devdesc);
s32 USB_DeviceRemovalNotifyAsync(s32 fd,usbcallback cb,void *userdata);

void USB_SuspendDevice(s32 fd);
void USB_ResumeDevice(s32 fd);

s32 USB_ReadIntrMsg(s32 fd,u8 bEndpoint,u16 wLength,void *rpData);
s32 USB_ReadIntrMsgAsync(s32 fd,u8 bEndpoint,u16 wLength,void *rpData,usbcallback cb,void *usrdata);

s32 USB_ReadBlkMsg(s32 fd,u8 bEndpoint,u16 wLength,void *rpData);
s32 USB_ReadBlkMsgAsync(s32 fd,u8 bEndpoint,u16 wLength,void *rpData,usbcallback cb,void *usrdata);

s32 USB_ReadCtrlMsg(s32 fd,u8 bmRequestType,u8 bmRequest,u16 wValue,u16 wIndex,u16 wLength,void *rpData);
s32 USB_ReadCtrlMsgAsync(s32 fd,u8 bmRequestType,u8 bmRequest,u16 wValue,u16 wIndex,u16 wLength,void *rpData,usbcallback cb,void *usrdata);

s32 USB_WriteIntrMsg(s32 fd,u8 bEndpoint,u16 wLength,void *rpData);
s32 USB_WriteIntrMsgAsync(s32 fd,u8 bEndpoint,u16 wLength,void *rpData,usbcallback cb,void *usrdata);

s32 USB_WriteBlkMsg(s32 fd,u8 bEndpoint,u16 wLength,void *rpData);
s32 USB_WriteBlkMsgAsync(s32 fd,u8 bEndpoint,u16 wLength,void *rpData,usbcallback cb,void *usrdata);

s32 USB_WriteCtrlMsg(s32 fd,u8 bmRequestType,u8 bmRequest,u16 wValue,u16 wIndex,u16 wLength,void *rpData);
s32 USB_WriteCtrlMsgAsync(s32 fd,u8 bmRequestType,u8 bmRequest,u16 wValue,u16 wIndex,u16 wLength,void *rpData,usbcallback cb,void *usrdata);

s32 USB_GetConfiguration(s32 fd, u8 *configuration);
s32 USB_SetConfiguration(s32 fd, u8 configuration);
s32 USB_SetAlternativeInterface(s32 fd, u8 interface, u8 alternateSetting);
s32 USB_ClearHalt(s32 fd, u8 endpointAddress);
s32 USB_GetDeviceList(const char *devpath,void *descr_buffer,u8 num_descr,u8 b0,u8 *cnt_descr);
# 74 "d:/devkitPro/libogc/include/gccore.h" 2
# 1 "d:/devkitPro/libogc/include/ogc/isfs.h" 1
# 22 "d:/devkitPro/libogc/include/ogc/isfs.h"
typedef struct _fstats
{
 u32 file_length;
 u32 file_pos;
} fstats;

typedef s32 (*isfscallback)(s32 result,void *usrdata);

s32 ISFS_Initialize();
s32 ISFS_Deinitialize();

s32 ISFS_Open(const char *filepath,u8 mode);
s32 ISFS_OpenAsync(const char *filepath,u8 mode,isfscallback cb,void *usrdata);
s32 ISFS_Close(s32 fd);
s32 ISFS_CloseAsync(s32 fd,isfscallback cb,void *usrdata);
s32 ISFS_Delete(const char *filepath);
s32 ISFS_DeleteAsync(const char *filepath,isfscallback cb,void *usrdata);
s32 ISFS_ReadDir(const char *filepath,char *name_list,u32 *num);
s32 ISFS_ReadDirAsync(const char *filepath,char *name_list,u32 *num,isfscallback cb,void *usrdata);
s32 ISFS_CreateFile(const char *filepath,u8 attributes,u8 owner_perm,u8 group_perm,u8 other_perm);
s32 ISFS_CreateFileAsync(const char *filepath,u8 attributes,u8 owner_perm,u8 group_perm,u8 other_perm,isfscallback cb,void *usrdata);
s32 ISFS_Write(s32 fd,const void *buffer,u32 length);
s32 ISFS_WriteAsync(s32 fd,const void *buffer,u32 length,isfscallback cb,void *usrdata);
s32 ISFS_Read(s32 fd,void *buffer,u32 length);
s32 ISFS_ReadAsync(s32 fd,void *buffer,u32 length,isfscallback cb,void *usrdata);
s32 ISFS_Seek(s32 fd,s32 where,s32 whence);
s32 ISFS_SeekAsync(s32 fd,s32 where,s32 whence,isfscallback cb,void *usrdata);
s32 ISFS_CreateDir(const char *filepath,u8 attributes,u8 owner_perm,u8 group_perm,u8 other_perm);
s32 ISFS_CreateDirAsync(const char *filepath,u8 attributes,u8 owner_perm,u8 group_perm,u8 other_perm,isfscallback cb,void *usrdata);
s32 ISFS_GetStats(void *stats);
s32 ISFS_GetStatsAsync(void *stats,isfscallback cb,void *usrdata);
s32 ISFS_GetFileStats(s32 fd,fstats *status);
s32 ISFS_GetFileStatsAsync(s32 fd,fstats *status,isfscallback cb,void *usrdata);
s32 ISFS_GetAttr(const char *filepath,u32 *ownerID,u16 *groupID,u8 *attributes,u8 *ownerperm,u8 *groupperm,u8 *otherperm);
s32 ISFS_GetAttrAsync(const char *filepath,u32 *ownerID,u16 *groupID,u8 *attributes,u8 *ownerperm,u8 *groupperm,u8 *otherperm,isfscallback cb,void *usrdata);
s32 ISFS_Rename(const char *filepathOld,const char *filepathNew);
s32 ISFS_RenameAsync(const char *filepathOld,const char *filepathNew,isfscallback cb,void *usrdata);
s32 ISFS_SetAttr(const char *filepath,u32 ownerID,u16 groupID,u8 attributes,u8 ownerperm,u8 groupperm,u8 otherperm);
s32 ISFS_SetAttrAsync(const char *filepath,u32 ownerID,u16 groupID,u8 attributes,u8 ownerperm,u8 groupperm,u8 otherperm,isfscallback cb,void *usrdata);
s32 ISFS_GetUsage(const char* filepath, u32* usage1, u32* usage2);
s32 ISFS_GetUsageAsync(const char* filepath, u32* usage1, u32* usage2,isfscallback cb,void *usrdata);
# 75 "d:/devkitPro/libogc/include/gccore.h" 2
# 1 "d:/devkitPro/libogc/include/ogc/conf.h" 1
# 50 "d:/devkitPro/libogc/include/ogc/conf.h"
enum {
 CONF_BIGARRAY = 1,
 CONF_SMALLARRAY,
 CONF_BYTE,
 CONF_SHORT,
 CONF_LONG,
 CONF_BOOL = 7
};

enum {
 CONF_VIDEO_NTSC = 0,
 CONF_VIDEO_PAL,
 CONF_VIDEO_MPAL
};

enum {
 CONF_REGION_JP = 0,
 CONF_REGION_US = 1,
 CONF_REGION_EU = 2,
 CONF_REGION_KR = 4,
 CONF_REGION_CN = 5
};

enum {
 CONF_AREA_JPN = 0,
 CONF_AREA_USA,
 CONF_AREA_EUR,
 CONF_AREA_AUS,
 CONF_AREA_BRA,
 CONF_AREA_TWN,
 CONF_AREA_ROC,
 CONF_AREA_KOR,
 CONF_AREA_HKG,
 CONF_AREA_ASI,
 CONF_AREA_LTN,
 CONF_AREA_SAF,
 CONF_AREA_CHN
};

enum {
 CONF_SHUTDOWN_STANDBY = 0,
 CONF_SHUTDOWN_IDLE
};

enum {
 CONF_LED_OFF = 0,
 CONF_LED_DIM,
 CONF_LED_BRIGHT
};

enum {
 CONF_SOUND_MONO = 0,
 CONF_SOUND_STEREO,
 CONF_SOUND_SURROUND
};

enum {
 CONF_LANG_JAPANESE = 0,
 CONF_LANG_ENGLISH,
 CONF_LANG_GERMAN,
 CONF_LANG_FRENCH,
 CONF_LANG_SPANISH,
 CONF_LANG_ITALIAN,
 CONF_LANG_DUTCH,
 CONF_LANG_SIMP_CHINESE,
 CONF_LANG_TRAD_CHINESE,
 CONF_LANG_KOREAN
};

enum {
 CONF_ASPECT_4_3 = 0,
 CONF_ASPECT_16_9
};

enum {
 CONF_SENSORBAR_BOTTOM = 0,
 CONF_SENSORBAR_TOP
};




typedef struct _conf_pad_device conf_pad_device;

struct _conf_pad_device {
 u8 bdaddr[6];
 char name[0x40];
} __attribute__((packed));

typedef struct _conf_pads conf_pads;

struct _conf_pads {
 u8 num_registered;
 conf_pad_device registered[10];
 conf_pad_device active[4];
 conf_pad_device balance_board;
 conf_pad_device unknown;
} __attribute__((packed));

s32 CONF_Init(void);
s32 CONF_GetLength(const char *name);
s32 CONF_GetType(const char *name);
s32 CONF_Get(const char *name, void *buffer, u32 length);
s32 CONF_GetShutdownMode(void);
s32 CONF_GetIdleLedMode(void);
s32 CONF_GetProgressiveScan(void);
s32 CONF_GetEuRGB60(void);
s32 CONF_GetIRSensitivity(void);
s32 CONF_GetSensorBarPosition(void);
s32 CONF_GetPadSpeakerVolume(void);
s32 CONF_GetPadMotorMode(void);
s32 CONF_GetSoundMode(void);
s32 CONF_GetLanguage(void);
s32 CONF_GetCounterBias(u32 *bias);
s32 CONF_GetScreenSaverMode(void);
s32 CONF_GetDisplayOffsetH(s8 *offset);
s32 CONF_GetPadDevices(conf_pads *pads);
s32 CONF_GetNickName(u8 *nickname);
s32 CONF_GetAspectRatio(void);
s32 CONF_GetEULA(void);
s32 CONF_GetParentalPassword(s8 *password);
s32 CONF_GetParentalAnswer(s8 *answer);
s32 CONF_GetWiiConnect24(void);
s32 CONF_GetRegion(void);
s32 CONF_GetArea(void);
s32 CONF_GetVideo(void);
# 76 "d:/devkitPro/libogc/include/gccore.h" 2
# 1 "d:/devkitPro/libogc/include/ogc/usbstorage.h" 1






# 1 "d:/devkitPro/libogc/include/ogc/mutex.h" 1
# 8 "d:/devkitPro/libogc/include/ogc/usbstorage.h" 2
# 1 "d:/devkitPro/libogc/include/ogc/disc_io.h" 1
# 33 "d:/devkitPro/libogc/include/ogc/disc_io.h"
# 1 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/stdint.h" 1 3
# 41 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/stdint.h" 3
typedef signed char int8_t ;
typedef unsigned char uint8_t ;




typedef signed char int_least8_t;
typedef unsigned char uint_least8_t;




typedef signed short int16_t;
typedef unsigned short uint16_t;
# 67 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/stdint.h" 3
typedef int16_t int_least16_t;
typedef uint16_t uint_least16_t;
# 79 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/stdint.h" 3
typedef signed int int32_t;
typedef unsigned int uint32_t;
# 97 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/stdint.h" 3
typedef int32_t int_least32_t;
typedef uint32_t uint_least32_t;
# 119 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/stdint.h" 3
typedef signed long long int64_t;
typedef unsigned long long uint64_t;
# 129 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/stdint.h" 3
typedef int64_t int_least64_t;
typedef uint64_t uint_least64_t;
# 159 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/stdint.h" 3
  typedef signed int int_fast8_t;
  typedef unsigned int uint_fast8_t;




  typedef signed int int_fast16_t;
  typedef unsigned int uint_fast16_t;




  typedef signed int int_fast32_t;
  typedef unsigned int uint_fast32_t;
# 213 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/stdint.h" 3
  typedef int_least64_t int_fast64_t;
  typedef uint_least64_t uint_fast64_t;







  typedef long long int intmax_t;
# 231 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/stdint.h" 3
  typedef long long unsigned int uintmax_t;
# 243 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/stdint.h" 3
typedef signed int intptr_t;
typedef unsigned int uintptr_t;
# 34 "d:/devkitPro/libogc/include/ogc/disc_io.h" 2
# 45 "d:/devkitPro/libogc/include/ogc/disc_io.h"
typedef uint32_t sec_t;

typedef _Bool (* FN_MEDIUM_STARTUP)(void) ;
typedef _Bool (* FN_MEDIUM_ISINSERTED)(void) ;
typedef _Bool (* FN_MEDIUM_READSECTORS)(sec_t sector, sec_t numSectors, void* buffer) ;
typedef _Bool (* FN_MEDIUM_WRITESECTORS)(sec_t sector, sec_t numSectors, const void* buffer) ;
typedef _Bool (* FN_MEDIUM_CLEARSTATUS)(void) ;
typedef _Bool (* FN_MEDIUM_SHUTDOWN)(void) ;

struct DISC_INTERFACE_STRUCT {
 unsigned long ioType ;
 unsigned long features ;
 FN_MEDIUM_STARTUP startup ;
 FN_MEDIUM_ISINSERTED isInserted ;
 FN_MEDIUM_READSECTORS readSectors ;
 FN_MEDIUM_WRITESECTORS writeSectors ;
 FN_MEDIUM_CLEARSTATUS clearStatus ;
 FN_MEDIUM_SHUTDOWN shutdown ;
} ;

typedef struct DISC_INTERFACE_STRUCT DISC_INTERFACE ;
# 9 "d:/devkitPro/libogc/include/ogc/usbstorage.h" 2
# 27 "d:/devkitPro/libogc/include/ogc/usbstorage.h"
typedef struct
{
 u8 configuration;
 u32 interface;
 u32 altInterface;

 u8 ep_in;
 u8 ep_out;

 u8 max_lun;
 u32 *sector_size;

 s32 usb_fd;

 mutex_t lock;
 syswd_t alarm;
 s32 retval;

 u32 tag;
 u8 suspended;

 u8 *buffer;
} usbstorage_handle;

s32 USBStorage_Initialize();

s32 USBStorage_Open(usbstorage_handle *dev, const char *bus, u16 vid, u16 pid);
s32 USBStorage_Close(usbstorage_handle *dev);
s32 USBStorage_Reset(usbstorage_handle *dev);

s32 USBStorage_GetMaxLUN(usbstorage_handle *dev);
s32 USBStorage_MountLUN(usbstorage_handle *dev, u8 lun);
s32 USBStorage_Suspend(usbstorage_handle *dev);

s32 USBStorage_ReadCapacity(usbstorage_handle *dev, u8 lun, u32 *sector_size, u32 *n_sectors);
s32 USBStorage_Read(usbstorage_handle *dev, u8 lun, u32 sector, u16 n_sectors, u8 *buffer);
s32 USBStorage_Write(usbstorage_handle *dev, u8 lun, u32 sector, u16 n_sectors, const u8 *buffer);



extern const DISC_INTERFACE __io_usbstorage;
# 77 "d:/devkitPro/libogc/include/gccore.h" 2

# 1 "d:/devkitPro/libogc/include/ogc/wiilaunch.h" 1
# 65 "d:/devkitPro/libogc/include/ogc/wiilaunch.h"
s32 WII_Initialize(void);
s32 WII_ReturnToMenu(void);
s32 WII_ReturnToSettings(void);
s32 WII_ReturnToSettingsPage(const char *page);
s32 WII_LaunchTitle(u64 titleID);
s32 WII_LaunchTitleWithArgs(u64 titleID, int launchcode, ...);
s32 WII_OpenURL(const char *url);
# 79 "d:/devkitPro/libogc/include/gccore.h" 2
# 138 "d:/devkitPro/libogc/include/gccore.h"
s32 depackrnc1_ulen(void *packed);
s32 depackrnc1(void *packed,void *unpacked);

void depackrnc2(void *packed,void *unpacked);
# 37 "d:/devkitPro/libogc/include/grrlib.h" 2
# 76 "d:/devkitPro/libogc/include/grrlib.h"
typedef unsigned int uint;
# 100 "d:/devkitPro/libogc/include/grrlib.h"
typedef enum Composition_Modes {
    GRRLIB_COMPOSE_NORMAL,
} GRRLIB_ComposeMode;





typedef enum GRRLIB_blendMode {
    GRRLIB_BLEND_ALPHA = 0,
    GRRLIB_BLEND_ADD = 1,
    GRRLIB_BLEND_SCREEN = 2,
    GRRLIB_BLEND_MULTI = 3,
    GRRLIB_BLEND_INV = 4,
} GRRLIB_blendMode;
# 124 "d:/devkitPro/libogc/include/grrlib.h"
typedef struct GRRLIB_drawSettings {
    _Bool antialias;
    GRRLIB_blendMode blend;
} GRRLIB_drawSettings;





typedef struct GRRLIB_texImg {
    uint w;
    uint h;
    int handlex;
    int handley;
    int offsetx;
    int offsety;

    _Bool tiledtex;
    uint tilew;
    uint tileh;
    uint nbtilew;
    uint nbtileh;
    uint tilestart;

    void *data;
} GRRLIB_texImg;





typedef struct GRRLIB_bytemapChar {
    u8 character;
    u8 width;
    u8 height;
    s8 relx;
    s8 rely;
    u8 kerning;
    u8 *data;
} GRRLIB_bytemapChar;





typedef
    struct GRRLIB_bytemapFont {
        char *name;
        u32 *palette;
        u16 nbChar;
        u8 version;
        s8 tracking;

        GRRLIB_bytemapChar *charDef;
    }
GRRLIB_bytemapFont;
# 194 "d:/devkitPro/libogc/include/grrlib.h"
extern GXRModeObj *rmode;
extern void *xfb[2] ;
extern u32 fb ;





# 1 "d:/devkitPro/libogc/include/grrlib/GRRLIB__lib.h" 1
# 41 "d:/devkitPro/libogc/include/grrlib/GRRLIB__lib.h"
GRRLIB_bytemapFont* GRRLIB_LoadBMF (const u8 my_bmf[] ) ;
void GRRLIB_FreeBMF (const GRRLIB_bytemapFont *bmf) ;

void GRRLIB_InitTileSet (GRRLIB_texImg *tex,
                           const uint tilew, const uint tileh,
                           const uint tilestart) ;



void GRRLIB_BMFX_FlipH (const GRRLIB_texImg *texsrc,
                             GRRLIB_texImg *texdest) ;

void GRRLIB_BMFX_FlipV (const GRRLIB_texImg *texsrc,
                             GRRLIB_texImg *texdest) ;

void GRRLIB_BMFX_Grayscale (const GRRLIB_texImg *texsrc,
                             GRRLIB_texImg *texdest) ;

void GRRLIB_BMFX_Sepia (const GRRLIB_texImg *texsrc,
                             GRRLIB_texImg *texdest) ;

void GRRLIB_BMFX_Invert (const GRRLIB_texImg *texsrc,
                             GRRLIB_texImg *texdest) ;

void GRRLIB_BMFX_Blur (const GRRLIB_texImg *texsrc,
                             GRRLIB_texImg *texdest, const u32 factor) ;

void GRRLIB_BMFX_Scatter (const GRRLIB_texImg *texsrc,
                             GRRLIB_texImg *texdest, const u32 factor) ;

void GRRLIB_BMFX_Pixelate (const GRRLIB_texImg *texsrc,
                             GRRLIB_texImg *texdest, const u32 factor) ;



int GRRLIB_Init (void) ;
void GRRLIB_Exit (void) ;



void GRRLIB_Circle (const f32 x, const f32 y, const f32 radius,
                     const u32 color, const u8 filled) ;



int GRRLIB_LoadFile (const char* filename,
                                            unsigned char* *data) ;
GRRLIB_texImg* GRRLIB_LoadTextureFromFile (const char* filename) ;
_Bool GRRLIB_ScrShot (const char* filename) ;



void GRRLIB_Printf (const f32 xpos, const f32 ypos,
                       const GRRLIB_texImg *tex, const u32 color,
                       const f32 zoom, const char *text, ...) ;

void GRRLIB_PrintBMF (const f32 xpos, const f32 ypos,
                       const GRRLIB_bytemapFont *bmf,
                       const f32 zoom, const char *text, ...) ;



void GRRLIB_DrawImg (const f32 xpos, const f32 ypos, const GRRLIB_texImg *tex,
                       const f32 degrees, const f32 scaleX, const f32 scaleY,
                       const u32 color) ;

void GRRLIB_DrawImgQuad (const guVector pos[4], GRRLIB_texImg *tex,
                           const u32 color) ;

void GRRLIB_DrawTile (const f32 xpos, const f32 ypos, const GRRLIB_texImg *tex,
                       const f32 degrees, const f32 scaleX, const f32 scaleY,
                       const u32 color, const int frame) ;

void GRRLIB_DrawTileQuad (const guVector pos[4], GRRLIB_texImg *tex,
                           const u32 color, const int frame) ;

void GRRLIB_Render (void) ;



void GRRLIB_Screen2Texture (GRRLIB_texImg *tex) ;




GRRLIB_texImg* GRRLIB_LoadTexture (const u8 *my_img) ;
GRRLIB_texImg* GRRLIB_LoadTexturePNG (const u8 *my_png) ;
GRRLIB_texImg* GRRLIB_LoadTextureJPG (const u8 *my_jpg) ;
void GRRLIB_Compose (int xoff, int yoff, GRRLIB_texImg* layer,
                                       GRRLIB_texImg* canvas,
                                       GRRLIB_ComposeMode mode) ;
# 203 "d:/devkitPro/libogc/include/grrlib.h" 2
# 213 "d:/devkitPro/libogc/include/grrlib.h"
# 1 "d:/devkitPro/libogc/include/grrlib/GRRLIB__inline.h" 1
# 41 "d:/devkitPro/libogc/include/grrlib/GRRLIB__inline.h"
extern inline u8 GRRLIB_ClampVar8 (f32 Value) ;



extern inline void GRRLIB_ClipReset (void) ;
extern inline void GRRLIB_ClipDrawing (const int x, const int y,
                                  const int width, const int height) ;



extern inline _Bool GRRLIB_PtInRect (const int hotx, const int hoty,
                                 const int hotw, const int hoth,
                                 const int wpadx, const int wpady) ;

extern inline _Bool GRRLIB_RectInRect (const int rect1x, const int rect1y,
                                 const int rect1w, const int rect1h,
                                 const int rect2x, const int rect2y,
                                 const int rect2w, const int rect2h) ;

extern inline _Bool GRRLIB_RectOnRect (const int rect1x, const int rect1y,
                                 const int rect1w, const int rect1h,
                                 const int rect2x, const int rect2y,
                                 const int rect2w, const int rect2h) ;



extern inline void GRRLIB_NPlot (const guVector v[], const u32 color[],
                                  const long n) ;
extern inline void GRRLIB_NGone (const guVector v[], const u32 color[],
                                  const long n) ;
extern inline void GRRLIB_NGoneFilled (const guVector v[], const u32 color[],
                                  const long n) ;



extern inline void GRRLIB_GXEngine (const guVector v[], const u32 color[],
                               const long n, const u8 fmt) ;



extern inline void GRRLIB_FillScreen (const u32 color) ;
extern inline void GRRLIB_Plot (const f32 x, const f32 y, const u32 color) ;
extern inline void GRRLIB_Line (const f32 x1, const f32 y1,
                                 const f32 x2, const f32 y2, const u32 color) ;
extern inline void GRRLIB_Rectangle (const f32 x, const f32 y,
                                 const f32 width, const f32 height,
                                 const u32 color, const u8 filled) ;



extern inline void GRRLIB_SetHandle (GRRLIB_texImg *tex, const int x, const int y) ;
extern inline void GRRLIB_SetMidHandle (GRRLIB_texImg *tex, const _Bool enabled) ;



extern inline u32 GRRLIB_GetPixelFromtexImg (const int x, const int y,
                                         const GRRLIB_texImg *tex) ;

extern inline void GRRLIB_SetPixelTotexImg (const int x, const int y,
                                         GRRLIB_texImg *tex, const u32 color) ;

extern inline u32 GRRLIB_GetColor (const u8 r, const u8 g, const u8 b, const u8 a) ;

extern inline void GRRLIB_GetPixelFromFB (int x, int y,
                                     u8 *R1, u8 *G1, u8 *B1,
                                     u8 *R2, u8 *G2, u8 *B2) ;



extern inline void GRRLIB_SetBlend (const GRRLIB_blendMode blendmode) ;
extern inline GRRLIB_blendMode GRRLIB_GetBlend (void) ;
extern inline void GRRLIB_SetAntiAliasing (const _Bool aa) ;
extern inline _Bool GRRLIB_GetAntiAliasing (void) ;



extern inline GRRLIB_texImg* GRRLIB_CreateEmptyTexture (const uint w, const uint h) ;
extern inline void GRRLIB_ClearTex (GRRLIB_texImg* tex) ;
extern inline void GRRLIB_FlushTex (GRRLIB_texImg *tex) ;
extern inline void GRRLIB_FreeTexture (GRRLIB_texImg *tex) ;




# 1 "d:/devkitPro/libogc/include/grrlib/GRRLIB_cExtn.h" 1
# 28 "d:/devkitPro/libogc/include/grrlib/GRRLIB_cExtn.h"
# 1 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/math.h" 1 3
# 9 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/math.h" 3


union __dmath
{
  __ULong i[2];
  double d;
};

union __fmath
{
  __ULong i[1];
  float f;
};

union __ldmath
{
  __ULong i[4];
  long double ld;
};
# 85 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/math.h" 3
extern double atan (double);
extern double cos (double);
extern double sin (double);
extern double tan (double);
extern double tanh (double);
extern double frexp (double, int *);
extern double modf (double, double *);
extern double ceil (double);
extern double fabs (double);
extern double floor (double);






extern double acos (double);
extern double asin (double);
extern double atan2 (double, double);
extern double cosh (double);
extern double sinh (double);
extern double exp (double);
extern double ldexp (double, int);
extern double log (double);
extern double log10 (double);
extern double pow (double, double);
extern double sqrt (double);
extern double fmod (double, double);
# 122 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/math.h" 3
typedef float float_t;
typedef double double_t;
# 149 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/math.h" 3
extern int __isinff (float x);
extern int __isinfd (double x);
extern int __isnanf (float x);
extern int __isnand (double x);
extern int __fpclassifyf (float x);
extern int __fpclassifyd (double x);
extern int __signbitf (float x);
extern int __signbitd (double x);
# 212 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/math.h" 3
extern double infinity (void);
extern double nan (const char *);
extern int finite (double);
extern double copysign (double, double);
extern int ilogb (double);

extern double asinh (double);
extern double cbrt (double);
extern double nextafter (double, double);
extern double rint (double);
extern double scalbn (double, int);

extern double exp2 (double);
extern double scalbln (double, long int);
extern double tgamma (double);
extern double nearbyint (double);
extern long int lrint (double);
extern long long int llrint (double);
extern double round (double);
extern long int lround (double);
extern double trunc (double);
extern double remquo (double, double, int *);
extern double copysign (double, double);
extern double fdim (double, double);
extern double fmax (double, double);
extern double fmin (double, double);
extern double fma (double, double, double);


extern double log1p (double);
extern double expm1 (double);



extern double acosh (double);
extern double atanh (double);
extern double remainder (double, double);
extern double gamma (double);
extern double lgamma (double);
extern double erf (double);
extern double erfc (double);



extern double hypot (double, double);






extern float atanf (float);
extern float cosf (float);
extern float sinf (float);
extern float tanf (float);
extern float tanhf (float);
extern float frexpf (float, int *);
extern float modff (float, float *);
extern float ceilf (float);
extern float fabsf (float);
extern float floorf (float);


extern float acosf (float);
extern float asinf (float);
extern float atan2f (float, float);
extern float coshf (float);
extern float sinhf (float);
extern float expf (float);
extern float ldexpf (float, int);
extern float logf (float);
extern float log10f (float);
extern float powf (float, float);
extern float sqrtf (float);
extern float fmodf (float, float);




extern float exp2f (float);
extern float scalblnf (float, long int);
extern float tgammaf (float);
extern float nearbyintf (float);
extern long int lrintf (float);
extern long long llrintf (float);
extern float roundf (float);
extern long int lroundf (float);
extern float truncf (float);
extern float remquof (float, float, int *);
extern float copysignf (float, float);
extern float fdimf (float, float);
extern float fmaxf (float, float);
extern float fminf (float, float);
extern float fmaf (float, float, float);

extern float infinityf (void);
extern float nanf (const char *);
extern int isnanf (float);
extern int isinff (float);
extern int finitef (float);
extern float copysignf (float, float);
extern int ilogbf (float);

extern float asinhf (float);
extern float cbrtf (float);
extern float nextafterf (float, float);
extern float rintf (float);
extern float scalbnf (float, int);
extern float log1pf (float);
extern float expm1f (float);


extern float acoshf (float);
extern float atanhf (float);
extern float remainderf (float, float);
extern float gammaf (float);
extern float lgammaf (float);
extern float erff (float);
extern float erfcf (float);

extern float hypotf (float, float);



extern long double rintl (long double);
extern long int lrintl (long double);
extern long long llrintl (long double);





extern double cabs();
extern double drem (double, double);
extern void sincos (double, double *, double *);
extern double gamma_r (double, int *);
extern double lgamma_r (double, int *);

extern double y0 (double);
extern double y1 (double);
extern double yn (int, double);
extern double j0 (double);
extern double j1 (double);
extern double jn (int, double);

extern float cabsf();
extern float dremf (float, float);
extern void sincosf (float, float *, float *);
extern float gammaf_r (float, int *);
extern float lgammaf_r (float, int *);

extern float y0f (float);
extern float y1f (float);
extern float ynf (int, float);
extern float j0f (float);
extern float j1f (float);
extern float jnf (int, float);



extern double exp10 (double);


extern double pow10 (double);


extern float exp10f (float);


extern float pow10f (float);
# 391 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/math.h" 3
extern int *__signgam (void);
# 402 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/math.h" 3
struct exception

{
  int type;
  char *name;
  double arg1;
  double arg2;
  double retval;
  int err;
};




extern int matherr (struct exception *e);
# 457 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/math.h" 3
enum __fdlibm_version
{
  __fdlibm_ieee = -1,
  __fdlibm_svid,
  __fdlibm_xopen,
  __fdlibm_posix
};




extern enum __fdlibm_version __fdlib_version;
# 477 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/math.h" 3

# 29 "d:/devkitPro/libogc/include/grrlib/GRRLIB_cExtn.h" 2







extern inline
u8 GRRLIB_ClampVar8 (f32 Value) {


    Value = roundf(Value);
    if (Value < 0) Value = 0 ;
    else if (Value > 255) Value = 255 ;

    return (u8)Value;
}
# 126 "d:/devkitPro/libogc/include/grrlib/GRRLIB__inline.h" 2
# 1 "d:/devkitPro/libogc/include/grrlib/GRRLIB_clipping.h" 1
# 31 "d:/devkitPro/libogc/include/grrlib/GRRLIB_clipping.h"
extern inline
void GRRLIB_ClipReset (void) {
    GX_SetClipMode( 0 );
    GX_SetScissor( 0, 0, rmode->fbWidth, rmode->efbHeight );
}
# 44 "d:/devkitPro/libogc/include/grrlib/GRRLIB_clipping.h"
extern inline
void GRRLIB_ClipDrawing (const int x, const int y,
                          const int width, const int height) {
    GX_SetClipMode( 0 );
    GX_SetScissor( x, y, width, height );
}
# 127 "d:/devkitPro/libogc/include/grrlib/GRRLIB__inline.h" 2
# 1 "d:/devkitPro/libogc/include/grrlib/GRRLIB_collision.h" 1
# 38 "d:/devkitPro/libogc/include/grrlib/GRRLIB_collision.h"
extern inline
_Bool GRRLIB_PtInRect (const int hotx, const int hoty,
                       const int hotw, const int hoth,
                       const int wpadx, const int wpady) {
    return( ((wpadx>=hotx) && (wpadx<=(hotx+hotw))) &&
            ((wpady>=hoty) && (wpady<=(hoty+hoth))) );
}
# 58 "d:/devkitPro/libogc/include/grrlib/GRRLIB_collision.h"
extern inline
_Bool GRRLIB_RectInRect (const int rect1x, const int rect1y,
                         const int rect1w, const int rect1h,
                         const int rect2x, const int rect2y,
                         const int rect2w, const int rect2h) {
    return ( (rect1x >= rect2x) && (rect1y >= rect2y) &&
             (rect1x+rect1w <= rect2x+rect2w) &&
             (rect1y+rect1h <= rect2y+rect2h) );
}
# 80 "d:/devkitPro/libogc/include/grrlib/GRRLIB_collision.h"
extern inline
_Bool GRRLIB_RectOnRect (const int rect1x, const int rect1y,
                         const int rect1w, const int rect1h,
                         const int rect2x, const int rect2y,
                         const int rect2w, const int rect2h) {
    return GRRLIB_PtInRect(rect1x, rect1y, rect1w, rect1h, rect2x, rect2y) ||
           GRRLIB_PtInRect(rect1x, rect1y, rect1w, rect1h, rect2x+rect2w, rect2y) ||
           GRRLIB_PtInRect(rect1x, rect1y, rect1w, rect1h, rect2x+rect2w, rect2y+rect2h) ||
           GRRLIB_PtInRect(rect1x, rect1y, rect1w, rect1h, rect2x, rect2y+rect2h) ;
}
# 128 "d:/devkitPro/libogc/include/grrlib/GRRLIB__inline.h" 2
# 1 "d:/devkitPro/libogc/include/grrlib/GRRLIB_fbComplex.h" 1
# 34 "d:/devkitPro/libogc/include/grrlib/GRRLIB_fbComplex.h"
extern inline
void GRRLIB_NPlot (const guVector v[], const u32 color[], const long n) {
    GRRLIB_GXEngine(v, color, n, 0xB8);
}







extern inline
void GRRLIB_NGone (const guVector v[], const u32 color[], const long n) {
    GRRLIB_GXEngine(v, color, n, 0xB0);
}







extern inline
void GRRLIB_NGoneFilled (const guVector v[], const u32 color[], const long n) {
    GRRLIB_GXEngine(v, color, n, 0xA0);
}
# 129 "d:/devkitPro/libogc/include/grrlib/GRRLIB__inline.h" 2
# 1 "d:/devkitPro/libogc/include/grrlib/GRRLIB_fbGX.h" 1
# 31 "d:/devkitPro/libogc/include/grrlib/GRRLIB_fbGX.h"
extern inline
void GRRLIB_GXEngine (const guVector v[], const u32 color[], const long n,
                       const u8 fmt) {
    int i;

    GX_Begin(fmt, 0, n);
    for (i = 0; i < n; i++) {
        GX_Position3f32(v[i].x, v[i].y, v[i].z);
        GX_Color1u32(color[i]);
    }
    GX_End();
}
# 130 "d:/devkitPro/libogc/include/grrlib/GRRLIB__inline.h" 2
# 1 "d:/devkitPro/libogc/include/grrlib/GRRLIB_fbSimple.h" 1
# 34 "d:/devkitPro/libogc/include/grrlib/GRRLIB_fbSimple.h"
extern inline
void GRRLIB_FillScreen (const u32 color) {
    GRRLIB_Rectangle(-40, -40,
                     rmode->fbWidth +80, rmode->xfbHeight +80,
                     color, 1);
}
# 48 "d:/devkitPro/libogc/include/grrlib/GRRLIB_fbSimple.h"
extern inline
void GRRLIB_Plot (const f32 x, const f32 y, const u32 color) {
    GX_Begin(0xB8, 0, 1);
        GX_Position3f32(x, y, 0);
        GX_Color1u32(color);
    GX_End();
}
# 65 "d:/devkitPro/libogc/include/grrlib/GRRLIB_fbSimple.h"
extern inline
void GRRLIB_Line (const f32 x1, const f32 y1,
                   const f32 x2, const f32 y2, const u32 color) {
    GX_Begin(0xA8, 0, 2);
        GX_Position3f32(x1, y1, 0);
        GX_Color1u32(color);
        GX_Position3f32(x2, y2, 0);
        GX_Color1u32(color);
    GX_End();
}
# 85 "d:/devkitPro/libogc/include/grrlib/GRRLIB_fbSimple.h"
extern inline
void GRRLIB_Rectangle (const f32 x, const f32 y,
                        const f32 width, const f32 height,
                        const u32 color, const u8 filled) {
    f32 x2 = x+width;
    f32 y2 = y+height;
    guVector v[] = { {x,y,0.0f}, {x2,y,0.0f}, {x2,y2,0.0f}, {x,y2,0.0f},
                     {x,y,0.0f} };
    u32 ncolor[] = {color,color,color,color,color};

    if (!filled) GRRLIB_NGone (v, ncolor, 5) ;
    else GRRLIB_NGoneFilled(v, ncolor, 4) ;
}
# 131 "d:/devkitPro/libogc/include/grrlib/GRRLIB__inline.h" 2
# 1 "d:/devkitPro/libogc/include/grrlib/GRRLIB_handle.h" 1
# 34 "d:/devkitPro/libogc/include/grrlib/GRRLIB_handle.h"
extern inline
void GRRLIB_SetHandle (GRRLIB_texImg *tex, const int x, const int y) {
    if (tex->tiledtex) {
        tex->handlex = -(((int)tex->tilew)/2) + x;
        tex->handley = -(((int)tex->tileh)/2) + y;
    } else {
        tex->handlex = -(((int)tex->w)/2) + x;
        tex->handley = -(((int)tex->h)/2) + y;
    }
}






extern inline
void GRRLIB_SetMidHandle (GRRLIB_texImg *tex, const _Bool enabled) {
    if (enabled) {
        if (tex->tiledtex) {
            tex->offsetx = (((int)tex->tilew)/2);
            tex->offsety = (((int)tex->tileh)/2);
        } else {
            tex->offsetx = (((int)tex->w)/2);
            tex->offsety = (((int)tex->h)/2);
        }
        GRRLIB_SetHandle(tex, tex->offsetx, tex->offsety);
    } else {
        GRRLIB_SetHandle(tex, 0, 0);
        tex->offsetx = 0;
        tex->offsety = 0;
    }
}
# 132 "d:/devkitPro/libogc/include/grrlib/GRRLIB__inline.h" 2
# 1 "d:/devkitPro/libogc/include/grrlib/GRRLIB_pixel.h" 1
# 35 "d:/devkitPro/libogc/include/grrlib/GRRLIB_pixel.h"
extern inline
u32 GRRLIB_GetPixelFromtexImg (const int x, const int y,
                                const GRRLIB_texImg *tex) {
    register u32 offs;
    register u32 ar;
    register u8* bp = (u8*)tex->data;

    offs = (((y&(~3))<<2)*tex->w) + ((x&(~3))<<4) + ((((y&3)<<2) + (x&3)) <<1);

    ar = (u32)(*((u16*)(bp+offs )));
    return (ar<<24) | ( ((u32)(*((u16*)(bp+offs+32)))) <<8) | (ar>>8);
}
# 56 "d:/devkitPro/libogc/include/grrlib/GRRLIB_pixel.h"
extern inline
void GRRLIB_SetPixelTotexImg (const int x, const int y,
                               GRRLIB_texImg *tex, const u32 color) {
    register u32 offs;
    register u8* bp = (u8*)tex->data;

    offs = (((y&(~3))<<2)*tex->w) + ((x&(~3))<<4) + ((((y&3)<<2) + (x&3)) <<1);

    *((u16*)(bp+offs )) = (u16)((color <<8) | (color >>24));
    *((u16*)(bp+offs+32)) = (u16) (color >>8);
}
# 76 "d:/devkitPro/libogc/include/grrlib/GRRLIB_pixel.h"
extern inline
u32 GRRLIB_GetColor (const u8 r, const u8 g, const u8 b, const u8 a) {
    return (r << 24) | (g << 16) | (b << 8) | a;
}
# 93 "d:/devkitPro/libogc/include/grrlib/GRRLIB_pixel.h"
extern inline
void GRRLIB_GetPixelFromFB (int x, int y,
                             u8 *R1, u8 *G1, u8 *B1,
                             u8 *R2, u8 *G2, u8 *B2) {
    u32 Buffer;
    u8 *Colors;


    if (x > (rmode->fbWidth/2)) { x = (rmode->fbWidth/2); }
    if (x < 0) { x = 0; }
    if (y > rmode->efbHeight) { y = rmode->efbHeight; }
    if (y < 0) { y = 0; }


    Buffer = ((u32 *)xfb[fb])[y*(rmode->fbWidth/2)+x];
    Colors = (u8 *) &Buffer;







    *R1 = GRRLIB_ClampVar8( 1.164 * (Colors[0] - 16) + 1.596 * (Colors[3] - 128) );
    *G1 = GRRLIB_ClampVar8( 1.164 * (Colors[0] - 16) - 0.813 * (Colors[3] - 128) - 0.392 * (Colors[1] - 128) );
    *B1 = GRRLIB_ClampVar8( 1.164 * (Colors[0] - 16) + 2.017 * (Colors[1] - 128) );

    *R2 = GRRLIB_ClampVar8( 1.164 * (Colors[2] - 16) + 1.596 * (Colors[3] - 128) );
    *G2 = GRRLIB_ClampVar8( 1.164 * (Colors[2] - 16) - 0.813 * (Colors[3] - 128) - 0.392 * (Colors[1] - 128) );
    *B2 = GRRLIB_ClampVar8( 1.164 * (Colors[2] - 16) + 2.017 * (Colors[1] - 128) );
}
# 133 "d:/devkitPro/libogc/include/grrlib/GRRLIB__inline.h" 2
# 1 "d:/devkitPro/libogc/include/grrlib/GRRLIB_settings.h" 1
# 28 "d:/devkitPro/libogc/include/grrlib/GRRLIB_settings.h"
# 1 "d:/devkitPro/libogc/include/grrlib.h" 1
# 29 "d:/devkitPro/libogc/include/grrlib/GRRLIB_settings.h" 2

extern GRRLIB_drawSettings GRRLIB_Settings;





extern inline
void GRRLIB_SetBlend (const GRRLIB_blendMode blendmode) {
    GRRLIB_Settings.blend = blendmode;
    switch (GRRLIB_Settings.blend) {
        case GRRLIB_BLEND_ALPHA:
            GX_SetBlendMode(1, 4, 5, 0);
            break;
        case GRRLIB_BLEND_ADD:
            GX_SetBlendMode(1, 4, 6, 0);
            break;
        case GRRLIB_BLEND_SCREEN:
            GX_SetBlendMode(1, 2, 6, 0);
            break;
        case GRRLIB_BLEND_MULTI:
            GX_SetBlendMode(3, 4, 5, 0);
            break;
        case GRRLIB_BLEND_INV:
            GX_SetBlendMode(1, 3, 3, 0);
            break;
    }
}





extern inline
GRRLIB_blendMode GRRLIB_GetBlend (void) {
    return GRRLIB_Settings.blend;
}





extern inline
void GRRLIB_SetAntiAliasing (const _Bool aa) {
    GRRLIB_Settings.antialias = aa;
}





extern inline
_Bool GRRLIB_GetAntiAliasing (void) {
    return GRRLIB_Settings.antialias;
}
# 134 "d:/devkitPro/libogc/include/grrlib/GRRLIB__inline.h" 2
# 1 "d:/devkitPro/libogc/include/grrlib/GRRLIB_texSetup.h" 1
# 28 "d:/devkitPro/libogc/include/grrlib/GRRLIB_texSetup.h"
# 1 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/malloc.h" 1 3
# 10 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/malloc.h" 3
# 1 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/include/stddef.h" 1 3 4
# 11 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/malloc.h" 2 3


# 1 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/machine/malloc.h" 1 3
# 14 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/malloc.h" 2 3
# 22 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/malloc.h" 3
struct mallinfo {
  int arena;
  int ordblks;
  int smblks;
  int hblks;
  int hblkhd;
  int usmblks;
  int fsmblks;
  int uordblks;
  int fordblks;
  int keepcost;
};



extern void * malloc (size_t);




extern void * _malloc_r (struct _reent *, size_t);


extern void free (void *);




extern void _free_r (struct _reent *, void *);


extern void * realloc (void *, size_t);




extern void * _realloc_r (struct _reent *, void *, size_t);


extern void * calloc (size_t, size_t);




extern void * _calloc_r (struct _reent *, size_t, size_t);


extern void * memalign (size_t, size_t);




extern void * _memalign_r (struct _reent *, size_t, size_t);


extern struct mallinfo mallinfo (void);




extern struct mallinfo _mallinfo_r (struct _reent *);


extern void malloc_stats (void);




extern void _malloc_stats_r (struct _reent *);


extern int mallopt (int, int);




extern int _mallopt_r (struct _reent *, int, int);


extern size_t malloc_usable_size (void *);




extern size_t _malloc_usable_size_r (struct _reent *, void *);





extern void * valloc (size_t);




extern void * _valloc_r (struct _reent *, size_t);


extern void * pvalloc (size_t);




extern void * _pvalloc_r (struct _reent *, size_t);


extern int malloc_trim (size_t);




extern int _malloc_trim_r (struct _reent *, size_t);




extern void mstats (char *);




extern void _mstats_r (struct _reent *, char *);
# 162 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/malloc.h" 3
extern void cfree (void *);
# 29 "d:/devkitPro/libogc/include/grrlib/GRRLIB_texSetup.h" 2
# 1 "d:/devkitPro/libogc/include/pngu.h" 1
# 39 "d:/devkitPro/libogc/include/pngu.h"
typedef unsigned char PNGU_u8;
typedef unsigned short PNGU_u16;
typedef unsigned int PNGU_u32;
typedef unsigned long long PNGU_u64;

typedef struct
{
 PNGU_u8 r;
 PNGU_u8 g;
 PNGU_u8 b;
} PNGUCOLOR;

typedef struct
{
 PNGU_u32 imgWidth;
 PNGU_u32 imgHeight;
 PNGU_u32 imgBitDepth;
 PNGU_u32 imgColorType;
 PNGU_u32 validBckgrnd;
 PNGUCOLOR bckgrnd;
 PNGU_u32 numTrans;
 PNGUCOLOR *trans;
} PNGUPROP;


struct _IMGCTX;
typedef struct _IMGCTX *IMGCTX;
# 81 "d:/devkitPro/libogc/include/pngu.h"
PNGU_u32 PNGU_RGB8_TO_YCbYCr (PNGU_u8 r1, PNGU_u8 g1, PNGU_u8 b1, PNGU_u8 r2, PNGU_u8 g2, PNGU_u8 b2);


void PNGU_YCbYCr_TO_RGB8 (PNGU_u32 ycbycr, PNGU_u8 *r1, PNGU_u8 *g1, PNGU_u8 *b1, PNGU_u8 *r2, PNGU_u8 *g2, PNGU_u8 *b2);







IMGCTX PNGU_SelectImageFromBuffer (const void *buffer);


IMGCTX PNGU_SelectImageFromDevice (const char *filename);


void PNGU_ReleaseImageContext (IMGCTX ctx);







int PNGU_GetImageProperties (IMGCTX ctx, PNGUPROP *fileproperties);
# 115 "d:/devkitPro/libogc/include/pngu.h"
int PNGU_DecodeToYCbYCr (IMGCTX ctx, PNGU_u32 width, PNGU_u32 height, void *buffer, PNGU_u32 stride);
# 125 "d:/devkitPro/libogc/include/pngu.h"
int PNGU_DecodeToRGB565 (IMGCTX ctx, PNGU_u32 width, PNGU_u32 height, void *buffer, PNGU_u32 stride);
# 136 "d:/devkitPro/libogc/include/pngu.h"
int PNGU_DecodeToRGBA8 (IMGCTX ctx, PNGU_u32 width, PNGU_u32 height, void *buffer, PNGU_u32 stride, PNGU_u8 default_alpha);
# 146 "d:/devkitPro/libogc/include/pngu.h"
int PNGU_DecodeTo4x4RGB565 (IMGCTX ctx, PNGU_u32 width, PNGU_u32 height, void *buffer);



int PNGU_DecodeTo4x4RGB5A3 (IMGCTX ctx, PNGU_u32 width, PNGU_u32 height, void *buffer, PNGU_u8 default_alpha);



int PNGU_DecodeTo4x4RGBA8 (IMGCTX ctx, PNGU_u32 width, PNGU_u32 height, void *buffer, PNGU_u8 default_alpha);



int PNGU_EncodeFromYCbYCr (IMGCTX ctx, PNGU_u32 width, PNGU_u32 height, void *buffer, PNGU_u32 stride);
# 30 "d:/devkitPro/libogc/include/grrlib/GRRLIB_texSetup.h" 2
# 1 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/stdio.h" 1 3
# 34 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/stdio.h" 3
# 1 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/include/stddef.h" 1 3 4
# 35 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/stdio.h" 2 3


# 1 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/include/stdarg.h" 1 3 4
# 43 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 38 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/stdio.h" 2 3
# 48 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/stdio.h" 3


typedef __FILE FILE;
# 59 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/stdio.h" 3
typedef _fpos_t fpos_t;





# 1 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/stdio.h" 1 3
# 9 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/stdio.h" 3
     extern void __flockfile(FILE *fp);
# 18 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/stdio.h" 3
     extern void __funlockfile(FILE *fp);
# 66 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/stdio.h" 2 3
# 173 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/stdio.h" 3
FILE * tmpfile (void);
char * tmpnam (char *);
int fclose (FILE *);
int fflush (FILE *);
FILE * freopen (const char *, const char *, FILE *);
void setbuf (FILE *, char *);
int setvbuf (FILE *, char *, int, size_t);
int fprintf (FILE *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)));

int fscanf (FILE *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)));

int printf (const char *, ...) __attribute__ ((__format__ (__printf__, 1, 2)));

int scanf (const char *, ...) __attribute__ ((__format__ (__scanf__, 1, 2)));

int sscanf (const char *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)));

int vfprintf (FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)));

int vprintf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 1, 0)));

int vsprintf (char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)));

int fgetc (FILE *);
char * fgets (char *, int, FILE *);
int fputc (int, FILE *);
int fputs (const char *, FILE *);
int getc (FILE *);
int getchar (void);
char * gets (char *);
int putc (int, FILE *);
int putchar (int);
int puts (const char *);
int ungetc (int, FILE *);
size_t fread (void *, size_t _size, size_t _n, FILE *);
size_t fwrite (const void * , size_t _size, size_t _n, FILE *);



int fgetpos (FILE *, fpos_t *);

int fseek (FILE *, long, int);



int fsetpos (FILE *, const fpos_t *);

long ftell ( FILE *);
void rewind (FILE *);
void clearerr (FILE *);
int feof (FILE *);
int ferror (FILE *);
void perror (const char *);

FILE * fopen (const char *_name, const char *_type);
int sprintf (char *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)));

int remove (const char *);
int rename (const char *, const char *);






int fseeko (FILE *, off_t, int);
off_t ftello ( FILE *);


int asiprintf (char **, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)));

char * asniprintf (char *, size_t *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)));

char * asnprintf (char *, size_t *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)));

int asprintf (char **, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)));


int diprintf (int, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)));


int fcloseall (void);
int fiprintf (FILE *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)));

int fiscanf (FILE *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)));

int iprintf (const char *, ...) __attribute__ ((__format__ (__printf__, 1, 2)));

int iscanf (const char *, ...) __attribute__ ((__format__ (__scanf__, 1, 2)));

int siprintf (char *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)));

int siscanf (const char *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)));

int snprintf (char *, size_t, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)));

int sniprintf (char *, size_t, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)));

char * tempnam (const char *, const char *);
int vasiprintf (char **, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)));

char * vasniprintf (char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)));

char * vasnprintf (char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)));

int vasprintf (char **, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)));

int vdiprintf (int, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)));

int vfiprintf (FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)));

int vfiscanf (FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)));

int vfscanf (FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)));

int viprintf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 1, 0)));

int viscanf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 1, 0)));

int vscanf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 1, 0)));

int vsiprintf (char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)));

int vsiscanf (const char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)));

int vsniprintf (char *, size_t, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)));

int vsnprintf (char *, size_t, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)));

int vsscanf (const char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)));
# 313 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/stdio.h" 3
FILE * fdopen (int, const char *);

int fileno (FILE *);
int getw (FILE *);
int pclose (FILE *);
FILE * popen (const char *, const char *);
int putw (int, FILE *);
void setbuffer (FILE *, char *, int);
int setlinebuf (FILE *);
int getc_unlocked (FILE *);
int getchar_unlocked (void);
void flockfile (FILE *);
int ftrylockfile (FILE *);
void funlockfile (FILE *);
int putc_unlocked (int, FILE *);
int putchar_unlocked (int);
# 338 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/stdio.h" 3
int dprintf (int, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)));


FILE * fmemopen (void *, size_t, const char *);


FILE * open_memstream (char **, size_t *);




int vdprintf (int, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)));
# 358 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/stdio.h" 3
int _asiprintf_r (struct _reent *, char **, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)));

char * _asniprintf_r (struct _reent *, char *, size_t *, const char *, ...) __attribute__ ((__format__ (__printf__, 4, 5)));

char * _asnprintf_r (struct _reent *, char *, size_t *, const char *, ...) __attribute__ ((__format__ (__printf__, 4, 5)));

int _asprintf_r (struct _reent *, char **, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)));

int _diprintf_r (struct _reent *, int, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)));

int _dprintf_r (struct _reent *, int, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)));

int _fclose_r (struct _reent *, FILE *);
int _fcloseall_r (struct _reent *);
FILE * _fdopen_r (struct _reent *, int, const char *);
int _fflush_r (struct _reent *, FILE *);
int _fgetc_r (struct _reent *, FILE *);
char * _fgets_r (struct _reent *, char *, int, FILE *);




int _fgetpos_r (struct _reent *, FILE *, fpos_t *);
int _fsetpos_r (struct _reent *, FILE *, const fpos_t *);

int _fiprintf_r (struct _reent *, FILE *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)));

int _fiscanf_r (struct _reent *, FILE *, const char *, ...) __attribute__ ((__format__ (__scanf__, 3, 4)));

FILE * _fmemopen_r (struct _reent *, void *, size_t, const char *);
FILE * _fopen_r (struct _reent *, const char *, const char *);
FILE * _freopen_r (struct _reent *, const char *, const char *, FILE *);
int _fprintf_r (struct _reent *, FILE *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)));

int _fputc_r (struct _reent *, int, FILE *);
int _fputs_r (struct _reent *, const char *, FILE *);
size_t _fread_r (struct _reent *, void *, size_t _size, size_t _n, FILE *);
int _fscanf_r (struct _reent *, FILE *, const char *, ...) __attribute__ ((__format__ (__scanf__, 3, 4)));

int _fseek_r (struct _reent *, FILE *, long, int);
int _fseeko_r (struct _reent *, FILE *, _off_t, int);
long _ftell_r (struct _reent *, FILE *);
_off_t _ftello_r (struct _reent *, FILE *);
void _rewind_r (struct _reent *, FILE *);
size_t _fwrite_r (struct _reent *, const void * , size_t _size, size_t _n, FILE *);
int _getc_r (struct _reent *, FILE *);
int _getc_unlocked_r (struct _reent *, FILE *);
int _getchar_r (struct _reent *);
int _getchar_unlocked_r (struct _reent *);
char * _gets_r (struct _reent *, char *);
int _iprintf_r (struct _reent *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)));

int _iscanf_r (struct _reent *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)));

int _mkstemp_r (struct _reent *, char *);
char * _mktemp_r (struct _reent *, char *);
FILE * _open_memstream_r (struct _reent *, char **, size_t *);
void _perror_r (struct _reent *, const char *);
int _printf_r (struct _reent *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)));

int _putc_r (struct _reent *, int, FILE *);
int _putc_unlocked_r (struct _reent *, int, FILE *);
int _putchar_unlocked_r (struct _reent *, int);
int _putchar_r (struct _reent *, int);
int _puts_r (struct _reent *, const char *);
int _remove_r (struct _reent *, const char *);
int _rename_r (struct _reent *, const char *_old, const char *_new);

int _scanf_r (struct _reent *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)));

int _siprintf_r (struct _reent *, char *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)));

int _siscanf_r (struct _reent *, const char *, const char *, ...) __attribute__ ((__format__ (__scanf__, 3, 4)));

int _sniprintf_r (struct _reent *, char *, size_t, const char *, ...) __attribute__ ((__format__ (__printf__, 4, 5)));

int _snprintf_r (struct _reent *, char *, size_t, const char *, ...) __attribute__ ((__format__ (__printf__, 4, 5)));

int _sprintf_r (struct _reent *, char *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)));

int _sscanf_r (struct _reent *, const char *, const char *, ...) __attribute__ ((__format__ (__scanf__, 3, 4)));

char * _tempnam_r (struct _reent *, const char *, const char *);
FILE * _tmpfile_r (struct _reent *);
char * _tmpnam_r (struct _reent *, char *);
int _ungetc_r (struct _reent *, int, FILE *);
int _vasiprintf_r (struct _reent *, char **, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)));

char * _vasniprintf_r (struct _reent*, char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)));

char * _vasnprintf_r (struct _reent*, char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)));

int _vasprintf_r (struct _reent *, char **, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)));

int _vdiprintf_r (struct _reent *, int, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)));

int _vdprintf_r (struct _reent *, int, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)));

int _vfiprintf_r (struct _reent *, FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)));

int _vfiscanf_r (struct _reent *, FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)));

int _vfprintf_r (struct _reent *, FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)));

int _vfscanf_r (struct _reent *, FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)));

int _viprintf_r (struct _reent *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)));

int _viscanf_r (struct _reent *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)));

int _vprintf_r (struct _reent *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)));

int _vscanf_r (struct _reent *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)));

int _vsiprintf_r (struct _reent *, char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)));

int _vsiscanf_r (struct _reent *, const char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)));

int _vsniprintf_r (struct _reent *, char *, size_t, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)));

int _vsnprintf_r (struct _reent *, char *, size_t, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)));

int _vsprintf_r (struct _reent *, char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)));

int _vsscanf_r (struct _reent *, const char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)));


ssize_t __getdelim (char **, size_t *, int, FILE *);
ssize_t __getline (char **, size_t *, FILE *);
# 514 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/stdio.h" 3
int __srget_r (struct _reent *, FILE *);
int __swbuf_r (struct _reent *, int, FILE *);
# 534 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/stdio.h" 3
FILE *funopen (const void * __cookie, int (*__readfn)(void * __cookie, char *__buf, int __n), int (*__writefn)(void * __cookie, const char *__buf, int __n), fpos_t (*__seekfn)(void * __cookie, fpos_t __off, int __whence), int (*__closefn)(void * __cookie));




FILE *_funopen_r (struct _reent *, const void * __cookie, int (*__readfn)(void * __cookie, char *__buf, int __n), int (*__writefn)(void * __cookie, const char *__buf, int __n), fpos_t (*__seekfn)(void * __cookie, fpos_t __off, int __whence), int (*__closefn)(void * __cookie));
# 551 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/stdio.h" 3
typedef ssize_t cookie_read_function_t(void *__cookie, char *__buf, size_t __n);
typedef ssize_t cookie_write_function_t(void *__cookie, const char *__buf,
     size_t __n);




typedef int cookie_seek_function_t(void *__cookie, off_t *__off, int __whence);

typedef int cookie_close_function_t(void *__cookie);
typedef struct
{


  cookie_read_function_t *read;
  cookie_write_function_t *write;
  cookie_seek_function_t *seek;
  cookie_close_function_t *close;
} cookie_io_functions_t;
FILE *fopencookie (void *__cookie, const char *__mode, cookie_io_functions_t __functions);

FILE *_fopencookie_r (struct _reent *, void *__cookie, const char *__mode, cookie_io_functions_t __functions);
# 701 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/stdio.h" 3

# 31 "d:/devkitPro/libogc/include/grrlib/GRRLIB_texSetup.h" 2
# 1 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/string.h" 1 3
# 14 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/string.h" 3
# 1 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/include/stddef.h" 1 3 4
# 15 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/string.h" 2 3







void * memchr (const void *, int, size_t);
int memcmp (const void *, const void *, size_t);
void * memcpy (void *, const void *, size_t);
void * memmove (void *, const void *, size_t);
void * memset (void *, int, size_t);
char *strcat (char *, const char *);
char *strchr (const char *, int);
int strcmp (const char *, const char *);
int strcoll (const char *, const char *);
char *strcpy (char *, const char *);
size_t strcspn (const char *, const char *);
char *strerror (int);
size_t strlen (const char *);
char *strncat (char *, const char *, size_t);
int strncmp (const char *, const char *, size_t);
char *strncpy (char *, const char *, size_t);
char *strpbrk (const char *, const char *);
char *strrchr (const char *, int);
size_t strspn (const char *, const char *);
char *strstr (const char *, const char *);


char *strtok (char *, const char *);


size_t strxfrm (char *, const char *, size_t);


char *strtok_r (char *, const char *, char **);

int bcmp (const void *, const void *, size_t);
void bcopy (const void *, void *, size_t);
void bzero (void *, size_t);
int ffs (int);
char *index (const char *, int);
void * memccpy (void *, const void *, int, size_t);
void * mempcpy (void *, const void *, size_t);
void * memmem (const void *, size_t, const void *, size_t);
char *rindex (const char *, int);
char *stpcpy (char *, const char *);
char *stpncpy (char *, const char *, size_t);
int strcasecmp (const char *, const char *);
char *strcasestr (const char *, const char *);
char *strdup (const char *);
char *_strdup_r (struct _reent *, const char *);
char *strndup (const char *, size_t);
char *_strndup_r (struct _reent *, const char *, size_t);
char *strerror_r (int, char *, size_t);
size_t strlcat (char *, const char *, size_t);
size_t strlcpy (char *, const char *, size_t);
int strncasecmp (const char *, const char *, size_t);
size_t strnlen (const char *, size_t);
char *strsep (char **, const char *);
char *strlwr (char *);
char *strupr (char *);
# 100 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/string.h" 3
# 1 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/string.h" 1 3
# 101 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/string.h" 2 3


# 32 "d:/devkitPro/libogc/include/grrlib/GRRLIB_texSetup.h" 2

# 1 "d:/devkitPro/libogc/include/jpeglib.h" 1
# 16 "d:/devkitPro/libogc/include/jpeglib.h"
# 1 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/include/stddef.h" 1 3 4
# 17 "d:/devkitPro/libogc/include/jpeglib.h" 2
# 27 "d:/devkitPro/libogc/include/jpeglib.h"
# 1 "d:/devkitPro/libogc/include/jconfig.h" 1
# 28 "d:/devkitPro/libogc/include/jpeglib.h" 2

# 1 "d:/devkitPro/libogc/include/jmorecfg.h" 1
# 59 "d:/devkitPro/libogc/include/jmorecfg.h"
typedef unsigned char JSAMPLE;
# 99 "d:/devkitPro/libogc/include/jmorecfg.h"
typedef short JCOEF;
# 110 "d:/devkitPro/libogc/include/jmorecfg.h"
typedef unsigned char JOCTET;
# 135 "d:/devkitPro/libogc/include/jmorecfg.h"
typedef unsigned char UINT8;
# 147 "d:/devkitPro/libogc/include/jmorecfg.h"
typedef unsigned short UINT16;







typedef short INT16;





typedef long INT32;
# 171 "d:/devkitPro/libogc/include/jmorecfg.h"
typedef unsigned int JDIMENSION;
# 30 "d:/devkitPro/libogc/include/jpeglib.h" 2
# 69 "d:/devkitPro/libogc/include/jpeglib.h"
typedef JSAMPLE *JSAMPROW;
typedef JSAMPROW *JSAMPARRAY;
typedef JSAMPARRAY *JSAMPIMAGE;

typedef JCOEF JBLOCK[64];
typedef JBLOCK *JBLOCKROW;
typedef JBLOCKROW *JBLOCKARRAY;
typedef JBLOCKARRAY *JBLOCKIMAGE;

typedef JCOEF *JCOEFPTR;







typedef struct {




  UINT16 quantval[64];





  u8 sent_table;
} JQUANT_TBL;




typedef struct {

  UINT8 bits[17];

  UINT8 huffval[256];





  u8 sent_table;
} JHUFF_TBL;




typedef struct {



  int component_id;
  int component_index;
  int h_samp_factor;
  int v_samp_factor;
  int quant_tbl_no;




  int dc_tbl_no;
  int ac_tbl_no;
# 142 "d:/devkitPro/libogc/include/jpeglib.h"
  JDIMENSION width_in_blocks;
  JDIMENSION height_in_blocks;






  int DCT_scaled_size;






  JDIMENSION downsampled_width;
  JDIMENSION downsampled_height;




  u8 component_needed;



  int MCU_width;
  int MCU_height;
  int MCU_blocks;
  int MCU_sample_width;
  int last_col_width;
  int last_row_height;





  JQUANT_TBL * quant_table;


  void * dct_table;
} jpeg_component_info;




typedef struct {
  int comps_in_scan;
  int component_index[4];
  int Ss, Se;
  int Ah, Al;
} jpeg_scan_info;



typedef struct jpeg_marker_struct * jpeg_saved_marker_ptr;

struct jpeg_marker_struct {
  jpeg_saved_marker_ptr next;
  UINT8 marker;
  unsigned int original_length;
  unsigned int data_length;
  JOCTET * data;

};



typedef enum {
 JCS_UNKNOWN,
 JCS_GRAYSCALE,
 JCS_RGB,
 JCS_YCbCr,
 JCS_CMYK,
 JCS_YCCK
} J_COLOR_SPACE;



typedef enum {
 JDCT_ISLOW,
 JDCT_IFAST,
 JDCT_FLOAT
} J_DCT_METHOD;
# 235 "d:/devkitPro/libogc/include/jpeglib.h"
typedef enum {
 JDITHER_NONE,
 JDITHER_ORDERED,
 JDITHER_FS
} J_DITHER_MODE;
# 256 "d:/devkitPro/libogc/include/jpeglib.h"
struct jpeg_common_struct {
  struct jpeg_error_mgr * err; struct jpeg_memory_mgr * mem; struct jpeg_progress_mgr * progress; void * client_data; u8 is_decompressor; int global_state;




};

typedef struct jpeg_common_struct * j_common_ptr;
typedef struct jpeg_compress_struct * j_compress_ptr;
typedef struct jpeg_decompress_struct * j_decompress_ptr;




struct jpeg_compress_struct {
  struct jpeg_error_mgr * err; struct jpeg_memory_mgr * mem; struct jpeg_progress_mgr * progress; void * client_data; u8 is_decompressor; int global_state;


  struct jpeg_destination_mgr * dest;






  JDIMENSION image_width;
  JDIMENSION image_height;
  int input_components;
  J_COLOR_SPACE in_color_space;

  double input_gamma;
# 297 "d:/devkitPro/libogc/include/jpeglib.h"
  int data_precision;

  int num_components;
  J_COLOR_SPACE jpeg_color_space;

  jpeg_component_info * comp_info;


  JQUANT_TBL * quant_tbl_ptrs[4];


  JHUFF_TBL * dc_huff_tbl_ptrs[4];
  JHUFF_TBL * ac_huff_tbl_ptrs[4];


  UINT8 arith_dc_L[16];
  UINT8 arith_dc_U[16];
  UINT8 arith_ac_K[16];

  int num_scans;
  const jpeg_scan_info * scan_info;





  u8 raw_data_in;
  u8 arith_code;
  u8 optimize_coding;
  u8 CCIR601_sampling;
  int smoothing_factor;
  J_DCT_METHOD dct_method;






  unsigned int restart_interval;
  int restart_in_rows;



  u8 write_JFIF_header;
  UINT8 JFIF_major_version;
  UINT8 JFIF_minor_version;




  UINT8 density_unit;
  UINT16 X_density;
  UINT16 Y_density;
  u8 write_Adobe_marker;






  JDIMENSION next_scanline;
# 366 "d:/devkitPro/libogc/include/jpeglib.h"
  u8 progressive_mode;
  int max_h_samp_factor;
  int max_v_samp_factor;

  JDIMENSION total_iMCU_rows;
# 381 "d:/devkitPro/libogc/include/jpeglib.h"
  int comps_in_scan;
  jpeg_component_info * cur_comp_info[4];


  JDIMENSION MCUs_per_row;
  JDIMENSION MCU_rows_in_scan;

  int blocks_in_MCU;
  int MCU_membership[10];



  int Ss, Se, Ah, Al;




  struct jpeg_comp_master * master;
  struct jpeg_c_main_controller * main;
  struct jpeg_c_prep_controller * prep;
  struct jpeg_c_coef_controller * coef;
  struct jpeg_marker_writer * marker;
  struct jpeg_color_converter * cconvert;
  struct jpeg_downsampler * downsample;
  struct jpeg_forward_dct * fdct;
  struct jpeg_entropy_encoder * entropy;
  jpeg_scan_info * script_space;
  int script_space_size;
};




struct jpeg_decompress_struct {
  struct jpeg_error_mgr * err; struct jpeg_memory_mgr * mem; struct jpeg_progress_mgr * progress; void * client_data; u8 is_decompressor; int global_state;


  struct jpeg_source_mgr * src;




  JDIMENSION image_width;
  JDIMENSION image_height;
  int num_components;
  J_COLOR_SPACE jpeg_color_space;






  J_COLOR_SPACE out_color_space;

  unsigned int scale_num, scale_denom;

  double output_gamma;

  u8 buffered_image;
  u8 raw_data_out;

  J_DCT_METHOD dct_method;
  u8 do_fancy_upsampling;
  u8 do_block_smoothing;

  u8 quantize_colors;

  J_DITHER_MODE dither_mode;
  u8 two_pass_quantize;
  int desired_number_of_colors;

  u8 enable_1pass_quant;
  u8 enable_external_quant;
  u8 enable_2pass_quant;







  JDIMENSION output_width;
  JDIMENSION output_height;
  int out_color_components;
  int output_components;



  int rec_outbuf_height;
# 481 "d:/devkitPro/libogc/include/jpeglib.h"
  int actual_number_of_colors;
  JSAMPARRAY colormap;
# 492 "d:/devkitPro/libogc/include/jpeglib.h"
  JDIMENSION output_scanline;




  int input_scan_number;
  JDIMENSION input_iMCU_row;





  int output_scan_number;
  JDIMENSION output_iMCU_row;
# 514 "d:/devkitPro/libogc/include/jpeglib.h"
  int (*coef_bits)[64];
# 525 "d:/devkitPro/libogc/include/jpeglib.h"
  JQUANT_TBL * quant_tbl_ptrs[4];


  JHUFF_TBL * dc_huff_tbl_ptrs[4];
  JHUFF_TBL * ac_huff_tbl_ptrs[4];






  int data_precision;

  jpeg_component_info * comp_info;


  u8 progressive_mode;
  u8 arith_code;

  UINT8 arith_dc_L[16];
  UINT8 arith_dc_U[16];
  UINT8 arith_ac_K[16];

  unsigned int restart_interval;




  u8 saw_JFIF_marker;

  UINT8 JFIF_major_version;
  UINT8 JFIF_minor_version;
  UINT8 density_unit;
  UINT16 X_density;
  UINT16 Y_density;
  u8 saw_Adobe_marker;
  UINT8 Adobe_transform;

  u8 CCIR601_sampling;





  jpeg_saved_marker_ptr marker_list;
# 578 "d:/devkitPro/libogc/include/jpeglib.h"
  int max_h_samp_factor;
  int max_v_samp_factor;

  int min_DCT_scaled_size;

  JDIMENSION total_iMCU_rows;
# 592 "d:/devkitPro/libogc/include/jpeglib.h"
  JSAMPLE * sample_range_limit;






  int comps_in_scan;
  jpeg_component_info * cur_comp_info[4];


  JDIMENSION MCUs_per_row;
  JDIMENSION MCU_rows_in_scan;

  int blocks_in_MCU;
  int MCU_membership[10];



  int Ss, Se, Ah, Al;





  int unread_marker;




  struct jpeg_decomp_master * master;
  struct jpeg_d_main_controller * main;
  struct jpeg_d_coef_controller * coef;
  struct jpeg_d_post_controller * post;
  struct jpeg_input_controller * inputctl;
  struct jpeg_marker_reader * marker;
  struct jpeg_entropy_decoder * entropy;
  struct jpeg_inverse_dct * idct;
  struct jpeg_upsampler * upsample;
  struct jpeg_color_deconverter * cconvert;
  struct jpeg_color_quantizer * cquantize;
};
# 646 "d:/devkitPro/libogc/include/jpeglib.h"
struct jpeg_error_mgr {

  void (*error_exit) (j_common_ptr cinfo);

  void (*emit_message) (j_common_ptr cinfo, int msg_level);

  void (*output_message) (j_common_ptr cinfo);

  void (*format_message) (j_common_ptr cinfo, char * buffer);


  void (*reset_error_mgr) (j_common_ptr cinfo);




  int msg_code;

  union {
    int i[8];
    char s[80];
  } msg_parm;



  int trace_level;







  long num_warnings;
# 691 "d:/devkitPro/libogc/include/jpeglib.h"
  const char * const * jpeg_message_table;
  int last_jpeg_message;



  const char * const * addon_message_table;
  int first_addon_message;
  int last_addon_message;
};




struct jpeg_progress_mgr {
  void (*progress_monitor) (j_common_ptr cinfo);

  long pass_counter;
  long pass_limit;
  int completed_passes;
  int total_passes;
};




struct jpeg_destination_mgr {
  JOCTET * next_output_byte;
  size_t free_in_buffer;

  void (*init_destination) (j_compress_ptr cinfo);
  u8 (*empty_output_buffer) (j_compress_ptr cinfo);
  void (*term_destination) (j_compress_ptr cinfo);
};




struct jpeg_source_mgr {
  const JOCTET * next_input_byte;
  size_t bytes_in_buffer;

  void (*init_source) (j_decompress_ptr cinfo);
  u8 (*fill_input_buffer) (j_decompress_ptr cinfo);
  void (*skip_input_data) (j_decompress_ptr cinfo, long num_bytes);
  u8 (*resync_to_restart) (j_decompress_ptr cinfo, int desired);
  void (*term_source) (j_decompress_ptr cinfo);
};
# 755 "d:/devkitPro/libogc/include/jpeglib.h"
typedef struct jvirt_sarray_control * jvirt_sarray_ptr;
typedef struct jvirt_barray_control * jvirt_barray_ptr;


struct jpeg_memory_mgr {

  void * (*alloc_small) (j_common_ptr cinfo, int pool_id, size_t sizeofobject);

  void * (*alloc_large) (j_common_ptr cinfo, int pool_id, size_t sizeofobject);

  JSAMPARRAY (*alloc_sarray) (j_common_ptr cinfo, int pool_id, JDIMENSION samplesperrow, JDIMENSION numrows);


  JBLOCKARRAY (*alloc_barray) (j_common_ptr cinfo, int pool_id, JDIMENSION blocksperrow, JDIMENSION numrows);


  jvirt_sarray_ptr (*request_virt_sarray) (j_common_ptr cinfo, int pool_id, u8 pre_zero, JDIMENSION samplesperrow, JDIMENSION numrows, JDIMENSION maxaccess);





  jvirt_barray_ptr (*request_virt_barray) (j_common_ptr cinfo, int pool_id, u8 pre_zero, JDIMENSION blocksperrow, JDIMENSION numrows, JDIMENSION maxaccess);





  void (*realize_virt_arrays) (j_common_ptr cinfo);
  JSAMPARRAY (*access_virt_sarray) (j_common_ptr cinfo, jvirt_sarray_ptr ptr, JDIMENSION start_row, JDIMENSION num_rows, u8 writable);




  JBLOCKARRAY (*access_virt_barray) (j_common_ptr cinfo, jvirt_barray_ptr ptr, JDIMENSION start_row, JDIMENSION num_rows, u8 writable);




  void (*free_pool) (j_common_ptr cinfo, int pool_id);
  void (*self_destruct) (j_common_ptr cinfo);






  long max_memory_to_use;


  long max_alloc_chunk;
};





typedef u8 (*jpeg_marker_parser_method) (j_decompress_ptr cinfo);
# 887 "d:/devkitPro/libogc/include/jpeglib.h"
extern struct jpeg_error_mgr * jpeg_std_error
 (struct jpeg_error_mgr * err);
# 903 "d:/devkitPro/libogc/include/jpeglib.h"
extern void jpeg_CreateCompress (j_compress_ptr cinfo, int version, size_t structsize);

extern void jpeg_CreateDecompress (j_decompress_ptr cinfo, int version, size_t structsize);


extern void jpeg_destroy_compress (j_compress_ptr cinfo);
extern void jpeg_destroy_decompress (j_decompress_ptr cinfo);



extern void jpeg_stdio_dest (j_compress_ptr cinfo, FILE * outfile);
extern void jpeg_stdio_src (j_decompress_ptr cinfo, FILE * infile);
extern void jpeg_memory_src (j_decompress_ptr cinfo, const JOCTET *buffer, size_t bufsize);


extern void jpeg_set_defaults (j_compress_ptr cinfo);

extern void jpeg_set_colorspace (j_compress_ptr cinfo, J_COLOR_SPACE colorspace);

extern void jpeg_default_colorspace (j_compress_ptr cinfo);
extern void jpeg_set_quality (j_compress_ptr cinfo, int quality, u8 force_baseline);

extern void jpeg_set_linear_quality (j_compress_ptr cinfo, int scale_factor, u8 force_baseline);


extern void jpeg_add_quant_table (j_compress_ptr cinfo, int which_tbl, const unsigned int *basic_table, int scale_factor, u8 force_baseline);



extern int jpeg_quality_scaling (int quality);
extern void jpeg_simple_progression (j_compress_ptr cinfo);
extern void jpeg_suppress_tables (j_compress_ptr cinfo, u8 suppress);

extern JQUANT_TBL * jpeg_alloc_quant_table (j_common_ptr cinfo);
extern JHUFF_TBL * jpeg_alloc_huff_table (j_common_ptr cinfo);


extern void jpeg_start_compress (j_compress_ptr cinfo, u8 write_all_tables);

extern JDIMENSION jpeg_write_scanlines (j_compress_ptr cinfo, JSAMPARRAY scanlines, JDIMENSION num_lines);


extern void jpeg_finish_compress (j_compress_ptr cinfo);


extern JDIMENSION jpeg_write_raw_data (j_compress_ptr cinfo, JSAMPIMAGE data, JDIMENSION num_lines);




extern void jpeg_write_marker
 (j_compress_ptr cinfo, int marker, const JOCTET * dataptr, unsigned int datalen);


extern void jpeg_write_m_header
 (j_compress_ptr cinfo, int marker, unsigned int datalen);
extern void jpeg_write_m_byte
 (j_compress_ptr cinfo, int val);


extern void jpeg_write_tables (j_compress_ptr cinfo);


extern int jpeg_read_header (j_decompress_ptr cinfo, u8 require_image);
# 979 "d:/devkitPro/libogc/include/jpeglib.h"
extern u8 jpeg_start_decompress (j_decompress_ptr cinfo);
extern JDIMENSION jpeg_read_scanlines (j_decompress_ptr cinfo, JSAMPARRAY scanlines, JDIMENSION max_lines);


extern u8 jpeg_finish_decompress (j_decompress_ptr cinfo);


extern JDIMENSION jpeg_read_raw_data (j_decompress_ptr cinfo, JSAMPIMAGE data, JDIMENSION max_lines);




extern u8 jpeg_has_multiple_scans (j_decompress_ptr cinfo);
extern u8 jpeg_start_output (j_decompress_ptr cinfo, int scan_number);

extern u8 jpeg_finish_output (j_decompress_ptr cinfo);
extern u8 jpeg_input_complete (j_decompress_ptr cinfo);
extern void jpeg_new_colormap (j_decompress_ptr cinfo);
extern int jpeg_consume_input (j_decompress_ptr cinfo);
# 1006 "d:/devkitPro/libogc/include/jpeglib.h"
extern void jpeg_calc_output_dimensions (j_decompress_ptr cinfo);


extern void jpeg_save_markers
 (j_decompress_ptr cinfo, int marker_code, unsigned int length_limit);



extern void jpeg_set_marker_processor
 (j_decompress_ptr cinfo, int marker_code, jpeg_marker_parser_method routine);



extern jvirt_barray_ptr * jpeg_read_coefficients (j_decompress_ptr cinfo);
extern void jpeg_write_coefficients (j_compress_ptr cinfo, jvirt_barray_ptr * coef_arrays);

extern void jpeg_copy_critical_parameters (j_decompress_ptr srcinfo, j_compress_ptr dstinfo);
# 1031 "d:/devkitPro/libogc/include/jpeglib.h"
extern void jpeg_abort_compress (j_compress_ptr cinfo);
extern void jpeg_abort_decompress (j_decompress_ptr cinfo);




extern void jpeg_abort (j_common_ptr cinfo);
extern void jpeg_destroy (j_common_ptr cinfo);


extern u8 jpeg_resync_to_restart (j_decompress_ptr cinfo, int desired);
# 34 "d:/devkitPro/libogc/include/grrlib/GRRLIB_texSetup.h" 2







extern inline
GRRLIB_texImg* GRRLIB_CreateEmptyTexture (const uint w, const uint h)
{
    GRRLIB_texImg *my_texture = (struct GRRLIB_texImg *)calloc(1, sizeof(GRRLIB_texImg));

    if(my_texture != ((void *)0)) {
        my_texture->data = memalign(32, h * w * 4);
        my_texture->w = w;
        my_texture->h = h;


        memset(my_texture->data, '\0', (h * w) << 2);

        GRRLIB_SetHandle(my_texture, 0, 0);
        GRRLIB_FlushTex(my_texture);
    }
    return my_texture;
}






extern inline
void GRRLIB_FlushTex (GRRLIB_texImg *tex) {
    DCFlushRange(tex->data, tex->w * tex->h * 4);
}





extern inline
void GRRLIB_FreeTexture (GRRLIB_texImg *tex) {
    if(tex != ((void *)0)) {
        if (tex->data != ((void *)0)) free(tex->data) ;
        free(tex);
        tex = ((void *)0);
    }
}





extern inline
void GRRLIB_ClearTex(GRRLIB_texImg* tex)
{
    bzero(tex->data, (tex->h * tex->w) << 2);
    GRRLIB_FlushTex(tex);
}
# 135 "d:/devkitPro/libogc/include/grrlib/GRRLIB__inline.h" 2
# 214 "d:/devkitPro/libogc/include/grrlib.h" 2
# 2 "d:/devkitPro/0wn/strobe-alarm-clock-grrlib/source/strobe.c" 2
# 1 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/unistd.h" 1 3



# 1 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/unistd.h" 1 3
# 13 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/unistd.h" 3
# 1 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/include/stddef.h" 1 3 4
# 14 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/unistd.h" 2 3

extern char **environ;

void _exit (int __status ) __attribute__ ((noreturn));

int access (const char *__path, int __amode );
unsigned alarm (unsigned __secs );
int chdir (const char *__path );
int chmod (const char *__path, mode_t __mode );

int chown (const char *__path, uid_t __owner, gid_t __group );




int close (int __fildes );



char *ctermid (char *__s );
char *cuserid (char *__s );



int dup (int __fildes );
int dup2 (int __fildes, int __fildes2 );



int execl (const char *__path, const char *, ... );
int execle (const char *__path, const char *, ... );
int execlp (const char *__file, const char *, ... );
int execv (const char *__path, char * const __argv[] );
int execve (const char *__path, char * const __argv[], char * const __envp[] );
int execvp (const char *__file, char * const __argv[] );






int fchmod (int __fildes, mode_t __mode );

int fchown (int __fildes, uid_t __owner, gid_t __group );




pid_t fork (void );
long fpathconf (int __fd, int __name );
int fsync (int __fd);
int fdatasync (int __fd);
char *getcwd (char *__buf, size_t __size );




gid_t getegid (void );
uid_t geteuid (void );
gid_t getgid (void );

int getgroups (int __gidsetsize, gid_t __grouplist[] );



char *getlogin (void );



char *getpass (const char *__prompt);
size_t getpagesize (void);



pid_t getpgid (pid_t);
pid_t getpgrp (void );
pid_t getpid (void );
pid_t getppid (void );




uid_t getuid (void );






int isatty (int __fildes );

int lchown (const char *__path, uid_t __owner, gid_t __group );

int link (const char *__path1, const char *__path2 );



int nice (int __nice_value );

off_t lseek (int __fildes, off_t __offset, int __whence );
# 122 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/unistd.h" 3
long pathconf (const char *__path, int __name );
int pause (void );



int pipe (int __fildes[2] );
ssize_t pread (int __fd, void *__buf, size_t __nbytes, off_t __offset);
ssize_t pwrite (int __fd, const void *__buf, size_t __nbytes, off_t __offset);
int read (int __fd, void *__buf, size_t __nbyte );




int rmdir (const char *__path );



void * sbrk (ptrdiff_t __incr);





int setgid (gid_t __gid );




int setpgid (pid_t __pid, pid_t __pgid );
int setpgrp (void );




pid_t setsid (void );

int setuid (uid_t __uid );




unsigned sleep (unsigned int __seconds );
void swab (const void *, void *, ssize_t);
long sysconf (int __name );
pid_t tcgetpgrp (int __fildes );
int tcsetpgrp (int __fildes, pid_t __pgrp_id );
char *ttyname (int __fildes );



int unlink (const char *__path );
int usleep (useconds_t __useconds);
int vhangup (void );
int write (int __fd, const void *__buf, size_t __nbyte );






extern char *optarg;
extern int optind, opterr, optopt;
int getopt(int, char * const [], const char *);
extern int optreset;



pid_t vfork (void );

extern char *suboptarg;
int getsubopt(char **, char * const *, char **);
# 215 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/unistd.h" 3
int ftruncate (int __fd, off_t __length);
int truncate (const char *, off_t __length);
# 234 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/sys/unistd.h" 3
ssize_t readlink (const char *__path, char *__buf, size_t __buflen);



int symlink (const char *__name1, const char *__name2);
# 5 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/unistd.h" 2 3
# 3 "d:/devkitPro/0wn/strobe-alarm-clock-grrlib/source/strobe.c" 2

# 1 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/stdlib.h" 1 3
# 14 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/stdlib.h" 3
# 1 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/include/stddef.h" 1 3 4
# 15 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/stdlib.h" 2 3


# 1 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/machine/stdlib.h" 1 3
# 18 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/stdlib.h" 2 3

# 1 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/alloca.h" 1 3
# 20 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/stdlib.h" 2 3








typedef struct
{
  int quot;
  int rem;
} div_t;

typedef struct
{
  long quot;
  long rem;
} ldiv_t;


typedef struct
{
  long long int quot;
  long long int rem;
} lldiv_t;
# 57 "d:\\devkitpro\\devkitppc\\bin\\../lib/gcc/powerpc-gekko/4.2.4/../../../../powerpc-gekko/include/stdlib.h" 3
extern int __mb_cur_max;



void abort (void) __attribute__ ((noreturn));
int abs (int);
int atexit (void (*__func)(void));
double atof (const char *__nptr);

float atoff (const char *__nptr);

int atoi (const char *__nptr);
int _atoi_r (struct _reent *, const char *__nptr);
long atol (const char *__nptr);
long _atol_r (struct _reent *, const char *__nptr);
void * bsearch (const void * __key, const void * __base, size_t __nmemb, size_t __size, int (* _compar) (const void *, const void *));




void * calloc (size_t __nmemb, size_t __size);
div_t div (int __numer, int __denom);
void exit (int __status) __attribute__ ((noreturn));
void free (void *);
char * getenv (const char *__string);
char * _getenv_r (struct _reent *, const char *__string);
char * _findenv (const char *, int *);
char * _findenv_r (struct _reent *, const char *, int *);
long labs (long);
ldiv_t ldiv (long __numer, long __denom);
void * malloc (size_t __size);
int mblen (const char *, size_t);
int _mblen_r (struct _reent *, const char *, size_t, _mbstate_t *);
int mbtowc (wchar_t *, const char *, size_t);
int _mbtowc_r (struct _reent *, wchar_t *, const char *, size_t, _mbstate_t *);
int wctomb (char *, wchar_t);
int _wctomb_r (struct _reent *, char *, wchar_t, _mbstate_t *);
size_t mbstowcs (wchar_t *, const char *, size_t);
size_t _mbstowcs_r (struct _reent *, wchar_t *, const char *, size_t, _mbstate_t *);
size_t wcstombs (char *, const wchar_t *, size_t);
size_t _wcstombs_r (struct _reent *, char *, const wchar_t *, size_t, _mbstate_t *);


int mkstemp (char *);
char * mktemp (char *);


void qsort (void * __base, size_t __nmemb, size_t __size, int(*_compar)(const void *, const void *));
int rand (void);
void * realloc (void * __r, size_t __size);

void * reallocf (void * __r, size_t __size);

void srand (unsigned __seed);
double strtod (const char *__n, char **__end_PTR);
double _strtod_r (struct _reent *,const char *__n, char **__end_PTR);
float strtof (const char *__n, char **__end_PTR);






long strtol (const char *__n, char **__end_PTR, int __base);
long _strtol_r (struct _reent *,const char *__n, char **__end_PTR, int __base);
unsigned long strtoul (const char *__n, char **__end_PTR, int __base);
unsigned long _strtoul_r (struct _reent *,const char *__n, char **__end_PTR, int __base);

int system (const char *__string);


long a64l (const char *__input);
char * l64a (long __input);
char * _l64a_r (struct _reent *,long __input);
int on_exit (void (*__func)(int, void *),void * __arg);
void _Exit (int __status) __attribute__ ((noreturn));
int putenv (char *__string);
int _putenv_r (struct _reent *, char *__string);
void * _reallocf_r (struct _reent *, void *, size_t);
int setenv (const char *__string, const char *__value, int __overwrite);
int _setenv_r (struct _reent *, const char *__string, const char *__value, int __overwrite);

char * gcvt (double,int,char *);
char * gcvtf (float,int,char *);
char * fcvt (double,int,int *,int *);
char * fcvtf (float,int,int *,int *);
char * ecvt (double,int,int *,int *);
char * ecvtbuf (double, int, int*, int*, char *);
char * fcvtbuf (double, int, int*, int*, char *);
char * ecvtf (float,int,int *,int *);
char * dtoa (double, int, int, int *, int*, char**);
int rand_r (unsigned *__seed);

double drand48 (void);
double _drand48_r (struct _reent *);
double erand48 (unsigned short [3]);
double _erand48_r (struct _reent *, unsigned short [3]);
long jrand48 (unsigned short [3]);
long _jrand48_r (struct _reent *, unsigned short [3]);
void lcong48 (unsigned short [7]);
void _lcong48_r (struct _reent *, unsigned short [7]);
long lrand48 (void);
long _lrand48_r (struct _reent *);
long mrand48 (void);
long _mrand48_r (struct _reent *);
long nrand48 (unsigned short [3]);
long _nrand48_r (struct _reent *, unsigned short [3]);
unsigned short *
       seed48 (unsigned short [3]);
unsigned short *
       _seed48_r (struct _reent *, unsigned short [3]);
void srand48 (long);
void _srand48_r (struct _reent *, long);
long long atoll (const char *__nptr);
long long _atoll_r (struct _reent *, const char *__nptr);
long long llabs (long long);
lldiv_t lldiv (long long __numer, long long __denom);
long long strtoll (const char *__n, char **__end_PTR, int __base);
long long _strtoll_r (struct _reent *, const char *__n, char **__end_PTR, int __base);
unsigned long long strtoull (const char *__n, char **__end_PTR, int __base);
unsigned long long _strtoull_r (struct _reent *, const char *__n, char **__end_PTR, int __base);


void cfree (void *);
int unsetenv (const char *__string);
int _unsetenv_r (struct _reent *, const char *__string);




char * _dtoa_r (struct _reent *, double, int, int, int *, int*, char**);

void * _malloc_r (struct _reent *, size_t);
void * _calloc_r (struct _reent *, size_t, size_t);
void _free_r (struct _reent *, void *);
void * _realloc_r (struct _reent *, void *, size_t);
void _mstats_r (struct _reent *, char *);

int _system_r (struct _reent *, const char *);

void __eprintf (const char *, const char *, unsigned int, const char *);


# 5 "d:/devkitPro/0wn/strobe-alarm-clock-grrlib/source/strobe.c" 2



# 1 "d:/devkitPro/libogc/include/wiiuse/wpad.h" 1
# 35 "d:/devkitPro/libogc/include/wiiuse/wpad.h"
# 1 "d:/devkitPro/libogc/include/wiiuse/wiiuse.h" 1
# 9 "d:/devkitPro/libogc/include/wiiuse/wiiuse.h"
# 1 "d:/devkitPro/libogc/include/bte/bte.h" 1




# 1 "d:/devkitPro/libogc/include/bte/bd_addr.h" 1
# 42 "d:/devkitPro/libogc/include/bte/bd_addr.h"
struct bd_addr {
  u8 addr[6];
};
# 6 "d:/devkitPro/libogc/include/bte/bte.h" 2
# 73 "d:/devkitPro/libogc/include/bte/bte.h"
struct l2cap_pcb;
struct ctrl_req_t;

struct inquiry_info
{
 struct bd_addr bdaddr;
 u8 cod[3];
};

struct inquiry_info_ex
{
 struct bd_addr bdaddr;
 u8 cod[3];
 u8 psrm;
 u8 psm;
 u16 co;
};

struct linkkey_info
{
 struct bd_addr bdaddr;
 u8 key[16];
};

struct bte_pcb
{
 u8 err;
 u32 state;
 void *cbarg;

 struct ctrl_req_t *ctrl_req_head;
 struct ctrl_req_t *ctrl_req_tail;

 lwpq_t cmdq;

 struct bd_addr bdaddr;

 struct l2cap_pcb *out_pcb;
 struct l2cap_pcb *in_pcb;


 s32 (*recv)(void *arg,void *buffer,u16 len);
 s32 (*conn_cfm)(void *arg,struct bte_pcb *pcb,u8 err);
 s32 (*disconn_cfm)(void *arg,struct bte_pcb *pcb,u8 err);
};

typedef s32 (*btecallback)(s32 result,void *userdata);

void BTE_Init();
void BTE_Shutdown();
s32 BTE_InitCore(btecallback cb);
s32 BTE_ApplyPatch(btecallback cb);
s32 BTE_InitSub(btecallback cb);
s32 BTE_ReadStoredLinkKey(struct linkkey_info *keys,u8 max_cnt,btecallback cb);
void (*BTE_SetDisconnectCallback(void (*callback)(struct bd_addr *bdaddr,u8 reason)))(struct bd_addr *bdaddr,u8 reason);

struct bte_pcb* bte_new();
void bte_arg(struct bte_pcb *pcb,void *arg);
void bte_received(struct bte_pcb *pcb, s32 (*recv)(void *arg,void *buffer,u16 len));
void bte_disconnected(struct bte_pcb *pcb,s32 (disconn_cfm)(void *arg,struct bte_pcb *pcb,u8 err));

s32 bte_registerdeviceasync(struct bte_pcb *pcb,struct bd_addr *bdaddr,s32 (*conn_cfm)(void *arg,struct bte_pcb *pcb,u8 err));

s32 bte_disconnect(struct bte_pcb *pcb);



s32 bte_inquiry(struct inquiry_info *info,u8 max_cnt,u8 flush);
s32 bte_inquiry_ex(struct inquiry_info_ex *info,u8 max_cnt,u8 flush);


s32 bte_senddata(struct bte_pcb *pcb,void *message,u16 len);
s32 bte_sendmessage(struct bte_pcb *pcb,void *message,u16 len);
s32 bte_sendmessageasync(struct bte_pcb *pcb,void *message,u16 len,s32 (*sent)(void *arg,struct bte_pcb *pcb,u8 err));
# 10 "d:/devkitPro/libogc/include/wiiuse/wiiuse.h" 2
# 109 "d:/devkitPro/libogc/include/wiiuse/wiiuse.h"
typedef enum ir_position_t {
 WIIUSE_IR_ABOVE,
 WIIUSE_IR_BELOW
} ir_position_t;
# 187 "d:/devkitPro/libogc/include/wiiuse/wiiuse.h"
typedef unsigned char ubyte;
typedef char sbyte;
typedef unsigned short uword;
typedef short sword;
typedef unsigned int uint;
typedef char sint;


struct wiimote_t;
struct vec3b_t;
struct orient_t;
struct gforce_t;


 typedef void (*wii_event_cb)(struct wiimote_t*, int event);
# 217 "d:/devkitPro/libogc/include/wiiuse/wiiuse.h"
typedef void (*wiiuse_data_cb)(struct wiimote_t* wm, ubyte* data, unsigned short len);

typedef enum data_req_s
{
 REQ_READY = 0,
 REQ_SENT,
 REQ_DONE
} data_req_s;





struct data_req_t {
 lwp_node node;
 ubyte data[48];
 unsigned int len;
 data_req_s state;
 wiiuse_data_cb cb;
 struct data_req_t *next;
};

typedef void (*cmd_blk_cb)(struct wiimote_t *wm,ubyte *data,uword len);

typedef enum cmd_blk_s
{
 CMD_READY = 0,
 CMD_SENT,
 CMD_DONE
} cmd_blk_s;

struct cmd_blk_t
{
 lwp_node node;

 ubyte data[48];
 uint len;

 cmd_blk_s state;
 cmd_blk_cb cb;

 struct cmd_blk_t *next;
};






typedef struct vec2b_t {
 ubyte x, y;
} vec2b_t;






typedef struct vec3b_t {
 ubyte x, y, z;
} vec3b_t;





typedef struct vec3w_t {
 uword x, y, z;
} vec3w_t;






typedef struct vec3f_t {
 float x, y, z;
} vec3f_t;
# 303 "d:/devkitPro/libogc/include/wiiuse/wiiuse.h"
typedef struct orient_t {
 float roll;
 float pitch;
 float yaw;

 float a_roll;
 float a_pitch;
} orient_t;






typedef struct gforce_t {
 float x, y, z;
} gforce_t;






typedef struct accel_t {
 struct vec3w_t cal_zero;
 struct vec3w_t cal_g;

 float st_roll;
 float st_pitch;
 float st_alpha;
} accel_t;






typedef struct ir_dot_t {
 ubyte visible;

 short rx;
 short ry;

 ubyte size;
} ir_dot_t;


typedef struct fdot_t {
 float x,y;
} fdot_t;

typedef struct sb_t {
 fdot_t dots[2];
 fdot_t acc_dots[2];
 fdot_t rot_dots[2];
 float angle;
 float off_angle;
 float score;
} sb_t;





typedef enum aspect_t {
 WIIUSE_ASPECT_4_3,
 WIIUSE_ASPECT_16_9
} aspect_t;






typedef struct ir_t {
 struct ir_dot_t dot[4];
 ubyte num_dots;

 int state;

 int raw_valid;
 sb_t sensorbar;
 float ax;
 float ay;
 float distance;
 float z;
 float angle;

 int smooth_valid;
 float sx;
 float sy;
 float error_cnt;
 float glitch_cnt;

 int valid;
 float x;
 float y;
 enum aspect_t aspect;
 enum ir_position_t pos;
 unsigned int vres[2];
 int offset[2];

} ir_t;
# 423 "d:/devkitPro/libogc/include/wiiuse/wiiuse.h"
typedef struct joystick_t {
 struct vec2b_t max;
 struct vec2b_t min;
 struct vec2b_t center;
 struct vec2b_t pos;

 float ang;
 float mag;
} joystick_t;






typedef struct nunchuk_t {
 struct accel_t accel_calib;
 struct joystick_t js;

 int* flags;

 ubyte btns;
 ubyte btns_last;
 ubyte btns_held;
 ubyte btns_released;

 struct vec3w_t accel;
 struct orient_t orient;
 struct gforce_t gforce;
} nunchuk_t;






typedef struct classic_ctrl_t {
 short btns;
 short btns_last;
 short btns_held;
 short btns_released;

 ubyte rs_raw;
 ubyte ls_raw;

 float r_shoulder;
 float l_shoulder;

 struct joystick_t ljs;
 struct joystick_t rjs;
} classic_ctrl_t;






typedef struct guitar_hero_3_t {
 short btns;
 short btns_last;
 short btns_held;
 short btns_released;

 ubyte wb_raw;
 float whammy_bar;

 ubyte tb_raw;
 int touch_bar;

 struct joystick_t js;
} guitar_hero_3_t;





typedef struct wii_board_t {
 float tl;
 float tr;
 float bl;
 float br;
 short rtl;
 short rtr;
 short rbl;
 short rbr;
 short ctl[3];
 short ctr[3];
 short cbl[3];
 short cbr[3];
 float x;
 float y;
} wii_board_t;

typedef struct motion_plus_t
{
 short rx, ry, rz;
 ubyte status;
 ubyte ext;
} motion_plus_t;





typedef struct expansion_t {
 int type;

 union {
  struct nunchuk_t nunchuk;
  struct classic_ctrl_t classic;
  struct guitar_hero_3_t gh3;
   struct wii_board_t wb;
  struct motion_plus_t mp;
 };
} expansion_t;






typedef enum win_bt_stack_t {
 WIIUSE_STACK_UNKNOWN,
 WIIUSE_STACK_MS,
 WIIUSE_STACK_BLUESOLEIL
} win_bt_stack_t;






typedef struct wiimote_state_t {
 unsigned short btns;

 struct ir_t ir;
 struct vec3w_t accel;
 struct expansion_t exp;
} wiimote_state_t;






typedef enum WIIUSE_EVENT_TYPE {
 WIIUSE_NONE = 0,
 WIIUSE_EVENT,
 WIIUSE_STATUS,
 WIIUSE_CONNECT,
 WIIUSE_DISCONNECT,
 WIIUSE_UNEXPECTED_DISCONNECT,
 WIIUSE_READ_DATA,
 WIIUSE_WRITE_DATA,
 WIIUSE_NUNCHUK_INSERTED,
 WIIUSE_NUNCHUK_REMOVED,
 WIIUSE_CLASSIC_CTRL_INSERTED,
 WIIUSE_CLASSIC_CTRL_REMOVED,
 WIIUSE_GUITAR_HERO_3_CTRL_INSERTED,
  WIIUSE_GUITAR_HERO_3_CTRL_REMOVED,
  WIIUSE_WII_BOARD_INSERTED,
  WIIUSE_WII_BOARD_REMOVED,
  WIIUSE_MOTION_PLUS_ACTIVATED,
  WIIUSE_MOTION_PLUS_REMOVED
} WIIUSE_EVENT_TYPE;





typedef struct wiimote_t {
 const int unid;
# 604 "d:/devkitPro/libogc/include/wiiuse/wiiuse.h"
  const lwp_queue cmdq;
  const struct bd_addr bdaddr;
  const char bdaddr_str[18];
  const struct bte_pcb *sock;
  const wii_event_cb event_cb;







 const int state;
 const ubyte leds;

 const ubyte battery_level;




 const int flags;

 const ubyte handshake_state;
 const ubyte expansion_state;

 const struct data_req_t* data_req;

 const struct cmd_blk_t *cmd_head;
 const struct cmd_blk_t *cmd_tail;

 const struct accel_t accel_calib;
 const struct expansion_t exp;

 const struct vec3w_t accel;
 const struct orient_t orient;
 const struct gforce_t gforce;

 const struct ir_t ir;

 const unsigned short btns;
 const unsigned short btns_last;
 const unsigned short btns_held;
 const unsigned short btns_released;

 const struct wiimote_state_t lstate;

 const WIIUSE_EVENT_TYPE event;
 const ubyte event_buf[32];

 const ubyte motion_plus_id[6];
} wiimote;






typedef struct wiimote_listen_t {
 const struct bd_addr bdaddr;
 const struct bte_pcb *sock;
 const struct wiimote_t *(*assign_cb)(struct bd_addr *bdaddr);
 const struct wiimote_t *wm;
} wiimote_listen;
# 694 "d:/devkitPro/libogc/include/wiiuse/wiiuse.h"
 extern const char* wiiuse_version();




 extern int wiiuse_register(struct wiimote_listen_t *wml, struct bd_addr *bdaddr, struct wiimote_t *(*assign_cb)(struct bd_addr *bdaddr));
 extern struct wiimote_t** wiiuse_init(int wiimotes, wii_event_cb event_cb);
 extern void wiiuse_sensorbar_enable(int enable);


 extern void wiiuse_disconnected(struct wiimote_t* wm);
 extern void wiiuse_cleanup(struct wiimote_t** wm, int wiimotes);
 extern void wiiuse_rumble(struct wiimote_t* wm, int status);
 extern void wiiuse_toggle_rumble(struct wiimote_t* wm);
 extern void wiiuse_set_leds(struct wiimote_t* wm, int leds,cmd_blk_cb cb);
 extern void wiiuse_motion_sensing(struct wiimote_t* wm, int status);
 extern int wiiuse_read_data(struct wiimote_t* wm, ubyte* buffer, unsigned int offset, unsigned short len, cmd_blk_cb cb);
 extern int wiiuse_write_data(struct wiimote_t *wm,unsigned int addr,ubyte *data,ubyte len,cmd_blk_cb cb);
 extern void wiiuse_status(struct wiimote_t *wm,cmd_blk_cb cb);
 extern struct wiimote_t* wiiuse_get_by_id(struct wiimote_t** wm, int wiimotes, int unid);
 extern int wiiuse_set_flags(struct wiimote_t* wm, int enable, int disable);
 extern float wiiuse_set_smooth_alpha(struct wiimote_t* wm, float alpha);
 extern void wiiuse_set_bluetooth_stack(struct wiimote_t** wm, int wiimotes, enum win_bt_stack_t type);
 extern void wiiuse_resync(struct wiimote_t* wm);
 extern void wiiuse_set_timeout(struct wiimote_t** wm, int wiimotes, ubyte normal_timeout, ubyte exp_timeout);
 extern int wiiuse_write_streamdata(struct wiimote_t *wm,ubyte *data,ubyte len,cmd_blk_cb cb);


 extern int wiiuse_find(struct wiimote_t** wm, int max_wiimotes, int timeout);
 extern int wiiuse_connect(struct wiimote_t** wm, int wiimotes);
 extern void wiiuse_disconnect(struct wiimote_t* wm);


 extern int wiiuse_poll(struct wiimote_t** wm, int wiimotes);


 extern void wiiuse_set_ir_mode(struct wiimote_t *wm);
 extern void wiiuse_set_ir(struct wiimote_t* wm, int status);
 extern void wiiuse_set_ir_vres(struct wiimote_t* wm, unsigned int x, unsigned int y);
 extern void wiiuse_set_ir_position(struct wiimote_t* wm, enum ir_position_t pos);
 extern void wiiuse_set_aspect_ratio(struct wiimote_t* wm, enum aspect_t aspect);
 extern void wiiuse_set_ir_sensitivity(struct wiimote_t* wm, int level);


 extern void wiiuse_set_motion_plus(struct wiimote_t *wm, int status);


 extern void wiiuse_set_speaker(struct wiimote_t *wm, int status);
# 36 "d:/devkitPro/libogc/include/wiiuse/wpad.h" 2



enum {
 WPAD_CHAN_ALL = -1,
 WPAD_CHAN_0,
 WPAD_CHAN_1,
 WPAD_CHAN_2,
 WPAD_CHAN_3,
 WPAD_BALANCE_BOARD,
 WPAD_MAX_WIIMOTES,
};
# 90 "d:/devkitPro/libogc/include/wiiuse/wpad.h"
enum {
 WPAD_EXP_NONE = 0,
 WPAD_EXP_NUNCHUK,
 WPAD_EXP_CLASSIC,
 WPAD_EXP_GUITARHERO3,
  WPAD_EXP_WIIBOARD,
 WPAD_EXP_UNKNOWN = 255
};

enum {
 WPAD_FMT_BTNS = 0,
 WPAD_FMT_BTNS_ACC,
 WPAD_FMT_BTNS_ACC_IR
};

enum {
 WPAD_STATE_DISABLED,
 WPAD_STATE_ENABLING,
 WPAD_STATE_ENABLED
};
# 143 "d:/devkitPro/libogc/include/wiiuse/wpad.h"
typedef struct _wpad_data
{
 s16 err;

 u32 data_present;
 u8 battery_level;

 u32 btns_h;
 u32 btns_l;
 u32 btns_d;
 u32 btns_u;

 struct ir_t ir;
 struct vec3w_t accel;
 struct orient_t orient;
 struct gforce_t gforce;
 struct expansion_t exp;
} WPADData;

typedef struct _wpad_encstatus
{
 u8 data[32];
}WPADEncStatus;

typedef void (*WPADDataCallback)(s32 chan, const WPADData *data);
typedef void (*WPADShutdownCallback)(s32 chan);

s32 WPAD_Init();
s32 WPAD_ControlSpeaker(s32 chan,s32 enable);
s32 WPAD_ReadEvent(s32 chan, WPADData *data);
s32 WPAD_DroppedEvents(s32 chan);
s32 WPAD_Flush(s32 chan);
s32 WPAD_ReadPending(s32 chan, WPADDataCallback datacb);
s32 WPAD_SetDataFormat(s32 chan, s32 fmt);
s32 WPAD_SetMotionPlus(s32 chan, u8 enable);
s32 WPAD_SetVRes(s32 chan,u32 xres,u32 yres);
s32 WPAD_GetStatus();
s32 WPAD_Probe(s32 chan,u32 *type);
s32 WPAD_SetEventBufs(s32 chan, WPADData *bufs, u32 cnt);
s32 WPAD_Disconnect(s32 chan);
s32 WPAD_IsSpeakerEnabled(s32 chan);
s32 WPAD_SendStreamData(s32 chan,void *buf,u32 len);
void WPAD_Shutdown();
void WPAD_SetIdleTimeout(u32 seconds);
void WPAD_SetPowerButtonCallback(WPADShutdownCallback cb);
void WPAD_SetBatteryDeadCallback(WPADShutdownCallback cb);
s32 WPAD_ScanPads();
s32 WPAD_Rumble(s32 chan, int status);
s32 WPAD_SetIdleThresholds(s32 chan, s32 btns, s32 ir, s32 accel, s32 js, s32 wb, s32 mp);
void WPAD_EncodeData(WPADEncStatus *info,u32 flag,const s16 *pcmSamples,s32 numSamples,u8 *encData);
WPADData *WPAD_Data(int chan);
u8 WPAD_BatteryLevel(int chan);
u32 WPAD_ButtonsUp(int chan);
u32 WPAD_ButtonsDown(int chan);
u32 WPAD_ButtonsHeld(int chan);
void WPAD_IR(int chan, struct ir_t *ir);
void WPAD_Orientation(int chan, struct orient_t *orient);
void WPAD_GForce(int chan, struct gforce_t *gforce);
void WPAD_Accel(int chan, struct vec3w_t *accel);
void WPAD_Expansion(int chan, struct expansion_t *exp);
# 9 "d:/devkitPro/0wn/strobe-alarm-clock-grrlib/source/strobe.c" 2
# 1 "d:/devkitPro/0wn/strobe-alarm-clock-grrlib/source/wpad_leds.h" 1





s32 WPAD_SetLeds(s32 chan, int leds);
# 10 "d:/devkitPro/0wn/strobe-alarm-clock-grrlib/source/strobe.c" 2
# 1 "d:/devkitPro/0wn/strobe-alarm-clock-grrlib/source/fonts.h" 1
# 9 "d:/devkitPro/0wn/strobe-alarm-clock-grrlib/source/fonts.h"
const unsigned char fonts[] = {
 0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52,
 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x08, 0x02, 0x00, 0x00, 0x00, 0x7B, 0x1A, 0x43,
 0xAD, 0x00, 0x00, 0x00, 0x01, 0x73, 0x52, 0x47, 0x42, 0x00, 0xAE, 0xCE, 0x1C, 0xE9, 0x00, 0x00,
 0x00, 0x04, 0x67, 0x41, 0x4D, 0x41, 0x00, 0x00, 0xB1, 0x8F, 0x0B, 0xFC, 0x61, 0x05, 0x00, 0x00,
 0x00, 0x20, 0x63, 0x48, 0x52, 0x4D, 0x00, 0x00, 0x7A, 0x26, 0x00, 0x00, 0x80, 0x84, 0x00, 0x00,
 0xFA, 0x00, 0x00, 0x00, 0x80, 0xE8, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00, 0xEA, 0x60, 0x00, 0x00,
 0x3A, 0x98, 0x00, 0x00, 0x17, 0x70, 0x9C, 0xBA, 0x51, 0x3C, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48,
 0x59, 0x73, 0x00, 0x00, 0x0E, 0xC4, 0x00, 0x00, 0x0E, 0xC4, 0x01, 0x95, 0x2B, 0x0E, 0x1B, 0x00,
 0x00, 0x39, 0x49, 0x49, 0x44, 0x41, 0x54, 0x78, 0x5E, 0xED, 0x9D, 0xEB, 0x9A, 0xD8, 0xB6, 0xAD,
 0x45, 0xCF, 0xFB, 0xBF, 0x74, 0x8F, 0x1D, 0xA5, 0xAA, 0x46, 0x17, 0x62, 0x83, 0x00, 0x28, 0x8A,
 0xB3, 0xFC, 0xA3, 0x9F, 0x93, 0x6C, 0x82, 0xE0, 0xC2, 0x4D, 0x94, 0xEC, 0xE9, 0xFF, 0xFD, 0x1F,
 0xBF, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x27, 0x02, 0xFF, 0x91, 0x7F, 0xF5, 0xA1, 0x93,
 0xCD, 0xFF, 0x07, 0xFB, 0x6D, 0x56, 0xF0, 0xF9, 0x22, 0x9F, 0xBE, 0xA8, 0xCD, 0xB3, 0xEA, 0xEB,
 0xF5, 0x5B, 0x4D, 0xF2, 0xF3, 0x7C, 0xFE, 0x1C, 0x40, 0x61, 0x24, 0xCA, 0xAE, 0xA6, 0xC4, 0x85,
 0xA2, 0x0C, 0xFB, 0x4A, 0xB0, 0x8E, 0x1A, 0x11, 0xAC, 0x28, 0x83, 0xBF, 0x97, 0xFF, 0xD7, 0xF5,
 0x62, 0x62, 0x88, 0xB2, 0xF1, 0xF9, 0x53, 0xCD, 0x5F, 0x3C, 0xB8, 0x28, 0x7B, 0x81, 0x8F, 0xE8,
 0x99, 0x28, 0x1B, 0x7F, 0x00, 0xD1, 0x31, 0x51, 0x86, 0xFF, 0xDE, 0x82, 0x11, 0xC1, 0x8A, 0xB2,
 0xF5, 0xF8, 0x7B, 0x79, 0xCE, 0xA6, 0x17, 0x03, 0x27, 0xCA, 0xC6, 0xC7, 0xB7, 0x9A, 0xA7, 0x78,
 0x70, 0x51, 0xF6, 0x02, 0x1F, 0xD1, 0x33, 0x51, 0x36, 0xFE, 0x00, 0xA2, 0x63, 0xA2, 0x0C, 0xFF,
 0xBD, 0x05, 0x23, 0x82, 0x15, 0x65, 0xEB, 0xF1, 0xF7, 0xF2, 0x9C, 0x4D, 0x2F, 0x06, 0x4E, 0x94,
 0x8D, 0x8F, 0x6F, 0x35, 0x4F, 0xF1, 0xE0, 0xA2, 0xEC, 0x05, 0x3E, 0xA2, 0x67, 0xA2, 0x6C, 0xFC,
 0x01, 0x44, 0xC7, 0x44, 0x19, 0xFE, 0x7B, 0x0B, 0x46, 0x04, 0x2B, 0xCA, 0xD6, 0xE3, 0xEF, 0xE5,
 0x39, 0x9B, 0x5E, 0x0C, 0x9C, 0x28, 0x1B, 0x1F, 0xDF, 0x6A, 0x9E, 0xE2, 0xC1, 0x45, 0xD9, 0x0B,
 0x7C, 0x44, 0xCF, 0x44, 0xD9, 0xF8, 0x03, 0x88, 0x8E, 0x89, 0x32, 0xFC, 0xF7, 0x16, 0x8C, 0x08,
 0x56, 0x94, 0xAD, 0xC7, 0xDF, 0xCB, 0x73, 0x36, 0xBD, 0x18, 0x38, 0x51, 0x36, 0x3E, 0xBE, 0xD5,
 0x3C, 0xC5, 0x83, 0x8B, 0xB2, 0x17, 0xF8, 0x88, 0x9E, 0x89, 0xB2, 0xF1, 0x07, 0x10, 0x1D, 0x13,
 0x65, 0xF8, 0xEF, 0x2D, 0x18, 0x11, 0xAC, 0x28, 0x5B, 0x8F, 0xBF, 0x97, 0xE7, 0x6C, 0x7A, 0x31,
 0x70, 0xA2, 0x6C, 0x7C, 0x7C, 0xAB, 0x79, 0x8A, 0x07, 0x17, 0x65, 0x2F, 0xF0, 0x11, 0x3D, 0x13,
 0x65, 0xE3, 0x0F, 0x20, 0x3A, 0x26, 0xCA, 0xF0, 0xDF, 0x5B, 0x30, 0x22, 0x58, 0x51, 0xB6, 0x1E,
 0x7F, 0x2F, 0xCF, 0xD9, 0xF4, 0x62, 0xE0, 0x44, 0xD9, 0xF8, 0xF8, 0x56, 0xF3, 0x14, 0x0F, 0x2E,
 0xCA, 0x5E, 0xE0, 0x23, 0x7A, 0x26, 0xCA, 0xC6, 0x1F, 0x40, 0x74, 0x4C, 0x94, 0xE1, 0xBF, 0xB7,
 0x60, 0x44, 0xB0, 0xA2, 0x6C, 0x3D, 0xFE, 0x5E, 0x9E, 0xB3, 0xE9, 0xC5, 0xC0, 0x89, 0xB2, 0xF1,
 0xF1, 0xAD, 0xE6, 0x29, 0x1E, 0x5C, 0x94, 0xBD, 0xC0, 0x47, 0xF4, 0x4C, 0x94, 0x8D, 0x3F, 0x80,
 0xE8, 0x98, 0x28, 0xC3, 0x7F, 0x6F, 0xC1, 0x88, 0x60, 0x45, 0xD9, 0x7A, 0xFC, 0xBD, 0x3C, 0x67,
 0xD3, 0x8B, 0x81, 0x13, 0x65, 0xE3, 0xE3, 0x5B, 0xCD, 0x53, 0x3C, 0xB8, 0x28, 0x7B, 0x81, 0x8F,
 0xE8, 0x99, 0x28, 0x1B, 0x7F, 0x00, 0xD1, 0x31, 0x51, 0x86, 0xFF, 0xDE, 0x82, 0x11, 0xC1, 0x8A,
 0xB2, 0xF5, 0xF8, 0x7B, 0x79, 0xCE, 0xA6, 0x17, 0x03, 0x27, 0xCA, 0xC6, 0xC7, 0xB7, 0x9A, 0xA7,
 0x78, 0x70, 0x51, 0xF6, 0x02, 0x1F, 0xD1, 0x33, 0x51, 0x36, 0xFE, 0x00, 0xA2, 0x63, 0xA2, 0x0C,
 0xFF, 0xBD, 0x05, 0x23, 0x82, 0x15, 0x65, 0xEB, 0xF1, 0xF7, 0xF2, 0x9C, 0x4D, 0x2F, 0x06, 0x4E,
 0x94, 0x8D, 0x8F, 0x6F, 0x35, 0x4F, 0xF1, 0xE0, 0xA2, 0xEC, 0x05, 0x3E, 0xA2, 0x67, 0xA2, 0x6C,
 0xFC, 0x01, 0x44, 0xC7, 0x44, 0x19, 0xFE, 0x7B, 0x0B, 0x46, 0x04, 0x2B, 0xCA, 0xD6, 0xE3, 0xEF,
 0xE5, 0x39, 0x9B, 0x5E, 0x0C, 0x9C, 0x28, 0x1B, 0x1F, 0xDF, 0x6A, 0x9E, 0xE2, 0xC1, 0x45, 0xD9,
 0x0B, 0x7C, 0x44, 0xCF, 0x44, 0xD9, 0xF8, 0x03, 0x88, 0x8E, 0x89, 0x32, 0xFC, 0xF7, 0x16, 0x8C,
 0x08, 0x56, 0x94, 0xAD, 0xC7, 0xDF, 0xCB, 0x73, 0x36, 0xBD, 0x18, 0x38, 0x51, 0x36, 0x3E, 0xBE,
 0xD5, 0x3C, 0xC5, 0x83, 0x8B, 0xB2, 0x17, 0xF8, 0x88, 0x9E, 0x89, 0xB2, 0xF1, 0x07, 0x10, 0x1D,
 0x13, 0x65, 0xF8, 0xEF, 0x2D, 0x18, 0x11, 0xAC, 0x28, 0x5B, 0x8F, 0xBF, 0x97, 0xE7, 0x6C, 0x7A,
 0x31, 0x70, 0xA2, 0x6C, 0x7C, 0x7C, 0xAB, 0x79, 0x8A, 0x07, 0x17, 0x65, 0x2F, 0xF0, 0x11, 0x3D,
 0x13, 0x65, 0xE3, 0x0F, 0x20, 0x3A, 0x26, 0xCA, 0xF0, 0xDF, 0x5B, 0x30, 0x22, 0x58, 0x51, 0xB6,
 0x1E, 0x7F, 0x2F, 0xCF, 0xD9, 0xF4, 0x62, 0xE0, 0x44, 0xD9, 0xF8, 0xF8, 0x56, 0xF3, 0x14, 0x0F,
 0x2E, 0xCA, 0x5E, 0xE0, 0x23, 0x7A, 0x26, 0xCA, 0xC6, 0x1F, 0x40, 0x74, 0x4C, 0x94, 0xE1, 0xBF,
 0xB7, 0x60, 0x44, 0xB0, 0xA2, 0x6C, 0x3D, 0xFE, 0x5E, 0x9E, 0xB3, 0xE9, 0xC5, 0xC0, 0x89, 0xB2,
 0xF1, 0xF1, 0xAD, 0xE6, 0x29, 0x1E, 0x5C, 0x94, 0xBD, 0xC0, 0x47, 0xF4, 0x4C, 0x94, 0x8D, 0x3F,
 0x80, 0xE8, 0x98, 0x28, 0xC3, 0x7F, 0x6F, 0xC1, 0x88, 0x60, 0x45, 0xD9, 0x7A, 0xFC, 0xBD, 0x3C,
 0x67, 0xD3, 0x8B, 0x81, 0x13, 0x65, 0xE3, 0xE3, 0x5B, 0xCD, 0x53, 0x3C, 0xB8, 0x28, 0x7B, 0x81,
 0x8F, 0xE8, 0x99, 0x28, 0x1B, 0x7F, 0x00, 0xD1, 0x31, 0x51, 0x86, 0xFF, 0xDE, 0x82, 0x11, 0xC1,
 0x8A, 0xB2, 0xF5, 0xF8, 0x7B, 0x79, 0xCE, 0xA6, 0x17, 0x03, 0x27, 0xCA, 0xC6, 0xC7, 0xB7, 0x9A,
 0xA7, 0x78, 0x70, 0x51, 0xF6, 0x02, 0x1F, 0xD1, 0x33, 0x51, 0x36, 0xFE, 0x00, 0xA2, 0x63, 0xA2,
 0x0C, 0xFF, 0xBD, 0x05, 0x23, 0x82, 0x15, 0x65, 0xEB, 0xF1, 0xF7, 0xF2, 0x9C, 0x4D, 0x2F, 0x06,
 0x4E, 0x94, 0x8D, 0x8F, 0x6F, 0x35, 0x4F, 0xF1, 0xE0, 0xA2, 0xEC, 0x05, 0x3E, 0xA2, 0x67, 0xA2,
 0x6C, 0xFC, 0x01, 0x44, 0xC7, 0x44, 0x19, 0xFE, 0x7B, 0x0B, 0x46, 0x04, 0x2B, 0xCA, 0xD6, 0xE3,
 0xEF, 0xE5, 0x39, 0x9B, 0x5E, 0x0C, 0x9C, 0x28, 0x1B, 0x1F, 0xDF, 0x6A, 0x9E, 0xE2, 0xC1, 0x45,
 0xD9, 0x0B, 0x7C, 0x44, 0xCF, 0x44, 0xD9, 0xF8, 0x03, 0x88, 0x8E, 0x89, 0x32, 0xFC, 0xF7, 0x16,
 0x8C, 0x08, 0x56, 0x94, 0xAD, 0xC7, 0xDF, 0xCB, 0x73, 0x36, 0xBD, 0x18, 0x38, 0x51, 0x36, 0x3E,
 0xBE, 0xD5, 0x3C, 0xC5, 0x83, 0x8B, 0xB2, 0x17, 0xF8, 0x88, 0x9E, 0x89, 0xB2, 0xF1, 0x07, 0x10,
 0x1D, 0x13, 0x65, 0xF8, 0xEF, 0x2D, 0x18, 0x11, 0xAC, 0x28, 0x5B, 0x8F, 0xBF, 0x97, 0xE7, 0x6C,
 0x7A, 0x31, 0x70, 0xA2, 0x6C, 0x7C, 0x7C, 0xAB, 0x79, 0x8A, 0x07, 0x17, 0x65, 0x2F, 0xF0, 0x11,
 0x3D, 0x13, 0x65, 0xE3, 0x0F, 0x20, 0x3A, 0x26, 0xCA, 0xF0, 0xDF, 0x5B, 0x30, 0x22, 0x58, 0x51,
 0xB6, 0x1E, 0x7F, 0x2F, 0xCF, 0xD9, 0xF4, 0x62, 0xE0, 0x44, 0xD9, 0xF8, 0xF8, 0x56, 0xF3, 0x14,
 0x0F, 0x2E, 0xCA, 0x5E, 0xE0, 0x23, 0x7A, 0x26, 0xCA, 0xC6, 0x1F, 0x40, 0x74, 0x4C, 0x94, 0xE1,
 0xBF, 0xB7, 0x60, 0x44, 0xB0, 0xA2, 0x6C, 0x3D, 0xFE, 0x5E, 0x9E, 0xB3, 0xE9, 0xC5, 0xC0, 0x89,
 0xB2, 0xF1, 0xF1, 0xAD, 0xE6, 0x29, 0x1E, 0x5C, 0x94, 0xBD, 0xC0, 0xE7, 0x8F, 0x67, 0xE2, 0xAF,
 0x3E, 0x94, 0xA2, 0xF1, 0x08, 0x20, 0x71, 0x0B, 0xFC, 0x6F, 0x83, 0x82, 0x4F, 0x05, 0x9F, 0x3E,
 0xAA, 0xF3, 0xAC, 0x12, 0x8B, 0x6B, 0xDA, 0xFA, 0xAD, 0x26, 0x09, 0x9F, 0x6A, 0xC2, 0xD8, 0x87,
 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01,
 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10,
 0x80, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x0C, 0x02,
 0x5F, 0xFF, 0x63, 0x4C, 0xF8, 0xDF, 0x0E, 0x30, 0x7C, 0xE0, 0xB3, 0xE5, 0x40, 0x5F, 0x2B, 0x24,
 0x7F, 0xD6, 0xCE, 0x9F, 0xFF, 0x13, 0x33, 0x43, 0x94, 0x5D, 0x61, 0x89, 0x0B, 0x45, 0x19, 0xF6,
 0xBD, 0x65, 0x2C, 0x82, 0x15, 0x65, 0xF0, 0x87, 0xFF, 0x2D, 0x01, 0xF2, 0xC7, 0x9C, 0x13, 0xDE,
 0xCC, 0xD9, 0xF4, 0x22, 0x58, 0x51, 0x76, 0xE3, 0x83, 0xB8, 0x52, 0x94, 0xD1, 0x20, 0xBC, 0x61,
 0x16, 0xC1, 0x8A, 0x32, 0xF8, 0xC3, 0x9F, 0x06, 0x7D, 0x24, 0x20, 0x16, 0x8E, 0x28, 0x5B, 0xAF,
 0xBE, 0xCA, 0x27, 0x8C, 0x48, 0x56, 0x94, 0xAD, 0x17, 0x00, 0xF1, 0xE0, 0xA2, 0x0C, 0x3E, 0x0C,
 0x00, 0x06, 0x00, 0x03, 0xC0, 0x51, 0x05, 0x62, 0x67, 0x11, 0x65, 0x34, 0x20, 0x07, 0xFA, 0x21,
 0x57, 0x3C, 0x31, 0x70, 0xA2, 0x8C, 0xF8, 0x12, 0x5F, 0x06, 0xCC, 0x4A, 0x03, 0x86, 0x1B, 0x80,
 0x51, 0xD1, 0x62, 0x67, 0x14, 0x65, 0x34, 0x50, 0x1A, 0x28, 0x0D, 0x74, 0xA5, 0x06, 0x2A, 0x16,
 0xBE, 0x28, 0x1B, 0xDF, 0x1F, 0x18, 0x00, 0x0C, 0x00, 0xC7, 0xB7, 0xA6, 0xF1, 0x09, 0x2A, 0x56,
 0x8E, 0x28, 0xC3, 0x7F, 0x06, 0x30, 0x03, 0xF8, 0x07, 0x01, 0xB1, 0x72, 0x44, 0x19, 0x05, 0x46,
 0x81, 0x51, 0x60, 0x3C, 0xE1, 0xEA, 0x55, 0x20, 0x36, 0x16, 0x51, 0x46, 0xFF, 0xD1, 0xC9, 0xFF,
 0xAB, 0x14, 0xC9, 0x8A, 0x32, 0x02, 0xE0, 0x0D, 0x80, 0x08, 0x56, 0x94, 0xC1, 0x1F, 0xFE, 0x0C,
 0x60, 0x06, 0xB0, 0xA3, 0x0A, 0xC4, 0xCE, 0x22, 0xCA, 0x68, 0x40, 0x0E, 0xF4, 0xFF, 0x48, 0x45,
 0xB0, 0xA2, 0x0C, 0xFE, 0xF0, 0x67, 0x00, 0x30, 0x00, 0x1C, 0x55, 0x20, 0x76, 0x16, 0x51, 0x46,
 0x03, 0x72, 0xA0, 0x67, 0x00, 0x08, 0xB0, 0xC4, 0xC4, 0x13, 0x65, 0xE4, 0xA7, 0x80, 0x9C, 0x57,
 0xC4, 0x0E, 0x48, 0x62, 0xE2, 0x89, 0xB2, 0xF1, 0xF9, 0xC9, 0x13, 0xA8, 0x11, 0x6C, 0x31, 0x72,
 0xA2, 0x6C, 0x7C, 0x80, 0x45, 0xC7, 0x44, 0x19, 0xFE, 0x3B, 0x7A, 0x03, 0x03, 0x5E, 0x80, 0x25,
 0x26, 0x9E, 0x28, 0x23, 0x3F, 0x05, 0xE4, 0x3F, 0x25, 0x22, 0x59, 0x51, 0x46, 0x00, 0xBC, 0x01,
 0x10, 0xC1, 0x8A, 0x32, 0xF8, 0xC3, 0x9F, 0x57, 0x40, 0xBC, 0x02, 0x72, 0x54, 0x81, 0xD8, 0x59,
 0x44, 0x19, 0x0D, 0xC8, 0x81, 0x9E, 0x27, 0x44, 0x01, 0x96, 0x98, 0x78, 0xA2, 0x8C, 0xFC, 0x14,
 0x90, 0xF3, 0x0A, 0xC8, 0x01, 0x49, 0x4C, 0x3C, 0x51, 0x36, 0x3E, 0x3F, 0x79, 0x05, 0xC4, 0x2B,
 0xA0, 0xBF, 0x04, 0xA6, 0x4D, 0x50, 0xD1, 0x31, 0x51, 0x36, 0xBE, 0xC0, 0x44, 0xC7, 0x44, 0x19,
 0xFE, 0x3B, 0x7A, 0x33, 0x0F, 0x58, 0x0A, 0x2C, 0x31, 0xF3, 0x44, 0x19, 0x09, 0xAA, 0x30, 0xE7,
 0x8A, 0xAA, 0x53, 0x12, 0x13, 0x4F, 0x94, 0x91, 0x9F, 0x3A, 0xF9, 0x4D, 0x29, 0x82, 0x15, 0x65,
 0xF0, 0x9F, 0x8D, 0x3F, 0x01, 0xE6, 0x06, 0xE0, 0xA8, 0x73, 0x0A, 0x78, 0xB6, 0x02, 0x16, 0x3B,
 0xAF, 0x28, 0x23, 0xBE, 0xBF, 0x2D, 0xBE, 0x0C, 0x00, 0x06, 0x00, 0x03, 0xC0, 0xAE, 0x7A, 0x1A,
 0x68, 0x9B, 0x11, 0x7C, 0x3E, 0xCA, 0x87, 0x01, 0xC0, 0x00, 0x60, 0x00, 0x30, 0x00, 0x1E, 0x09,
 0x88, 0x9D, 0x5D, 0x94, 0x71, 0xC3, 0xB0, 0x53, 0xED, 0xA7, 0x42, 0x04, 0x2B, 0xCA, 0x6E, 0x76,
 0x17, 0x57, 0x8A, 0x32, 0x02, 0x3C, 0x5B, 0x80, 0xC5, 0xC0, 0x89, 0x32, 0xE2, 0x4B, 0x7C, 0x6F,
 0x09, 0x90, 0x3F, 0xDC, 0x00, 0xEE, 0x09, 0x88, 0x99, 0x21, 0xCA, 0x68, 0x40, 0x34, 0x20, 0x1A,
 0xD0, 0x91, 0x80, 0x58, 0x38, 0xA2, 0x8C, 0xFA, 0xFA, 0x6D, 0xF5, 0xC5, 0x2B, 0x20, 0x5E, 0x01,
 0xF1, 0x0A, 0xC8, 0xAE, 0x7A, 0x1A, 0xE8, 0x47, 0x9F, 0x70, 0xC5, 0xC0, 0x89, 0xB2, 0xF5, 0x06,
 0x24, 0x03, 0x80, 0x01, 0xC0, 0x00, 0x60, 0x00, 0xF0, 0x0D, 0xE0, 0x3F, 0x76, 0x12, 0xDC, 0x29,
 0xC4, 0xC9, 0x21, 0xCA, 0xC6, 0x0F, 0x18, 0x06, 0x00, 0x03, 0x80, 0x01, 0x60, 0xD7, 0xFE, 0xB4,
 0x05, 0x2C, 0x3A, 0x26, 0xCA, 0xC6, 0x37, 0x20, 0xD1, 0x31, 0x51, 0x86, 0xFF, 0x76, 0x2A, 0x9F,
 0x14, 0x22, 0x59, 0x51, 0x46, 0x00, 0xBC, 0x01, 0x10, 0xC1, 0x8A, 0x32, 0xF8, 0xC3, 0x9F, 0x6F,
 0x24, 0x7C, 0x23, 0x71, 0x54, 0xC1, 0x9F, 0xCE, 0x22, 0xFE, 0x72, 0x18, 0x3D, 0x48, 0x45, 0xE3,
 0x91, 0x06, 0x27, 0x6E, 0x81, 0xFF, 0x6D, 0x50, 0xF0, 0x81, 0xCF, 0xED, 0x03, 0x04, 0xF5, 0xD5,
 0x28, 0x0D, 0x11, 0xCE, 0xB4, 0xFD, 0xAD, 0xAF, 0xEA, 0x59, 0x05, 0x01, 0x08, 0x40, 0x00, 0x02,
 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20,
 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00,
 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04,
 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0xF0, 0x87, 0x40, 0xF7,
 0xDF, 0x19, 0x81, 0x1E, 0x04, 0x20, 0x00, 0x01, 0x08, 0x7C, 0x98, 0xC0, 0xFE, 0x17, 0x0B, 0x3F,
 0x7C, 0x06, 0x5C, 0x87, 0x00, 0x04, 0x20, 0x00, 0x81, 0x0E, 0x02, 0x2F, 0x0E, 0x00, 0x6E, 0x1E,
 0x1D, 0xF1, 0x62, 0x09, 0x04, 0x20, 0x00, 0x81, 0x0F, 0x13, 0x38, 0xFE, 0x30, 0x93, 0x0F, 0x1F,
 0x03, 0xD7, 0x21, 0xF0, 0xFB, 0x08, 0xBC, 0xF8, 0xBC, 0x18, 0x85, 0x9D, 0xFE, 0xBC, 0x79, 0x64,
 0xF1, 0x45, 0x2E, 0x8D, 0x9F, 0x2A, 0x15, 0x61, 0x6D, 0xF6, 0xF7, 0x2C, 0x56, 0x57, 0xFF, 0x23,
 0x6E, 0x3F, 0xAD, 0xCD, 0xF2, 0xB6, 0xE1, 0x9B, 0x49, 0xAC, 0xEF, 0x5C, 0x45, 0x66, 0xAF, 0xCE,
 0xA4, 0x57, 0x56, 0xDF, 0x79, 0x59, 0x55, 0x4D, 0x60, 0x40, 0x2D, 0x54, 0x1D, 0x61, 0x73, 0x3D,
 0xD7, 0xFA, 0xA7, 0x07, 0x80, 0xF9, 0x33, 0x05, 0xBB, 0x59, 0xB5, 0xFB, 0x4E, 0x4A, 0x57, 0x2A,
 0x1A, 0x5D, 0xB7, 0x47, 0xAE, 0x4E, 0xFA, 0x14, 0x20, 0xE6, 0xF4, 0x4A, 0x4F, 0xFE, 0x7D, 0xC7,
 0x6A, 0x3E, 0xDD, 0x79, 0xC8, 0xC2, 0x5C, 0x02, 0x1F, 0x0E, 0x74, 0x91, 0xEB, 0xD5, 0x03, 0xE0,
 0x34, 0xB4, 0x12, 0x67, 0xD8, 0xD6, 0x0E, 0xD2, 0xDB, 0xE8, 0xEE, 0xE1, 0xF5, 0x37, 0x89, 0xFD,
 0x22, 0xDD, 0xED, 0x76, 0x9D, 0x14, 0x25, 0xCF, 0xB6, 0xE9, 0x31, 0x10, 0xB9, 0xE5, 0x7A, 0x02,
 0xBE, 0xEF, 0x95, 0xBE, 0x4B, 0x29, 0x9F, 0x74, 0x6F, 0x31, 0xD8, 0x47, 0xA0, 0xF4, 0x31, 0xA5,
 0xCF, 0x25, 0xC7, 0xAA, 0xA2, 0x1C, 0x2D, 0x1D, 0x00, 0x57, 0x9F, 0xB3, 0x4E, 0x91, 0x65, 0xE7,
 0xF6, 0x55, 0xC0, 0x71, 0x4A, 0x5D, 0x93, 0x26, 0x65, 0xEB, 0x14, 0x23, 0x7A, 0xF6, 0xD4, 0x6D,
 0x57, 0x67, 0xD9, 0x0C, 0x8D, 0x7E, 0x7C, 0xD3, 0xD4, 0x6D, 0x15, 0xD4, 0x5D, 0x38, 0x22, 0x9E,
 0xB3, 0xB6, 0x9B, 0xC0, 0xC8, 0x5C, 0xED, 0x76, 0xF2, 0x71, 0x61, 0x9D, 0xF7, 0xC7, 0x44, 0xCF,
 0x4D, 0xFA, 0xF5, 0x06, 0x40, 0xD6, 0x43, 0x84, 0x19, 0xCD, 0xDC, 0x40, 0xAC, 0xF1, 0xEC, 0x6C,
 0x42, 0xD3, 0xAB, 0xEE, 0x76, 0xAE, 0x5F, 0x2F, 0x94, 0xBA, 0x41, 0x53, 0x99, 0x1E, 0x50, 0x73,
 0x47, 0x04, 0x47, 0x02, 0x59, 0x95, 0xFB, 0x1A, 0xD5, 0xC4, 0xEC, 0x1F, 0x76, 0x86, 0x85, 0x07,
 0x40, 0x90, 0x61, 0x3B, 0x9A, 0x1F, 0x8A, 0xF5, 0x48, 0x57, 0x13, 0xF7, 0x3A, 0xB6, 0x83, 0xAD,
 0x35, 0xEF, 0xFF, 0x9B, 0xB8, 0xCB, 0xE9, 0x15, 0x16, 0x33, 0x20, 0x58, 0x35, 0x91, 0xE5, 0x15,
 0x61, 0x8D, 0xF8, 0xE3, 0x5E, 0xFB, 0xAD, 0x03, 0x6C, 0xDE, 0x1E, 0x1F, 0x3C, 0x4F, 0xFF, 0x66,
 0xFF, 0x47, 0x37, 0x88, 0x7F, 0x16, 0x94, 0xD2, 0x38, 0xF6, 0x82, 0x7D, 0xAF, 0xD3, 0xE3, 0x61,
 0x9F, 0xDB, 0x62, 0x47, 0x28, 0x3D, 0x5D, 0xD0, 0xF3, 0xD3, 0xF2, 0x91, 0xAE, 0xA6, 0xEF, 0x75,
 0x32, 0x98, 0x6E, 0x5F, 0x0C, 0x77, 0x6E, 0x44, 0xB0, 0x76, 0x25, 0x50, 0x17, 0xD9, 0x71, 0xB4,
 0x3F, 0x74, 0x86, 0xDB, 0xFB, 0xF5, 0xD1, 0xFF, 0xF8, 0x75, 0xAC, 0x9A, 0xC6, 0x93, 0x87, 0xC1,
 0xB9, 0x25, 0x76, 0x84, 0xEA, 0xD3, 0x25, 0x66, 0xED, 0x48, 0x57, 0xAB, 0xF7, 0xAA, 0xB3, 0x5F,
 0x67, 0x39, 0x31, 0x94, 0x0B, 0x9B, 0x5A, 0x84, 0xFF, 0x87, 0xAE, 0x90, 0xC7, 0x06, 0x7A, 0x6A,
 0xA6, 0xC7, 0xE7, 0xEB, 0xEE, 0x13, 0x3D, 0xD9, 0xCF, 0x6A, 0xD0, 0xD5, 0x97, 0x8C, 0xDB, 0x77,
 0x0E, 0xA7, 0x19, 0x79, 0xBC, 0x3F, 0x4D, 0x5B, 0x9C, 0x89, 0xC0, 0x95, 0x33, 0x76, 0x27, 0xCC,
 0xAD, 0xF1, 0x5B, 0xE0, 0x59, 0xCD, 0xE2, 0x9A, 0xF6, 0xA7, 0xA4, 0x55, 0xCE, 0xFB, 0xA2, 0xA6,
 0x5D, 0x62, 0xB9, 0x81, 0x18, 0x70, 0xCC, 0xCF, 0x39, 0x3C, 0x80, 0xC9, 0x88, 0x2D, 0x4E, 0x0D,
 0x22, 0xAB, 0xBA, 0x36, 0xD7, 0x1B, 0x39, 0x3A, 0xE2, 0x6C, 0xE1, 0x3D, 0xDA, 0xFE, 0xE7, 0xB2,
 0x0A, 0x3B, 0x7B, 0x6F, 0xE0, 0xA3, 0x75, 0x75, 0xBD, 0xE1, 0x9D, 0x9E, 0x4B, 0x82, 0x83, 0xED,
 0x1A, 0xD9, 0xDB, 0x74, 0x2D, 0x0A, 0x4A, 0xDC, 0xAC, 0xD9, 0xFD, 0x83, 0x7C, 0xE2, 0x1E, 0xFE,
 0x46, 0x0B, 0x9F, 0x2B, 0xB6, 0x6B, 0x0B, 0xCB, 0x6D, 0x6A, 0xED, 0x7B, 0x46, 0x22, 0xAE, 0xA7,
 0x83, 0x44, 0xB2, 0xF0, 0xB6, 0xE3, 0xEC, 0x75, 0xB5, 0xFF, 0xD7, 0xC8, 0x16, 0x03, 0xD6, 0x0E,
 0x6E, 0x04, 0x59, 0x31, 0x7D, 0x7A, 0x3C, 0x3F, 0xB5, 0xE9, 0x08, 0xC0, 0xEB, 0x16, 0x89, 0xC6,
 0x23, 0x8E, 0x89, 0x6B, 0xCD, 0x19, 0x20, 0xDA, 0x79, 0x51, 0x96, 0xDB, 0x6D, 0x5E, 0x3C, 0xC8,
 0x8F, 0xA7, 0xDD, 0x97, 0xFD, 0x70, 0x6E, 0x5F, 0x7A, 0x03, 0x78, 0xF2, 0x25, 0x37, 0xF0, 0xB7,
 0x4F, 0x8B, 0xC1, 0x2D, 0xDA, 0xCB, 0x83, 0xC6, 0x9D, 0x21, 0x0A, 0xC9, 0x47, 0xBA, 0x5A, 0xB7,
 0x57, 0x9D, 0xE5, 0xD3, 0x55, 0x35, 0xC4, 0x9A, 0xC5, 0x4E, 0x02, 0xD5, 0x61, 0x75, 0xBA, 0x13,
 0x93, 0x7F, 0xEB, 0x30, 0xED, 0x27, 0xAC, 0xE3, 0xA3, 0x50, 0x8C, 0xCA, 0xE3, 0x7B, 0x89, 0xC4,
 0x27, 0xD3, 0x5B, 0xF2, 0xD7, 0xA9, 0xE0, 0x3A, 0x08, 0x03, 0xC0, 0x85, 0xAB, 0xBA, 0x8D, 0x56,
 0x17, 0x57, 0xB5, 0xFD, 0x0E, 0x98, 0xCB, 0x2F, 0x09, 0x56, 0xE8, 0x74, 0x7C, 0x3E, 0x94, 0x43,
 0x4F, 0xDD, 0xFF, 0xF8, 0x7E, 0xA3, 0xF4, 0x38, 0x89, 0xC6, 0x6F, 0xCF, 0x72, 0x4C, 0x8E, 0xBE,
 0x49, 0xC3, 0x00, 0xE8, 0x28, 0xB0, 0xC4, 0xB0, 0x9E, 0x76, 0xAF, 0xB3, 0x5C, 0x3D, 0xBA, 0x3A,
 0x30, 0xFE, 0x92, 0x25, 0xD5, 0x31, 0x1D, 0x8D, 0xF1, 0x5B, 0xE7, 0x39, 0xF6, 0xFA, 0x63, 0x0D,
 0x6C, 0xCF, 0xFE, 0xFB, 0x0D, 0xA0, 0x08, 0x62, 0x22, 0xAB, 0x93, 0xA9, 0xAB, 0xE5, 0xBE, 0xBD,
 0x18, 0x00, 0x1D, 0xA1, 0xEF, 0x43, 0x2D, 0x6E, 0xB4, 0xA5, 0x65, 0xD1, 0xAF, 0x52, 0xCF, 0x8B,
 0x7C, 0xFE, 0xB4, 0xD9, 0xD5, 0x1E, 0xFF, 0xAB, 0xDF, 0x99, 0x14, 0x05, 0x3B, 0xAB, 0x5D, 0x7A,
 0xDD, 0xCB, 0xAA, 0x37, 0xC5, 0xFF, 0xBE, 0xBD, 0x18, 0x00, 0xDE, 0x98, 0x7E, 0xB4, 0x04, 0xF6,
 0x63, 0x96, 0x0E, 0x98, 0x0E, 0x98, 0x0B, 0x2F, 0x59, 0xB0, 0xFB, 0x7F, 0x34, 0xFB, 0x95, 0x06,
 0x5A, 0x94, 0x88, 0xF1, 0x7A, 0xBB, 0x4D, 0xA3, 0xA7, 0x13, 0x79, 0x4F, 0x61, 0x8E, 0x8D, 0xB8,
 0xFF, 0x5E, 0x97, 0xBA, 0xF5, 0x23, 0x5D, 0xED, 0x7B, 0xE1, 0xD6, 0x7D, 0x34, 0x16, 0x7E, 0x91,
 0x80, 0x59, 0x5C, 0x5F, 0x3C, 0xD4, 0x5F, 0x9F, 0x3F, 0x97, 0xFD, 0xA5, 0x03, 0xE0, 0xD8, 0xA0,
 0x4F, 0xBF, 0x4F, 0x09, 0xF0, 0x53, 0x1A, 0x1D, 0x5F, 0x61, 0x45, 0x22, 0x72, 0xB5, 0x13, 0xB1,
 0x96, 0x72, 0xE4, 0x88, 0x91, 0x52, 0xE7, 0x4B, 0x8D, 0x47, 0x4E, 0xCD, 0xDA, 0x14, 0x02, 0xB9,
 0x2D, 0x3B, 0xD7, 0x5A, 0xCA, 0x01, 0xD3, 0x8C, 0x8C, 0x7C, 0xDA, 0x4A, 0x71, 0xFA, 0x5A, 0xBA,
 0x29, 0x47, 0x68, 0x74, 0xFF, 0xAC, 0x66, 0xD1, 0x48, 0xA3, 0xAC, 0x3B, 0xE6, 0xD3, 0x29, 0x52,
 0xC8, 0x8F, 0x34, 0x92, 0x05, 0xE4, 0xD6, 0xE7, 0x52, 0xE3, 0x23, 0x29, 0xD5, 0xED, 0xF5, 0xF5,
 0x96, 0x97, 0xEB, 0x7F, 0x56, 0x07, 0xA8, 0x8B, 0x17, 0x96, 0x13, 0x08, 0x8C, 0xB9, 0x01, 0x3C,
 0x39, 0x9A, 0x95, 0x64, 0xD7, 0x53, 0x24, 0xA0, 0x79, 0xC3, 0x44, 0x51, 0x9B, 0x2E, 0x32, 0xFB,
 0x06, 0xA1, 0xC2, 0x3D, 0x73, 0x1B, 0x68, 0xA1, 0xA3, 0x0F, 0xA6, 0x73, 0xFD, 0xCF, 0xAA, 0xCD,
 0xF1, 0x1C, 0xD8, 0x71, 0x22, 0x02, 0xA4, 0xD1, 0x44, 0xC1, 0xC0, 0x95, 0x26, 0x81, 0xDC, 0x06,
 0x0A, 0xEC, 0x19, 0x09, 0x10, 0xE3, 0x46, 0x54, 0x80, 0x33, 0x63, 0xCA, 0xE2, 0xD3, 0x28, 0x02,
 0xE4, 0xFF, 0x28, 0xD2, 0xEF, 0xED, 0x43, 0x8C, 0x19, 0x00, 0xEF, 0x65, 0x1F, 0x3B, 0xCF, 0x4E,
 0x20, 0xE5, 0xD3, 0xDA, 0xEC, 0x87, 0xFC, 0xCD, 0xFE, 0x31, 0x00, 0xDA, 0xD1, 0xA7, 0x00, 0x7E,
 0x73, 0x75, 0x70, 0x76, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08,
 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80,
 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01,
 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10,
 0x80, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x3C, 0x11, 0x18, 0xF0, 0x03, 0x29, 0xAF, 0x5B, 0x27,
 0xFE, 0x75, 0xA7, 0x01, 0xFE, 0xB7, 0xB7, 0x88, 0xA4, 0x56, 0x22, 0x87, 0xB7, 0xE2, 0xFB, 0x69,
 0xFE, 0x7F, 0xA0, 0x55, 0xFB, 0x5F, 0x6D, 0x3F, 0x92, 0x7E, 0xAC, 0x9D, 0x9C, 0x40, 0xF5, 0x4F,
 0x8A, 0xFC, 0xF1, 0xFF, 0x6B, 0x78, 0xBB, 0xD9, 0x56, 0x21, 0xB9, 0x98, 0xD2, 0x7F, 0x3C, 0x59,
 0x1B, 0x53, 0x8A, 0xFF, 0x4F, 0x5B, 0x04, 0xC9, 0x28, 0x28, 0x22, 0xFE, 0x6F, 0x6B, 0xEB, 0xD2,
 0xA8, 0xDA, 0xFE, 0x8E, 0xB7, 0x8E, 0xBF, 0xC9, 0xA7, 0x9A, 0x7F, 0xC4, 0x7E, 0x30, 0xFD, 0x58,
 0x3E, 0x3F, 0x81, 0xBA, 0xE2, 0xFD, 0x7B, 0xF6, 0xBD, 0x01, 0x35, 0xBA, 0x7F, 0x6E, 0x82, 0x16,
 0xFD, 0x28, 0x88, 0x01, 0xFE, 0x5F, 0xB7, 0xD8, 0xB2, 0x27, 0xC2, 0xC7, 0xA4, 0xA1, 0x4C, 0x88,
 0x46, 0x12, 0x9B, 0xF1, 0x0D, 0x16, 0x40, 0xB5, 0xFD, 0xA3, 0x7B, 0x75, 0xFC, 0x9F, 0x66, 0xC0,
 0xB1, 0x40, 0xFA, 0x40, 0x99, 0x7C, 0x82, 0xF1, 0xED, 0xF3, 0x8A, 0x55, 0xDF, 0x22, 0xF0, 0xD4,
 0xDC, 0x82, 0xCD, 0xE7, 0x7F, 0x03, 0xE0, 0xA9, 0x85, 0x99, 0xED, 0xA9, 0x83, 0x63, 0x85, 0x4D,
 0xF3, 0xED, 0x47, 0x87, 0x9F, 0xE2, 0x92, 0x60, 0x01, 0xB7, 0x69, 0xC4, 0x59, 0xC5, 0x2D, 0xB4,
 0x39, 0x54, 0xDB, 0x37, 0xA3, 0xF0, 0x69, 0xFE, 0xE9, 0xF4, 0xD2, 0x0D, 0x9E, 0xF8, 0x57, 0xDB,
 0xBF, 0x5E, 0xF8, 0xCC, 0x04, 0x98, 0x41, 0x30, 0x0C, 0x4B, 0x7E, 0x38, 0xAA, 0x1B, 0xD0, 0x35,
 0x3C, 0x23, 0x61, 0x55, 0xEF, 0x15, 0xB7, 0x5F, 0xCD, 0x3F, 0xEE, 0xE1, 0xCC, 0x03, 0x20, 0x7E,
 0xBA, 0x77, 0xF9, 0xC7, 0xFD, 0xCF, 0xEF, 0x08, 0xCD, 0x78, 0xA7, 0x3B, 0x7C, 0xBB, 0xDB, 0xF1,
 0x81, 0x77, 0x86, 0xFE, 0x6E, 0xFA, 0xF0, 0x96, 0xC3, 0x09, 0xE1, 0xA8, 0x2E, 0x00, 0x06, 0x40,
 0xA4, 0x81, 0xC6, 0x03, 0x1C, 0xB7, 0x10, 0xF1, 0xDF, 0xAC, 0x9C, 0xA0, 0x20, 0x7E, 0xBA, 0xEA,
 0xFC, 0xAF, 0xB6, 0xBF, 0xDE, 0x00, 0x38, 0x36, 0xD3, 0x3F, 0xBF, 0x0F, 0x66, 0xC8, 0xB0, 0xE5,
 0xAF, 0xCC, 0x80, 0x78, 0xFE, 0xFF, 0xEF, 0xF3, 0x60, 0x7B, 0x14, 0x27, 0x72, 0x4C, 0x70, 0x5A,
 0xF6, 0xA6, 0x7A, 0xAF, 0xB8, 0xFD, 0xEA, 0x06, 0x11, 0xF7, 0x90, 0x01, 0x10, 0x69, 0x43, 0xD5,
 0xF1, 0x95, 0x4B, 0xE1, 0x1B, 0xC2, 0x8A, 0xEE, 0x7F, 0xB2, 0x79, 0xFD, 0xC7, 0x2C, 0x34, 0xE3,
 0x67, 0x40, 0x42, 0x75, 0x8F, 0x4F, 0xD0, 0x04, 0xA7, 0xE5, 0x88, 0x55, 0xEF, 0x15, 0xB7, 0x5F,
 0xCD, 0x3F, 0xEE, 0x21, 0x03, 0x80, 0x01, 0x20, 0x17, 0x5C, 0x48, 0x58, 0xD1, 0x40, 0xCD, 0xEE,
 0xBF, 0x09, 0x42, 0x7E, 0x1F, 0x16, 0x57, 0x1C, 0xA1, 0xE1, 0x5B, 0x4E, 0x75, 0xB7, 0xCF, 0x9F,
 0x48, 0x67, 0x3F, 0x49, 0xBA, 0xCD, 0xA7, 0x30, 0xFF, 0xD9, 0x31, 0x2B, 0xC0, 0xB7, 0x5B, 0x6C,
 0xF6, 0x83, 0xD9, 0xD3, 0xC8, 0xD1, 0xB8, 0xFD, 0x76, 0x01, 0x04, 0x3D, 0xDF, 0x96, 0xB7, 0xFD,
 0x4F, 0xD9, 0xA2, 0x5D, 0x03, 0xC1, 0x2D, 0x4A, 0xF9, 0x9B, 0x7C, 0xE2, 0xF9, 0x13, 0x3C, 0xFE,
 0x24, 0xCB, 0xEB, 0x5A, 0xA7, 0x39, 0x03, 0x72, 0x09, 0x54, 0x1C, 0x64, 0x40, 0x7F, 0xCB, 0x85,
 0x30, 0xDA, 0x5A, 0x75, 0x0F, 0xC2, 0xBE, 0x78, 0x0F, 0xB8, 0x82, 0x1A, 0x9D, 0x0A, 0x5D, 0xFB,
 0x7D, 0x3D, 0xBE, 0x5D, 0x87, 0x66, 0xD1, 0x67, 0x08, 0xD4, 0xE6, 0xE7, 0xDA, 0x37, 0x80, 0xAC,
 0x20, 0xD7, 0xDD, 0x00, 0x1A, 0x0F, 0x89, 0xF1, 0x1B, 0x40, 0xFB, 0x21, 0x3D, 0x05, 0x4E, 0xF5,
 0x13, 0xB4, 0x39, 0x7B, 0x82, 0xA7, 0x18, 0xE0, 0x7F, 0xFB, 0x09, 0x2E, 0xE8, 0xFF, 0x1A, 0xCB,
 0x2B, 0x1E, 0x9C, 0x5F, 0x21, 0x73, 0x8A, 0x75, 0x8A, 0x0F, 0x8D, 0xFC, 0x89, 0xDA, 0x6F, 0xBF,
 0x45, 0xCA, 0x79, 0xC7, 0x74, 0xF1, 0x31, 0xEB, 0xB5, 0xCC, 0xDE, 0x3A, 0xA3, 0x14, 0x7A, 0xD7,
 0x17, 0xF1, 0x39, 0xBA, 0x93, 0xC8, 0xEA, 0xF6, 0x94, 0x41, 0xFB, 0xAF, 0xE4, 0x4F, 0x22, 0x9F,
 0x77, 0xFD, 0x1F, 0x90, 0x3F, 0xBD, 0xA9, 0xFD, 0xC2, 0xBA, 0xA2, 0x19, 0xF0, 0xE9, 0x57, 0x40,
 0xC1, 0xF2, 0xB4, 0xA3, 0x38, 0xBE, 0x00, 0x72, 0x93, 0x3E, 0xD7, 0x9A, 0xCD, 0xEB, 0xA7, 0xA2,
 0x7A, 0xF7, 0xF9, 0xED, 0x8F, 0xCF, 0x9F, 0x6B, 0xF7, 0x6F, 0x5F, 0x61, 0xCD, 0x0B, 0x44, 0xA3,
 0xC6, 0xE6, 0xE7, 0xEF, 0xCD, 0xD8, 0xC9, 0xF5, 0xE9, 0x33, 0xC0, 0xEC, 0xFE, 0xB9, 0x1D, 0xB6,
 0xCE, 0xFF, 0xAA, 0xC0, 0x8D, 0x2F, 0xE0, 0xDC, 0xA2, 0xCA, 0xB5, 0xE6, 0xA5, 0x5C, 0xBD, 0xFB,
 0xFC, 0xF6, 0xC7, 0xE7, 0x0F, 0x03, 0xC0, 0x9B, 0xA5, 0xDF, 0xD2, 0xD7, 0xF5, 0xD0, 0xA7, 0x61,
 0x90, 0xC5, 0x27, 0xDD, 0xF3, 0xFD, 0x0D, 0x47, 0xE4, 0x11, 0xC7, 0x38, 0xDD, 0xF8, 0x02, 0xCE,
 0x6D, 0x6A, 0xB9, 0xD6, 0xBC, 0xA9, 0x50, 0xBD, 0xFB, 0xFC, 0xF6, 0xC7, 0xE7, 0x0F, 0x03, 0xC0,
 0x9B, 0xA5, 0x9F, 0xD3, 0x57, 0x74, 0xD2, 0x6A, 0x08, 0x45, 0x3E, 0x57, 0x77, 0x80, 0xCF, 0xFF,
 0x45, 0xB0, 0x72, 0x40, 0xCD, 0xC4, 0xA9, 0xDE, 0x7D, 0x7E, 0xFB, 0x0C, 0x80, 0x48, 0x67, 0xA9,
 0x8E, 0x6F, 0xC4, 0xB7, 0x17, 0xD7, 0x16, 0x35, 0xD3, 0xBA, 0x13, 0xD5, 0x39, 0x5C, 0x9E, 0x21,
 0xE3, 0x0B, 0x38, 0xF7, 0x48, 0xB9, 0xD6, 0x3A, 0x52, 0x24, 0xF7, 0x1D, 0xE2, 0xC9, 0x81, 0xEA,
 0xD3, 0xC5, 0xED, 0x8F, 0xCF, 0x1F, 0x6E, 0x00, 0x1D, 0x59, 0xFA, 0xB9, 0x25, 0xF1, 0xCC, 0x1C,
 0x79, 0xE4, 0x3A, 0x6F, 0xEB, 0x2C, 0xFF, 0xCB, 0x67, 0xEF, 0x5F, 0xB7, 0x2F, 0xC8, 0xF6, 0x97,
 0x50, 0xB9, 0x34, 0x13, 0x9B, 0xA6, 0xE9, 0x7F, 0xA2, 0xE7, 0x57, 0x44, 0x9B, 0xF1, 0x3F, 0xFF,
 0x3E, 0x71, 0x97, 0xDB, 0x19, 0x10, 0xB7, 0x5F, 0x14, 0x5F, 0x93, 0x7F, 0x62, 0xAC, 0x6F, 0x21,
 0x04, 0xED, 0x0F, 0xF3, 0xBF, 0x88, 0xFF, 0xE7, 0x9E, 0x18, 0xE2, 0x99, 0xFC, 0xAB, 0x2C, 0x04,
 0xD3, 0xDB, 0x66, 0xB5, 0x35, 0xAF, 0xDB, 0xEC, 0x3C, 0xD6, 0x86, 0x6D, 0xC8, 0xA3, 0x48, 0x3C,
 0x95, 0xE2, 0xBF, 0xC7, 0xB5, 0x47, 0xED, 0x13, 0xA2, 0x14, 0xE3, 0x0D, 0x23, 0x29, 0xAC, 0xEA,
 0xE2, 0xAB, 0xF0, 0x9F, 0x79, 0x40, 0x8E, 0xF1, 0xBF, 0x8E, 0x3F, 0x03, 0xA0, 0xBA, 0x00, 0xDF,
 0xB5, 0x5F, 0x5A, 0x3B, 0x3F, 0x2E, 0x01, 0xED, 0x1C, 0x4D, 0xA7, 0x90, 0x78, 0xB0, 0x86, 0xE7,
 0x29, 0xDD, 0xB3, 0x3D, 0x20, 0x13, 0x0F, 0xF2, 0x04, 0x39, 0xB8, 0x45, 0x35, 0x9F, 0x6A, 0xFB,
 0x66, 0xEE, 0xC1, 0x67, 0x47, 0xB4, 0xC7, 0xC2, 0x84, 0xD6, 0x27, 0xA8, 0xB6, 0xDF, 0xE7, 0x15,
 0xAB, 0x20, 0x00, 0x01, 0x08, 0x40, 0xA0, 0x9C, 0x00, 0x03, 0xA0, 0x1C, 0x31, 0x1B, 0x40, 0x00,
 0x02, 0x10, 0x98, 0x93, 0x00, 0x03, 0x60, 0x70, 0x5C, 0x00, 0x3E, 0x18, 0x38, 0xDB, 0x41, 0x00,
 0x02, 0x2D, 0x02, 0xC1, 0x17, 0x6E, 0xC0, 0x75, 0x11, 0x60, 0x00, 0xB8, 0x70, 0x21, 0x86, 0x00,
 0x04, 0x20, 0xB0, 0x0E, 0x01, 0x06, 0xC0, 0x3A, 0xB1, 0xE4, 0x24, 0x10, 0x80, 0x00, 0x04, 0x20,
 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00,
 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04,
 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40,
 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0xF0, 0x3E, 0x81, 0x15, 0xFE, 0x5A, 0x9C, 0xF9, 0xC3,
 0xBC, 0x82, 0x3F, 0x52, 0xCD, 0xB4, 0x1F, 0x0C, 0xE3, 0x80, 0x1F, 0x63, 0xD7, 0x3E, 0xC2, 0xE4,
 0xFE, 0xBF, 0xC8, 0x3F, 0x98, 0x39, 0x47, 0xB0, 0x45, 0x51, 0x56, 0x0A, 0x58, 0xD1, 0x78, 0x73,
 0xA0, 0xC2, 0xE6, 0x93, 0x0F, 0x91, 0xBD, 0x1A, 0x6B, 0x53, 0xFE, 0x8E, 0x52, 0xC4, 0x37, 0x91,
 0x79, 0x69, 0xFE, 0x5F, 0x8D, 0x5F, 0xBD, 0x4A, 0x39, 0xA3, 0xB2, 0x91, 0x08, 0xE4, 0x2C, 0x33,
 0x01, 0x6D, 0x07, 0xE8, 0x3B, 0xC6, 0xBE, 0xF6, 0x69, 0x97, 0x6E, 0xCB, 0xDB, 0x31, 0x4C, 0xFB,
 0x7D, 0x6E, 0x8B, 0xAD, 0x27, 0xC5, 0xF8, 0x76, 0x8A, 0xD2, 0x06, 0x57, 0x64, 0x5C, 0xE1, 0xDF,
 0x99, 0x94, 0x87, 0x65, 0x75, 0x70, 0x76, 0xF2, 0x0D, 0x27, 0x13, 0x67, 0xD8, 0xBE, 0x4B, 0x85,
 0xCD, 0x46, 0xF7, 0x8F, 0x64, 0xE9, 0x93, 0xAB, 0xC7, 0xA0, 0x44, 0x42, 0x5C, 0x8D, 0xC2, 0xEC,
 0x0F, 0xF1, 0xFE, 0xD3, 0x6E, 0xCD, 0xF1, 0x03, 0xB6, 0x8B, 0x37, 0x12, 0xDC, 0x7F, 0xFB, 0x8E,
 0xD2, 0x80, 0xBA, 0x8F, 0xB1, 0x2F, 0xBC, 0x3D, 0x86, 0x52, 0x81, 0xED, 0xF4, 0x6A, 0xDB, 0xDF,
 0x37, 0x8D, 0xE7, 0xE8, 0x93, 0xFF, 0x11, 0xCB, 0xC7, 0xE3, 0x17, 0xB5, 0x39, 0x93, 0x7F, 0xA9,
 0xFF, 0x41, 0xE3, 0x4A, 0x66, 0x06, 0xB7, 0x68, 0x67, 0x48, 0x4A, 0xFE, 0x9C, 0x3C, 0xAC, 0xB0,
 0xD9, 0xEE, 0xFE, 0x91, 0x1E, 0x71, 0xF5, 0xF6, 0x94, 0xA8, 0xA5, 0xFC, 0x83, 0xC6, 0xCD, 0xFA,
 0xCA, 0xEA, 0x3F, 0x4F, 0x33, 0x20, 0x1E, 0x6B, 0xB3, 0xFB, 0x77, 0x77, 0xE6, 0x7F, 0x1F, 0x9F,
 0x95, 0xF5, 0x91, 0x63, 0x54, 0x17, 0xD8, 0xBB, 0xF6, 0xB3, 0x12, 0xF4, 0xA9, 0x44, 0x23, 0xE4,
 0x37, 0xDF, 0xE2, 0x16, 0x94, 0x01, 0x1C, 0x69, 0x31, 0x33, 0xDB, 0xAF, 0xA0, 0x57, 0x61, 0x73,
 0xD8, 0x00, 0xC8, 0xED, 0xFE, 0xAF, 0xE7, 0x67, 0x3C, 0x16, 0x47, 0x20, 0xA7, 0xE7, 0x95, 0x94,
 0xD3, 0xD5, 0xF6, 0x37, 0xF1, 0xFC, 0xA2, 0xEC, 0x36, 0x0B, 0x6B, 0x0F, 0x60, 0x35, 0xB8, 0x88,
 0xE7, 0x33, 0x34, 0xD0, 0xAF, 0xFB, 0x5F, 0x3D, 0x20, 0xAB, 0xED, 0xC7, 0xF9, 0x5F, 0x3D, 0xAC,
 0xB0, 0x39, 0x66, 0x00, 0xA4, 0x77, 0xFF, 0x94, 0x16, 0xE9, 0x7D, 0x80, 0x38, 0x3E, 0xAC, 0xC4,
 0x63, 0xD1, 0xB8, 0x21, 0xA5, 0x9C, 0xAE, 0xB6, 0x7F, 0xDE, 0x5A, 0xBF, 0xBD, 0xCE, 0x74, 0x3F,
 0xE2, 0xD5, 0x1E, 0x80, 0x01, 0x60, 0xB5, 0xC0, 0x78, 0x8A, 0x7B, 0x0B, 0xCC, 0xF2, 0xC8, 0xF7,
 0xDF, 0xDF, 0xF5, 0xBF, 0x62, 0xF7, 0x0A, 0x9B, 0xE3, 0x07, 0x80, 0x2F, 0x8A, 0xCF, 0xEA, 0x6A,
 0x1A, 0x27, 0xFB, 0xED, 0x7F, 0xEC, 0x38, 0x54, 0xA3, 0x85, 0x7E, 0x72, 0x00, 0x5C, 0xBB, 0xFF,
 0xF6, 0x6F, 0x3A, 0xD0, 0x28, 0x4F, 0xD0, 0xF1, 0xF0, 0xBF, 0x3B, 0x60, 0xBA, 0xB1, 0xEC, 0x0B,
 0xD7, 0xF6, 0xBF, 0x9A, 0x4F, 0xB5, 0xFD, 0x78, 0x7E, 0xAE, 0x77, 0x03, 0x88, 0x33, 0x3F, 0x5A,
 0xA8, 0x20, 0xDC, 0xB0, 0x3F, 0x66, 0x00, 0x88, 0xD5, 0xAD, 0x90, 0xAC, 0xED, 0x0F, 0x57, 0x1C,
 0xA7, 0xD7, 0x58, 0x7B, 0xF7, 0xEF, 0x9E, 0x01, 0xB5, 0x07, 0xE0, 0x06, 0x60, 0x25, 0xD1, 0xE0,
 0x02, 0xB3, 0xDC, 0xE9, 0xF9, 0xEF, 0xDD, 0xB9, 0xA7, 0x6C, 0x56, 0x9D, 0x9F, 0x2B, 0x0D, 0x00,
 0x85, 0xA7, 0x57, 0x33, 0x38, 0x3F, 0x19, 0x00, 0x3F, 0x02, 0x74, 0x7C, 0xBA, 0x6F, 0x44, 0x22,
 0x18, 0xA4, 0xA7, 0x5B, 0xC5, 0x56, 0xD8, 0xF1, 0xF2, 0x2E, 0xB5, 0x1F, 0xBC, 0x00, 0x29, 0xF5,
 0xD0, 0x26, 0x50, 0xCD, 0x47, 0xF1, 0x50, 0x7C, 0x0B, 0x74, 0x0D, 0x44, 0xDC, 0xF8, 0xC9, 0xC2,
 0x69, 0x8B, 0x14, 0xFB, 0xA5, 0xF9, 0x73, 0xEB, 0x61, 0x3C, 0xA6, 0xFA, 0xC1, 0xE3, 0x7B, 0xB5,
 0xF9, 0xE8, 0x9E, 0x3C, 0x29, 0xE3, 0x1E, 0x9A, 0xF9, 0xD9, 0x78, 0x24, 0x8F, 0xEF, 0x3E, 0xA0,
 0x7E, 0x1B, 0x07, 0x8C, 0xFB, 0xFF, 0xAF, 0xF1, 0xBA, 0x01, 0x70, 0x7B, 0xAB, 0x08, 0x0E, 0x95,
 0x76, 0x5F, 0x38, 0xA6, 0x6C, 0x30, 0x41, 0xD3, 0xF8, 0x06, 0xFD, 0x88, 0x2D, 0x1F, 0x50, 0xC3,
 0x4F, 0x5B, 0xC4, 0x1C, 0xFF, 0xBB, 0xFA, 0x18, 0x82, 0xDB, 0x5D, 0x52, 0xB6, 0xA8, 0xF3, 0x3F,
 0xEE, 0xDE, 0xEB, 0x16, 0xAA, 0xF3, 0x67, 0xD8, 0x01, 0x73, 0xDB, 0xCE, 0x30, 0xB7, 0x47, 0x6C,
 0x54, 0x37, 0x00, 0xAA, 0x9F, 0xB0, 0x4A, 0xED, 0x73, 0x03, 0x30, 0x93, 0xAF, 0xB4, 0x3B, 0x9C,
 0xD2, 0xF2, 0x7A, 0x03, 0x88, 0x07, 0xA8, 0x34, 0x7F, 0x96, 0xBF, 0x01, 0xC4, 0x9F, 0x90, 0xE2,
 0x16, 0xD6, 0xBE, 0x01, 0xE8, 0xA7, 0x33, 0x4B, 0xF5, 0x2C, 0x38, 0x16, 0x4F, 0xD1, 0x00, 0x68,
 0x8F, 0xDC, 0xF8, 0x40, 0x7E, 0xD7, 0xBE, 0x9B, 0xF8, 0x65, 0xC1, 0x1A, 0xFE, 0xC7, 0x39, 0x34,
 0xDE, 0x0F, 0x34, 0x5A, 0xFC, 0xFC, 0xF9, 0x73, 0x3D, 0x57, 0xDC, 0x67, 0x9D, 0x76, 0x7C, 0xAF,
 0x35, 0xF2, 0xF3, 0x74, 0x89, 0x6C, 0xBC, 0x11, 0xD2, 0xD9, 0x6E, 0xCA, 0x31, 0x7C, 0xFA, 0xAA,
 0xC3, 0x3E, 0xCB, 0xED, 0xE3, 0xD5, 0xF1, 0x54, 0x7B, 0xED, 0x75, 0x3F, 0x67, 0x8D, 0x01, 0xF4,
 0xF4, 0x10, 0x51, 0x5D, 0x00, 0x36, 0x62, 0x4B, 0xF1, 0x2E, 0x1F, 0xCB, 0x3B, 0xFB, 0xBF, 0xC7,
 0x09, 0x9B, 0x0F, 0x38, 0x0C, 0x80, 0x06, 0xA2, 0x76, 0x61, 0xC6, 0xA3, 0xB3, 0x76, 0x7E, 0x7E,
 0x9D, 0x4F, 0xD4, 0xFF, 0xDB, 0xF5, 0xB7, 0x37, 0xE2, 0x6D, 0x2A, 0xD8, 0xFD, 0x60, 0xB2, 0x27,
 0xDC, 0x28, 0x20, 0x6B, 0xC2, 0x77, 0x00, 0x39, 0x2D, 0x59, 0xBB, 0xC0, 0xBE, 0xCE, 0x27, 0x9E,
 0x3F, 0xD5, 0x37, 0x80, 0x77, 0xF3, 0x27, 0xCE, 0x27, 0x6E, 0x61, 0xED, 0x07, 0x88, 0xDA, 0xF8,
 0xEA, 0x03, 0xA0, 0xAF, 0xFB, 0x0F, 0xBB, 0x22, 0x71, 0x03, 0xA8, 0xBA, 0x24, 0x5A, 0x2D, 0x9C,
 0x02, 0xB6, 0x08, 0x9D, 0xFF, 0x7B, 0x2E, 0xB1, 0xDA, 0x06, 0x61, 0x3D, 0x00, 0xC5, 0xCF, 0x12,
 0xB7, 0xC0, 0x00, 0xE8, 0x6E, 0xCE, 0xE5, 0x3F, 0x28, 0x86, 0x01, 0x60, 0x76, 0x87, 0x77, 0x0B,
 0xD8, 0x74, 0xCF, 0x14, 0x50, 0xC0, 0x26, 0x22, 0xD7, 0x9D, 0x2F, 0xD7, 0x5A, 0x3C, 0x3A, 0x6B,
 0xE7, 0xE7, 0xD7, 0xF9, 0x44, 0xFD, 0x8F, 0xAE, 0x17, 0xB2, 0xF5, 0xF5, 0x04, 0xEA, 0x1F, 0x8F,
 0xFF, 0x3D, 0x5D, 0xDC, 0x82, 0xF9, 0x0E, 0xB7, 0xB1, 0x45, 0x70, 0xF7, 0xEA, 0x10, 0x57, 0xDB,
 0x6F, 0xBF, 0x7B, 0x8C, 0xEF, 0x5E, 0x9D, 0x9F, 0xEF, 0xBE, 0x02, 0xEA, 0x7E, 0x73, 0xBB, 0xBB,
 0x5D, 0xCD, 0x27, 0x1E, 0xC1, 0xDF, 0x7C, 0x03, 0x88, 0xC7, 0x57, 0xFA, 0x79, 0xFA, 0x91, 0x20,
 0x99, 0x6B, 0x37, 0x81, 0x30, 0x4A, 0xEE, 0x25, 0xFB, 0xF2, 0x7D, 0xA3, 0xE3, 0x6F, 0xBA, 0xCD,
 0x3E, 0x3D, 0xB5, 0x9D, 0x76, 0x89, 0xDB, 0xAF, 0xF6, 0x7F, 0x98, 0xFD, 0x38, 0x0A, 0xB1, 0x92,
 0x4F, 0xF1, 0x8D, 0x24, 0x8F, 0x79, 0x43, 0xDD, 0x05, 0x89, 0xA7, 0x33, 0x2B, 0xC2, 0xBB, 0xD7,
 0x6D, 0xE6, 0x07, 0xB1, 0x88, 0x03, 0x20, 0xCE, 0x67, 0x4C, 0x7E, 0xB6, 0x1F, 0xB0, 0x22, 0xAC,
 0xCC, 0x68, 0x06, 0xFB, 0xDB, 0x31, 0x45, 0xD3, 0x9B, 0xCF, 0xBF, 0x51, 0x7E, 0x4A, 0xA0, 0x94,
 0x96, 0xAA, 0x9C, 0x3F, 0x18, 0x80, 0x06, 0xA3, 0x88, 0xE5, 0x6B, 0x0D, 0xA4, 0x00, 0xB9, 0x8E,
 0x96, 0x52, 0xFF, 0x37, 0x02, 0x8D, 0x10, 0x7B, 0xDB, 0xCD, 0xED, 0x68, 0x0C, 0x1A, 0x31, 0x97,
 0xBF, 0xEB, 0x7F, 0x4A, 0x16, 0x1D, 0xCF, 0xA8, 0x14, 0x85, 0xC9, 0x64, 0x58, 0x7E, 0x9A, 0xC7,
 0x37, 0x05, 0x8D, 0xB3, 0xCC, 0x90, 0x9F, 0x41, 0xFF, 0xCD, 0xE5, 0xA6, 0xA0, 0xE3, 0xD1, 0xC7,
 0x1C, 0x3C, 0x7A, 0xFE, 0xFC, 0x55, 0x2A, 0x33, 0xC0, 0x67, 0xF1, 0xBF, 0xEA, 0xE0, 0xE1, 0x95,
 0x4D, 0xEB, 0xBA, 0xC3, 0xC8, 0x1A, 0xAB, 0x98, 0x2E, 0x9B, 0xFF, 0x66, 0x70, 0x15, 0xC8, 0x4F,
 0x9A, 0x01, 0xF1, 0x6D, 0x9C, 0x22, 0xE2, 0xF9, 0x6E, 0x36, 0x6E, 0xA4, 0xC3, 0x42, 0x2E, 0xB7,
 0xD2, 0xE4, 0xE9, 0x38, 0x9D, 0x6B, 0xC9, 0xA7, 0xF3, 0x33, 0x37, 0x8E, 0x8D, 0x2A, 0xBB, 0x52,
 0x72, 0x41, 0x46, 0x0C, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01,
 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10,
 0x80, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00,
 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02,
 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20,
 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00,
 0x02, 0x10, 0xB8, 0x25, 0x90, 0xFC, 0x13, 0xCD, 0xA0, 0xDC, 0x47, 0xE0, 0xE9, 0x87, 0x31, 0xF5,
 0x59, 0x7B, 0x5A, 0x55, 0xF7, 0xC3, 0x8C, 0xDE, 0xF2, 0x3F, 0x2B, 0x7D, 0xCD, 0x1F, 0x86, 0x15,
 0xF9, 0xE1, 0x91, 0xCA, 0x0F, 0xAB, 0x52, 0x34, 0x8D, 0xB0, 0x9A, 0x79, 0x32, 0xB9, 0xFD, 0x86,
 0x7B, 0xF1, 0x10, 0x2B, 0x67, 0x57, 0x34, 0x7A, 0x59, 0x8D, 0x2C, 0x34, 0x33, 0xF4, 0xA6, 0x20,
 0x4E, 0xD8, 0xDC, 0x62, 0x13, 0xD4, 0x61, 0x39, 0x3A, 0xB0, 0x85, 0x32, 0x12, 0x50, 0xF1, 0x38,
 0x69, 0xB2, 0xDD, 0xE3, 0xA7, 0x1F, 0x28, 0x18, 0x3F, 0x4C, 0xFB, 0xA7, 0x75, 0x06, 0xED, 0x0F,
 0xF0, 0xFF, 0x36, 0x7B, 0x4E, 0x87, 0xEA, 0x8E, 0x87, 0xD8, 0xFD, 0xBB, 0x67, 0x80, 0xB9, 0xD0,
 0x14, 0xB4, 0x8F, 0x66, 0x2E, 0x37, 0x05, 0x33, 0xD8, 0x7F, 0x4A, 0xC2, 0x78, 0x7B, 0x32, 0x8F,
 0x6F, 0x0A, 0xCC, 0xD4, 0x52, 0x52, 0xC8, 0x34, 0x62, 0x0A, 0xAE, 0x85, 0x66, 0x2E, 0x51, 0x04,
 0x47, 0xE7, 0x15, 0x7D, 0x44, 0x73, 0xDA, 0x2B, 0xD8, 0x79, 0xAE, 0x9E, 0xEC, 0xA1, 0x8C, 0xC7,
 0x34, 0x72, 0x4C, 0xDF, 0xDA, 0x93, 0xD3, 0x57, 0x46, 0xC1, 0xC3, 0x98, 0xDD, 0x3F, 0xC5, 0xFE,
 0xD3, 0x84, 0x8F, 0x17, 0xF0, 0x3E, 0xCF, 0xDB, 0x07, 0xF1, 0x41, 0xFF, 0xA9, 0x56, 0x0A, 0xB8,
 0x3B, 0x59, 0xDB, 0x04, 0xE2, 0x7C, 0x16, 0xB6, 0x9F, 0xD2, 0x9B, 0xAA, 0xF9, 0x3C, 0x3D, 0xDE,
 0xA6, 0x38, 0x7F, 0x7A, 0xB6, 0x3D, 0xCE, 0x80, 0x48, 0xC2, 0x9F, 0xD6, 0xC6, 0x93, 0x50, 0x77,
 0xA6, 0xAE, 0x47, 0x1F, 0x4F, 0x31, 0xF2, 0x44, 0xFA, 0xD9, 0xEF, 0x95, 0xD5, 0x09, 0xBA, 0xB6,
 0xFD, 0x28, 0xFD, 0xFA, 0xF5, 0x6B, 0xF3, 0x8F, 0x57, 0xDA, 0x53, 0xA3, 0xCC, 0x6A, 0xA0, 0xD5,
 0xFC, 0xEB, 0x33, 0xE8, 0xDF, 0x1D, 0xE2, 0xA8, 0x9F, 0x5C, 0xCD, 0x42, 0xAD, 0xA3, 0x48, 0x3F,
 0xCB, 0xD3, 0x73, 0x73, 0xF7, 0x73, 0x9B, 0x7E, 0x96, 0xA8, 0xB2, 0x3A, 0x41, 0xD7, 0xB6, 0x1F,
 0xA5, 0xFF, 0xB0, 0x3E, 0x31, 0x6F, 0xD6, 0xE6, 0x9F, 0x52, 0xC9, 0xB7, 0x0D, 0x28, 0xC5, 0xF2,
 0xF1, 0x62, 0x7A, 0x1B, 0xEA, 0xAC, 0x5D, 0x1A, 0xC6, 0xB3, 0x52, 0x74, 0x80, 0xAB, 0xFB, 0xE3,
 0x79, 0x96, 0xCF, 0xE6, 0xC8, 0x49, 0xD9, 0xE8, 0x9A, 0x3F, 0xC7, 0x7F, 0x93, 0x58, 0xCB, 0x29,
 0xDE, 0x9E, 0x8D, 0xD0, 0x20, 0xDA, 0x58, 0x4B, 0xF3, 0x7E, 0x40, 0x53, 0x20, 0xBE, 0x4A, 0xD9,
 0x9C, 0x28, 0x25, 0x3E, 0x93, 0x56, 0xF3, 0x1F, 0xD3, 0xE3, 0xCC, 0x49, 0xA6, 0x40, 0x9E, 0xA7,
 0xD0, 0x12, 0x8B, 0xBA, 0xFA, 0x06, 0x19, 0x07, 0x6B, 0x58, 0xA8, 0x4E, 0xD0, 0xB5, 0xED, 0x57,
 0x84, 0x27, 0x31, 0x3B, 0xCD, 0xBA, 0x8D, 0xEF, 0xF5, 0xF5, 0xF8, 0x6E, 0x11, 0x7C, 0xBA, 0xC2,
 0xC7, 0xE3, 0x5B, 0xCD, 0xA7, 0xFD, 0x0C, 0x91, 0xF8, 0xF8, 0x19, 0x4F, 0x15, 0x71, 0x00, 0x24,
 0xFA, 0x3C, 0x60, 0x3A, 0x36, 0xB0, 0x54, 0x13, 0x8B, 0x27, 0xE7, 0x8F, 0xD4, 0xAF, 0x7B, 0x1A,
 0x6D, 0x47, 0x34, 0x18, 0xEF, 0xEA, 0x02, 0x1B, 0x1F, 0xC5, 0xDC, 0x1D, 0xAB, 0xF9, 0x6C, 0xDD,
 0xB3, 0x91, 0x8B, 0xE9, 0xF1, 0x3D, 0x1A, 0x4C, 0x64, 0x75, 0x34, 0xB5, 0xFD, 0x3E, 0xA5, 0xC0,
 0x06, 0xF0, 0x3F, 0xF9, 0x99, 0x78, 0x7D, 0x39, 0x5A, 0x4E, 0x44, 0xDD, 0xEE, 0xCB, 0x29, 0xD8,
 0xC5, 0x61, 0x13, 0xDF, 0xAB, 0x9D, 0x2A, 0x89, 0x89, 0x14, 0x77, 0xF5, 0xD1, 0xC2, 0x31, 0x63,
 0x4E, 0xBF, 0x37, 0xCB, 0xBB, 0xD0, 0x2D, 0xD9, 0x74, 0xA9, 0xFF, 0x0D, 0xE3, 0x59, 0x3D, 0xE2,
 0x7A, 0xD0, 0x5C, 0xCB, 0xA5, 0x0D, 0x5A, 0x8E, 0x52, 0xBF, 0xB0, 0xDD, 0xF1, 0x13, 0x59, 0xED,
 0xE5, 0x9A, 0x58, 0xB7, 0x66, 0xFE, 0x24, 0xFA, 0x7F, 0xBA, 0xCD, 0xF4, 0x13, 0x7F, 0x58, 0x99,
 0xEE, 0x6A, 0x75, 0xE6, 0xD7, 0x3D, 0x97, 0xA4, 0xB3, 0x7D, 0xD9, 0x60, 0xBB, 0x87, 0x06, 0x9D,
 0x1B, 0xD0, 0x80, 0x4A, 0xFD, 0xDF, 0xA6, 0xE0, 0xD3, 0xAF, 0x20, 0x9C, 0x05, 0x96, 0x0F, 0x88,
 0xEF, 0x4E, 0x69, 0xC0, 0x73, 0x68, 0x45, 0x44, 0x86, 0xE5, 0xCF, 0x80, 0x1E, 0x5D, 0xC1, 0x07,
 0x9B, 0x6F, 0x12, 0x28, 0xCD, 0x4E, 0xB3, 0x62, 0xE3, 0x4F, 0x5B, 0xA5, 0xFE, 0x9F, 0x9E, 0xAA,
 0x6E, 0x6F, 0x48, 0xE9, 0x55, 0x97, 0x6E, 0xB0, 0xEE, 0x51, 0xA8, 0x1D, 0xBE, 0x78, 0x70, 0x4F,
 0x77, 0xD0, 0x6B, 0x3A, 0x25, 0xB2, 0xAA, 0xB8, 0x01, 0x28, 0xF9, 0x93, 0x55, 0xFC, 0x29, 0xB4,
 0xEB, 0x52, 0x45, 0x3C, 0xA6, 0xD9, 0x31, 0x44, 0x3B, 0x6D, 0x59, 0x62, 0xDA, 0xA4, 0xF8, 0xF3,
 0x9A, 0x91, 0x6A, 0xDC, 0x6D, 0xFB, 0xF1, 0xDD, 0xE3, 0x16, 0x22, 0xE8, 0x2B, 0x76, 0xCF, 0xB5,
 0xA9, 0x34, 0xE8, 0x48, 0x31, 0x34, 0xBC, 0x4D, 0x39, 0xC8, 0xC9, 0x48, 0xFB, 0x1F, 0xB3, 0x42,
 0x59, 0xDD, 0x49, 0x2B, 0x2E, 0x34, 0x29, 0xB4, 0xDB, 0xDD, 0x7F, 0x0C, 0x96, 0xE3, 0x33, 0x56,
 0x24, 0xA0, 0x33, 0x9C, 0xA5, 0xC8, 0xFF, 0x4C, 0xB3, 0xEF, 0xE6, 0x4D, 0x7C, 0xF7, 0xA3, 0x85,
 0xB8, 0x35, 0x2F, 0xD9, 0x8A, 0x1D, 0x73, 0x6D, 0xBE, 0x35, 0x80, 0xB3, 0xCA, 0xF8, 0xC5, 0x01,
 0x10, 0x99, 0x8B, 0x62, 0x22, 0x65, 0xC5, 0x3A, 0x8B, 0xF6, 0x24, 0x4D, 0x33, 0x0B, 0xCB, 0xD3,
 0x71, 0xAA, 0xED, 0x8B, 0xD1, 0x9F, 0x42, 0x56, 0xCD, 0x62, 0x64, 0x03, 0x1A, 0x50, 0x06, 0xA7,
 0x98, 0x55, 0xD0, 0xCB, 0xB5, 0x39, 0x92, 0xFF, 0xF5, 0xC1, 0x36, 0xDE, 0x43, 0xC7, 0x0C, 0x80,
 0x53, 0xE6, 0xE4, 0x86, 0x60, 0x40, 0x57, 0x1D, 0xE0, 0xF0, 0x80, 0x2D, 0x8E, 0xA0, 0x4A, 0xB7,
 0x2B, 0x35, 0x3E, 0x45, 0x5B, 0xD7, 0x9D, 0xA8, 0x66, 0x71, 0x6B, 0xFF, 0x78, 0x97, 0x0C, 0xF6,
 0x88, 0xDB, 0x1B, 0xC0, 0xD1, 0xBE, 0x8E, 0xA2, 0x43, 0x59, 0x41, 0x2F, 0xD7, 0xE6, 0xF8, 0x01,
 0x90, 0x3B, 0x86, 0x07, 0x0C, 0x80, 0xAB, 0xC3, 0xB9, 0x47, 0xA8, 0x1E, 0x00, 0x63, 0xBC, 0xCD,
 0x4D, 0x4B, 0xB3, 0xD6, 0x4A, 0x0F, 0x35, 0xF8, 0x2C, 0xE6, 0x61, 0xDF, 0x14, 0x54, 0xB3, 0x68,
 0x0C, 0x80, 0x60, 0xEB, 0xDF, 0xA8, 0x3D, 0x35, 0x88, 0x31, 0x33, 0xA0, 0x82, 0x5E, 0xAE, 0xCD,
 0xC1, 0x03, 0x20, 0xBD, 0x6E, 0xAF, 0xFE, 0x1F, 0xD3, 0x26, 0x85, 0x55, 0x3B, 0x45, 0x53, 0xB2,
 0xB4, 0xF4, 0x5D, 0x44, 0x0A, 0x04, 0xB3, 0x07, 0x8D, 0xD9, 0x65, 0xCC, 0x25, 0x60, 0xFC, 0x59,
 0x4C, 0xBC, 0xAF, 0x09, 0x06, 0xB0, 0xB8, 0x96, 0x50, 0x62, 0x9B, 0xB8, 0x6D, 0x10, 0x89, 0xF6,
 0xCD, 0xC0, 0xA4, 0x37, 0x88, 0xDC, 0x88, 0x98, 0xD6, 0x82, 0xFE, 0x1F, 0xED, 0x57, 0x60, 0x1F,
 0x36, 0xC0, 0x1A, 0x59, 0x6A, 0xE6, 0x40, 0x44, 0x10, 0xE4, 0x1F, 0xD9, 0xDA, 0xB5, 0xD6, 0x4C,
 0x24, 0x97, 0x35, 0x45, 0x5C, 0x91, 0x4E, 0xB7, 0x4F, 0x8D, 0x8A, 0x33, 0xCB, 0x6A, 0x86, 0xC5,
 0xF5, 0x14, 0xCE, 0xAC, 0xE8, 0x3E, 0x3D, 0xE9, 0x67, 0xD9, 0x3F, 0x5E, 0x32, 0x8E, 0x36, 0x9F,
 0xF6, 0x8D, 0x27, 0x4A, 0x7A, 0x44, 0xAE, 0x6E, 0x27, 0x3A, 0x7F, 0x3B, 0x00, 0xE2, 0x10, 0x76,
 0x0B, 0xBB, 0xAB, 0xB7, 0xA7, 0xD8, 0xA3, 0xD3, 0xBD, 0x63, 0x83, 0x76, 0x56, 0x0A, 0x95, 0xF2,
 0x1F, 0x96, 0x9F, 0xA7, 0x40, 0x74, 0x03, 0x77, 0x2D, 0xCC, 0xAD, 0x85, 0x6B, 0xAE, 0xBA, 0x9C,
 0x59, 0x53, 0x9C, 0xD8, 0x0B, 0x1A, 0x80, 0x6E, 0x5B, 0x67, 0x4A, 0x81, 0x35, 0x1E, 0xA0, 0x52,
 0xB2, 0xE7, 0xA9, 0x7A, 0x53, 0x8C, 0xDF, 0x12, 0x4B, 0xB7, 0xDC, 0x3E, 0x42, 0x30, 0xAD, 0x07,
 0x0C, 0x00, 0xB3, 0xC7, 0x45, 0x1E, 0xA2, 0xDB, 0xF9, 0x1F, 0x8F, 0x45, 0x75, 0xFE, 0x54, 0xDB,
 0x3F, 0x4E, 0xE2, 0x53, 0x20, 0x82, 0x99, 0x23, 0x2E, 0xCF, 0x6A, 0x50, 0x27, 0x50, 0xDB, 0x59,
 0x44, 0x1F, 0x56, 0x96, 0x0D, 0xA3, 0x70, 0xDB, 0xEE, 0xE3, 0x05, 0xD6, 0x8E, 0x4D, 0x4A, 0xF6,
 0x34, 0x6A, 0xAC, 0x28, 0x33, 0xD2, 0x83, 0xF2, 0xF4, 0xF8, 0x9C, 0xE2, 0x7F, 0xBA, 0xB7, 0x27,
 0xAF, 0x4A, 0x7B, 0x9C, 0x99, 0x21, 0xA6, 0xC0, 0x64, 0xF8, 0xE4, 0xBF, 0xB9, 0x50, 0x14, 0x94,
 0xF2, 0x39, 0xFA, 0x70, 0xFB, 0x18, 0x27, 0x3A, 0xD9, 0x2D, 0x4B, 0xC9, 0xAE, 0xD2, 0xFC, 0xEF,
 0x3E, 0x1A, 0x0B, 0x21, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00,
 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0xB0, 0x7D, 0xA8, 0x50, 0x7E, 0xC1,
 0x0A, 0x02, 0x10, 0x80, 0x00, 0x04, 0x96, 0x22, 0xA0, 0xB4, 0xFE, 0xEA, 0xCF, 0xA8, 0x4B, 0x01,
 0xE5, 0x30, 0x10, 0x80, 0x00, 0x04, 0x3E, 0x44, 0x40, 0x9C, 0x01, 0x1F, 0x3A, 0x11, 0xAE, 0x42,
 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00,
 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08,
 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0xE5, 0x04,
 0x52, 0x7E, 0xF8, 0x46, 0xB9, 0x97, 0x6C, 0x00, 0x01, 0x08, 0x40, 0xE0, 0x6D, 0x02, 0x4B, 0x75,
 0xCB, 0xDB, 0x9F, 0xD7, 0x16, 0x27, 0x6C, 0xFE, 0x51, 0xD6, 0xE0, 0x16, 0x03, 0x7E, 0x58, 0x5B,
 0xFB, 0x08, 0x93, 0xFB, 0xFF, 0x22, 0xFF, 0xF8, 0x4F, 0x52, 0xDB, 0xD9, 0x16, 0x45, 0x59, 0x29,
 0x60, 0x45, 0xE3, 0xCD, 0x81, 0x0A, 0x9B, 0x4F, 0x3E, 0x44, 0xF6, 0x6A, 0xAC, 0x4D, 0xF9, 0x2B,
 0x48, 0x11, 0xDF, 0x44, 0xE6, 0xA5, 0xF9, 0xAF, 0xFC, 0x80, 0xBC, 0x94, 0x33, 0x2A, 0x1B, 0x89,
 0x40, 0x5A, 0xB2, 0xF4, 0x19, 0xB0, 0x1D, 0xBE, 0x5D, 0xBD, 0x11, 0x40, 0xA6, 0xFD, 0x88, 0xF1,
 0x8D, 0x54, 0x75, 0xF7, 0x2F, 0xDD, 0xC2, 0xE4, 0x13, 0x4C, 0x9A, 0x6A, 0xFB, 0xA5, 0x70, 0x76,
 0xE3, 0x0D, 0x08, 0x89, 0x33, 0xEC, 0x34, 0xCC, 0x82, 0xE4, 0xC5, 0xE5, 0x41, 0xFF, 0x9F, 0x96,
 0x67, 0x35, 0x8A, 0xA0, 0x7B, 0x26, 0x04, 0x25, 0x3F, 0x23, 0x2D, 0xE2, 0xB6, 0x39, 0x1C, 0xBD,
 0x8A, 0x1F, 0xB0, 0xAE, 0x79, 0xDE, 0xD3, 0x4B, 0x19, 0xEC, 0xD7, 0x5C, 0x7F, 0x22, 0x15, 0x04,
 0xB4, 0x2F, 0xAF, 0x6B, 0xD3, 0xED, 0x00, 0x98, 0x29, 0xD8, 0x16, 0x54, 0xFB, 0xDF, 0xB6, 0x1F,
 0x74, 0xFE, 0xD8, 0x40, 0xCD, 0x4A, 0xE8, 0xDB, 0xAB, 0x2E, 0xAC, 0xA7, 0xE9, 0x7E, 0xEB, 0x5E,
 0x6E, 0x2D, 0x28, 0x3B, 0xF6, 0x51, 0x6A, 0x3C, 0xFB, 0xA7, 0xD4, 0xD7, 0xB1, 0x45, 0x9E, 0x22,
 0x12, 0x74, 0xB8, 0x82, 0xF0, 0x6D, 0xFF, 0x2D, 0xED, 0x3F, 0x57, 0xE3, 0x59, 0xB1, 0x36, 0xBB,
 0x7F, 0x30, 0xBE, 0x37, 0xE1, 0xCB, 0x0D, 0x49, 0xDB, 0x5A, 0x7C, 0xAF, 0x77, 0xED, 0x07, 0xB3,
 0xFF, 0xF8, 0x78, 0x5B, 0xD4, 0x80, 0xE2, 0x84, 0x95, 0x01, 0x16, 0x79, 0x86, 0x9A, 0xD9, 0x7E,
 0x05, 0xBD, 0x0A, 0x9B, 0xC3, 0x06, 0x40, 0x6E, 0xF7, 0x37, 0xF3, 0xFF, 0x43, 0xF5, 0xB5, 0x95,
 0xC0, 0x91, 0x4F, 0xCA, 0xE9, 0xAA, 0xFB, 0x5B, 0xEB, 0x12, 0x10, 0xA7, 0x6F, 0x22, 0x88, 0x17,
 0x43, 0x35, 0xA0, 0xB8, 0x87, 0x91, 0x06, 0x17, 0xDF, 0x3D, 0x6E, 0x21, 0xE2, 0x7F, 0x3C, 0x85,
 0xDE, 0xF5, 0xBF, 0x62, 0xF7, 0x0A, 0x9B, 0x63, 0x06, 0x40, 0x7A, 0xF7, 0x37, 0xFB, 0x43, 0x45,
 0xFE, 0xDC, 0xDE, 0x66, 0xBA, 0x37, 0xBA, 0x46, 0xF3, 0xF8, 0x6F, 0xE2, 0xB1, 0xAE, 0xEE, 0x6F,
 0xDD, 0x07, 0x57, 0x17, 0x56, 0x1F, 0xE0, 0x5D, 0xFB, 0x2A, 0x85, 0x67, 0xDD, 0xDA, 0xFE, 0x57,
 0xF3, 0xA9, 0xB6, 0x1F, 0x2F, 0xE0, 0xAB, 0x87, 0x15, 0x36, 0xC7, 0x0F, 0x80, 0x38, 0xF9, 0xAC,
 0x97, 0x24, 0xAE, 0x07, 0x94, 0x13, 0xFC, 0x78, 0x2C, 0x6E, 0x2D, 0x6C, 0xFF, 0x32, 0x65, 0xBC,
 0x55, 0xF7, 0x87, 0xAC, 0x38, 0x3E, 0xDA, 0xA9, 0x3E, 0xC0, 0xBB, 0xF6, 0xE3, 0xF8, 0xD6, 0xF6,
 0xBF, 0x9A, 0x4F, 0xB5, 0xFD, 0x78, 0x83, 0x58, 0x6F, 0x00, 0xC4, 0x99, 0x1F, 0x2D, 0x54, 0x10,
 0x6E, 0xD8, 0x1F, 0x33, 0x00, 0x76, 0x07, 0xE2, 0xA7, 0xAB, 0xEE, 0x0F, 0xB9, 0xD1, 0xBC, 0xB1,
 0x56, 0x7D, 0x80, 0x77, 0xED, 0xC7, 0xF1, 0xAD, 0xED, 0x7F, 0x9C, 0xCF, 0xF6, 0x18, 0x95, 0x62,
 0xE7, 0xD6, 0x48, 0x35, 0xFF, 0x95, 0x06, 0x40, 0x45, 0x14, 0xE2, 0x2D, 0x72, 0xC2, 0x1B, 0x00,
 0x03, 0xE0, 0x47, 0x50, 0xF6, 0x18, 0x5F, 0x7F, 0x93, 0x52, 0xDE, 0xA5, 0xF6, 0xF7, 0xDB, 0x5C,
 0x45, 0xF6, 0xEF, 0xB7, 0xE0, 0x86, 0xF1, 0x78, 0xFB, 0x6B, 0xF3, 0x89, 0x9F, 0xAB, 0xDA, 0xFE,
 0xED, 0x03, 0x5D, 0x62, 0x5C, 0x4A, 0xF3, 0xE7, 0x69, 0xEA, 0xC4, 0xB1, 0x8B, 0x16, 0x3E, 0x91,
 0x3F, 0xE2, 0x59, 0xFA, 0x64, 0x47, 0x02, 0xD7, 0x79, 0x93, 0xC2, 0xA7, 0xBA, 0x7E, 0x4B, 0xED,
 0xF7, 0x51, 0xF5, 0xAD, 0xAA, 0xEE, 0x11, 0x75, 0xF6, 0xE3, 0xF9, 0xE1, 0x23, 0x55, 0xA3, 0xAE,
 0xE3, 0xB3, 0xCF, 0xB0, 0xA7, 0x2D, 0xE2, 0x07, 0xBA, 0x2D, 0xE0, 0xE3, 0x76, 0x29, 0x5B, 0xD4,
 0xF9, 0x1F, 0x77, 0xEF, 0x75, 0x0B, 0xD5, 0xF9, 0x33, 0xEC, 0x80, 0xD5, 0x17, 0x8E, 0x61, 0x07,
 0xF9, 0xD2, 0x46, 0xD5, 0x4F, 0x58, 0xA5, 0xF6, 0x13, 0x9F, 0x34, 0x9F, 0x62, 0xD6, 0x9E, 0x31,
 0xF1, 0x09, 0x54, 0x5D, 0xBD, 0xA5, 0xF6, 0x4F, 0x15, 0x7B, 0xDA, 0x6B, 0xBB, 0x41, 0x06, 0x11,
 0x95, 0xE6, 0xCF, 0xF2, 0x37, 0x80, 0x20, 0xFC, 0x94, 0x77, 0x00, 0xE6, 0x5B, 0xA0, 0xC6, 0x3B,
 0x99, 0x6A, 0xFF, 0xE3, 0xF6, 0xF5, 0xD3, 0xCD, 0x38, 0x15, 0xDA, 0x23, 0x37, 0x3E, 0x90, 0xDF,
 0xB5, 0x1F, 0x27, 0xBE, 0x86, 0xFF, 0x71, 0x0E, 0x8D, 0xE9, 0xD8, 0x68, 0xF1, 0xF3, 0xE7, 0xCF,
 0xF5, 0x5C, 0x71, 0x9F, 0x75, 0xDA, 0xF1, 0xBD, 0xD6, 0xC8, 0xCF, 0xD3, 0x25, 0xB2, 0x31, 0x0F,
 0x74, 0xB6, 0xA7, 0xBB, 0xEF, 0xD3, 0xA4, 0x0F, 0x3E, 0xA0, 0xB4, 0x97, 0xC7, 0xE3, 0xEB, 0x3D,
 0xAF, 0x5B, 0xFF, 0x6E, 0x02, 0xC5, 0x01, 0xC5, 0x2D, 0x98, 0x03, 0xFC, 0xC5, 0x06, 0xE7, 0x0E,
 0xE7, 0x65, 0xC1, 0xDA, 0x7C, 0x2A, 0x4E, 0x97, 0x6B, 0xB3, 0xBA, 0x41, 0xBC, 0x5B, 0xBF, 0xD5,
 0xF9, 0x19, 0x8F, 0xC5, 0xBB, 0x7C, 0xE2, 0xFE, 0xC7, 0x09, 0x1B, 0x16, 0xBE, 0x0E, 0xA8, 0x1A,
 0xF1, 0xBB, 0x7C, 0xE2, 0xE1, 0x5F, 0x9B, 0x4F, 0xC5, 0xE9, 0x72, 0x6D, 0xBE, 0x9B, 0x3F, 0xF1,
 0xB3, 0xC4, 0x2D, 0xCC, 0xFC, 0x80, 0x15, 0x3F, 0x5D, 0x75, 0x7C, 0xE3, 0x1D, 0x80, 0x01, 0x10,
 0x62, 0x58, 0x1D, 0xE0, 0x78, 0x0A, 0x46, 0x0A, 0x2C, 0x84, 0xE6, 0x9F, 0xC5, 0xEF, 0xF2, 0xA9,
 0xA0, 0x97, 0x6B, 0xF3, 0xEB, 0x7C, 0x72, 0x69, 0x78, 0x5F, 0xB8, 0xC5, 0x77, 0xFF, 0x3A, 0xFF,
 0x78, 0x85, 0x32, 0x00, 0x42, 0x0C, 0xDF, 0x4D, 0xA0, 0x90, 0xEB, 0x42, 0x83, 0xAE, 0xB6, 0x3F,
 0x7F, 0x01, 0x7B, 0x5B, 0x92, 0x97, 0xD8, 0xBB, 0xF9, 0x53, 0xCD, 0xDF, 0x4B, 0xC3, 0x4B, 0xBB,
 0xDA, 0xFF, 0xF9, 0xED, 0xC7, 0x09, 0x4F, 0x3D, 0x00, 0xB6, 0x47, 0xC8, 0xE0, 0x21, 0xE3, 0x16,
 0x1A, 0x0E, 0x98, 0x29, 0x12, 0xDC, 0xDD, 0xB4, 0x1F, 0x87, 0xB3, 0x6D, 0x11, 0xB4, 0xD3, 0x46,
 0xF4, 0xF4, 0x5F, 0xE3, 0xA7, 0xAB, 0x6E, 0xA0, 0xDE, 0x96, 0xE4, 0xC5, 0x68, 0x12, 0x08, 0x86,
 0xA6, 0x9A, 0x8F, 0xE9, 0xBF, 0x17, 0xC8, 0x49, 0xFF, 0xAE, 0xFF, 0xF1, 0xD3, 0x99, 0x16, 0x82,
 0xF1, 0x0D, 0xE2, 0xB5, 0x97, 0x2B, 0x07, 0x88, 0x9C, 0x61, 0xEF, 0x3E, 0xFB, 0x46, 0xC7, 0xDF,
 0xD8, 0xFE, 0x69, 0x8A, 0x5B, 0xE3, 0x11, 0xB7, 0xF7, 0x6D, 0xAB, 0xFD, 0x1F, 0x66, 0x5F, 0x03,
 0xD9, 0xAF, 0x7A, 0x8A, 0x6F, 0x30, 0x0A, 0xD5, 0xF9, 0x59, 0x3D, 0x00, 0xB6, 0x47, 0x9C, 0xBA,
 0xE4, 0xAF, 0xE6, 0x33, 0x26, 0x3F, 0x1B, 0x49, 0xB2, 0x3B, 0xD0, 0x97, 0x9A, 0xD5, 0x7C, 0xAA,
 0xE3, 0xDB, 0x77, 0x6A, 0xC7, 0x2A, 0x85, 0x6F, 0xA4, 0x86, 0xB7, 0xB5, 0x4F, 0x35, 0x10, 0xB1,
 0x7C, 0xEA, 0xD1, 0x45, 0x65, 0x56, 0xED, 0xFF, 0x00, 0xFB, 0x29, 0x90, 0xDB, 0x29, 0x55, 0x17,
 0xDF, 0xEA, 0xFC, 0xBC, 0x3D, 0x97, 0xB2, 0xA9, 0x5E, 0x63, 0x0D, 0x38, 0xF1, 0xD0, 0x28, 0xAE,
 0x46, 0x76, 0x99, 0x21, 0x3F, 0x83, 0xFE, 0x9B, 0xCB, 0x4D, 0x41, 0x77, 0xF2, 0x07, 0x2D, 0xEB,
 0x39, 0xD6, 0xAF, 0x1C, 0xE0, 0x62, 0x5D, 0x77, 0x18, 0x36, 0x03, 0x8A, 0xA6, 0xCB, 0xE6, 0x7F,
 0xBB, 0x41, 0x04, 0x03, 0x14, 0x5C, 0xAE, 0x27, 0xD6, 0xED, 0x29, 0xF4, 0xE5, 0x4F, 0xCA, 0x61,
 0xFE, 0x5F, 0x5F, 0x4D, 0xC4, 0x9D, 0x6F, 0xE7, 0x67, 0x8A, 0xFD, 0x01, 0x7C, 0x3E, 0x9D, 0x9F,
 0x03, 0xF8, 0x3C, 0x95, 0x70, 0x4A, 0x7C, 0x31, 0x02, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80,
 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01,
 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10,
 0x80, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x50,
 0x42, 0xC0, 0xFC, 0x33, 0xB2, 0xBB, 0xA0, 0x64, 0x7B, 0x8C, 0x42, 0x00, 0x02, 0x10, 0x80, 0xC0,
 0x5B, 0x04, 0xC4, 0xBF, 0x67, 0x20, 0xCA, 0xDE, 0x3A, 0x05, 0xFB, 0x42, 0x00, 0x02, 0x10, 0x80,
 0x80, 0x9B, 0x80, 0xD8, 0xD9, 0x45, 0x99, 0x7B, 0x7B, 0x16, 0x40, 0x00, 0x02, 0x10, 0x80, 0xC0,
 0x5B, 0x04, 0xC4, 0xCE, 0x2E, 0xCA, 0xDE, 0x3A, 0x05, 0xFB, 0x42, 0x00, 0x02, 0x10, 0x80, 0x80,
 0x9B, 0x80, 0xD8, 0xD9, 0x45, 0x99, 0x7B, 0x7B, 0x16, 0x40, 0x00, 0x02, 0x10, 0x80, 0xC0, 0x5B,
 0x04, 0xC4, 0xCE, 0x2E, 0xCA, 0xEE, 0x4F, 0x51, 0xFA, 0x93, 0xC8, 0xF6, 0x2D, 0xAF, 0xBB, 0x64,
 0x31, 0x7D, 0xCB, 0xFF, 0xAC, 0xEF, 0xEF, 0xE2, 0x87, 0xFE, 0x3E, 0x5C, 0x4A, 0x66, 0x28, 0x9A,
 0xA7, 0xDD, 0x95, 0xB5, 0x8A, 0xE6, 0x45, 0xFB, 0x0D, 0xF7, 0xE2, 0x21, 0x56, 0xCE, 0xAE, 0x68,
 0x1A, 0x7C, 0xCC, 0xFC, 0xE9, 0xCB, 0x9C, 0xC6, 0xAA, 0xD3, 0x8E, 0x89, 0xF6, 0xE3, 0xC0, 0x6F,
 0x9D, 0x39, 0x3A, 0x9C, 0xE8, 0xED, 0x00, 0x53, 0x62, 0x6E, 0x88, 0xB2, 0x1B, 0x87, 0xB7, 0x95,
 0x8D, 0x1E, 0xDA, 0x6F, 0xFA, 0xBF, 0xBB, 0x35, 0x12, 0x74, 0xDB, 0x3A, 0xC2, 0x71, 0x80, 0xFF,
 0x0D, 0x3E, 0xF1, 0x7C, 0x35, 0xAB, 0x37, 0x98, 0xBB, 0xDB, 0x72, 0xB3, 0x98, 0xBB, 0x43, 0xB0,
 0x86, 0xFD, 0x27, 0x44, 0x59, 0xF1, 0xAD, 0xE3, 0xAF, 0x24, 0x67, 0xB0, 0xC4, 0x8E, 0xCE, 0xD7,
 0xB5, 0xFE, 0x6D, 0x97, 0x38, 0x70, 0x65, 0x52, 0x76, 0x67, 0xFB, 0xF8, 0x85, 0x62, 0xEC, 0x44,
 0xD9, 0xFD, 0x00, 0x78, 0xEA, 0xA1, 0x29, 0xF1, 0x30, 0xBB, 0xBF, 0xD9, 0x41, 0xDA, 0xD0, 0xF7,
 0xE5, 0xD7, 0x8D, 0x52, 0xFC, 0xDF, 0x47, 0x54, 0xFB, 0x20, 0x91, 0xCC, 0x10, 0x67, 0x40, 0xDF,
 0x16, 0xED, 0x8A, 0x8A, 0xD7, 0xDB, 0xC2, 0xF6, 0x83, 0xA3, 0x57, 0xE9, 0x68, 0x71, 0xFE, 0xA7,
 0x5D, 0x6E, 0x73, 0xA9, 0x2F, 0x73, 0xAE, 0xAB, 0xAA, 0xBB, 0x7F, 0x56, 0xC1, 0xB6, 0x67, 0x40,
 0xFC, 0xA1, 0x33, 0x8B, 0xA7, 0x62, 0x47, 0xEC, 0xEC, 0xA2, 0xEC, 0x71, 0x00, 0x54, 0x3F, 0x01,
 0xAD, 0x6A, 0x5F, 0x09, 0xE1, 0xBB, 0x9A, 0x85, 0x1B, 0x74, 0x4A, 0xBF, 0x78, 0xEA, 0xF2, 0x29,
 0xDD, 0xDF, 0xF4, 0x30, 0x6B, 0x00, 0x8C, 0xC9, 0xB1, 0x01, 0xDE, 0xAE, 0xB1, 0x45, 0x62, 0x38,
 0xC4, 0xCE, 0x2E, 0xCA, 0x18, 0x00, 0xEE, 0xD0, 0x0C, 0xC8, 0xC8, 0xDB, 0x47, 0x2D, 0xB7, 0xA3,
 0x0F, 0x0B, 0x18, 0x00, 0x26, 0xC9, 0xDB, 0x5E, 0x9F, 0x15, 0xF7, 0x6A, 0xFE, 0x8D, 0xD3, 0x05,
 0xEF, 0xD6, 0x8D, 0x1B, 0x80, 0x89, 0xB4, 0x5B, 0x90, 0x85, 0xDD, 0xC4, 0xD2, 0xDF, 0x31, 0xBB,
 0xCF, 0xD6, 0xB5, 0x50, 0xF4, 0x53, 0x94, 0x31, 0x00, 0xDC, 0x41, 0x18, 0x90, 0x91, 0x27, 0x9F,
 0x72, 0x77, 0xAC, 0x6E, 0x40, 0x5F, 0xB7, 0x7F, 0xFB, 0xA2, 0x26, 0xEB, 0xF1, 0xFF, 0xC5, 0x1B,
 0x40, 0x6E, 0x16, 0xDD, 0x52, 0x72, 0xD7, 0x92, 0xB0, 0xA0, 0xC2, 0xED, 0xD2, 0xFA, 0x12, 0xCE,
 0x14, 0x92, 0x88, 0x9D, 0x5D, 0x94, 0x31, 0x00, 0xDC, 0xC1, 0x18, 0x90, 0x91, 0xA5, 0x09, 0xFA,
 0xF5, 0x06, 0x5D, 0xED, 0xFF, 0xA9, 0xB5, 0x6D, 0x85, 0x94, 0x18, 0xF4, 0x31, 0xFE, 0x3F, 0xA5,
 0x50, 0x7F, 0x5F, 0xB8, 0x2B, 0x94, 0x44, 0x2C, 0x4F, 0x75, 0xB8, 0xC6, 0x16, 0xEE, 0x2E, 0xF3,
 0xBC, 0x40, 0x8C, 0xA0, 0x28, 0x7B, 0x61, 0x00, 0x6C, 0xE5, 0xD4, 0xBE, 0x91, 0x45, 0x78, 0x55,
 0x17, 0xD8, 0x80, 0x8C, 0xFC, 0xF4, 0x00, 0x18, 0x1F, 0xDF, 0x63, 0x3A, 0x25, 0x46, 0xE7, 0x68,
 0x2A, 0xF1, 0xE5, 0x49, 0x75, 0x7E, 0x5E, 0x6B, 0x27, 0xF1, 0xFA, 0x52, 0x9A, 0x99, 0xB7, 0x55,
 0x9F, 0x18, 0xD0, 0x17, 0x67, 0x4C, 0xA4, 0xA1, 0x5D, 0x99, 0x2B, 0xD6, 0xFA, 0x07, 0xC0, 0xF1,
 0x79, 0xE7, 0x98, 0x3A, 0x7B, 0x0D, 0x84, 0x4C, 0x2B, 0xBE, 0x87, 0x35, 0x57, 0xB7, 0x4F, 0xC5,
 0x1C, 0xD9, 0xA1, 0x61, 0xBC, 0x8E, 0x4C, 0xAE, 0xE5, 0xD2, 0x01, 0x1C, 0x61, 0x2B, 0xAE, 0x6D,
 0x77, 0xFC, 0x44, 0x56, 0xC7, 0x9C, 0xCF, 0x32, 0x6B, 0xE6, 0x4F, 0xD6, 0x46, 0x3B, 0xCC, 0x8A,
 0x1E, 0x5A, 0x37, 0x54, 0xC6, 0xCF, 0x98, 0x53, 0xC7, 0x13, 0x93, 0xB0, 0x2D, 0x3B, 0x45, 0xF9,
 0x28, 0x0E, 0xC6, 0x57, 0x5C, 0x2E, 0xCA, 0x1E, 0x4F, 0xD1, 0xEE, 0xA1, 0x41, 0x46, 0x03, 0x1A,
 0x50, 0xA9, 0xFF, 0xE6, 0x8C, 0x0C, 0xF2, 0xF9, 0xFA, 0xF2, 0x01, 0xF1, 0x2D, 0xED, 0x6E, 0x03,
 0xF8, 0x57, 0xE7, 0xE7, 0x91, 0x4F, 0xFA, 0x71, 0x1A, 0xDD, 0xAD, 0x6E, 0xAF, 0x74, 0xCB, 0xA7,
 0xA6, 0x9C, 0x38, 0xD2, 0xDA, 0x33, 0x3E, 0xD8, 0x9A, 0xC5, 0xE5, 0xA2, 0xEC, 0x9E, 0x6A, 0x69,
 0x76, 0x9A, 0xCF, 0x23, 0xFB, 0x63, 0x57, 0x77, 0xC8, 0x4B, 0xFD, 0xDF, 0xBC, 0x7A, 0xDA, 0x62,
 0xFF, 0x4F, 0xDD, 0xCE, 0xDF, 0x2E, 0x0C, 0x85, 0xD3, 0xE9, 0x4A, 0x70, 0xAF, 0x76, 0xF8, 0xE2,
 0xC1, 0xDD, 0x08, 0x37, 0x06, 0x40, 0xD0, 0xFF, 0x6B, 0x5F, 0xA8, 0x88, 0x69, 0x3B, 0x7F, 0x9C,
 0x11, 0x33, 0x1E, 0xE3, 0xB2, 0xAC, 0x3D, 0x75, 0xCC, 0x0A, 0xFB, 0x83, 0x07, 0x7C, 0x62, 0xF7,
 0x6F, 0x3F, 0x1D, 0xC6, 0xF3, 0x5F, 0x4C, 0x6F, 0x51, 0x76, 0x13, 0x3B, 0xB3, 0x41, 0x07, 0xE3,
 0xDD, 0xB6, 0x1F, 0xDF, 0x3D, 0x6E, 0x21, 0x72, 0xC0, 0x8A, 0xDD, 0x73, 0x6D, 0x2A, 0x0D, 0xBA,
 0x3F, 0x7B, 0x9A, 0xDF, 0x4B, 0x53, 0x0E, 0x72, 0x32, 0xD2, 0xFE, 0xC7, 0xAC, 0x50, 0xC6, 0xEB,
 0x56, 0xF4, 0x24, 0x05, 0xD1, 0xE9, 0x19, 0x45, 0xDC, 0xBA, 0x43, 0x96, 0xE8, 0xED, 0xD3, 0xEE,
 0x5F, 0xDC, 0xE2, 0x94, 0x2D, 0xA7, 0x61, 0xDF, 0xC1, 0xF9, 0x34, 0x7A, 0x15, 0x0B, 0xFD, 0x25,
 0x5C, 0x4D, 0x7C, 0xE4, 0x00, 0xA8, 0x3E, 0xCB, 0x35, 0x12, 0x15, 0x3B, 0xE6, 0xDA, 0x1C, 0xC9,
 0xBF, 0xE2, 0x99, 0xF1, 0xC5, 0x01, 0xD0, 0x5F, 0x54, 0x4A, 0xC9, 0xFE, 0xA3, 0xC9, 0x8A, 0x75,
 0xEE, 0x23, 0xED, 0x4A, 0xDD, 0x79, 0x4C, 0xCD, 0xCA, 0x01, 0x77, 0x0B, 0xC5, 0x24, 0x14, 0x65,
 0x8B, 0xDF, 0x00, 0xC6, 0x94, 0xC1, 0x6D, 0x9B, 0x73, 0x07, 0xF6, 0x79, 0x41, 0x56, 0x53, 0x50,
 0x1E, 0x0C, 0xE3, 0x7B, 0xDD, 0x5A, 0x48, 0x0C, 0xC4, 0x98, 0x01, 0x70, 0x72, 0x38, 0x8E, 0x45,
 0xCC, 0x87, 0xAC, 0x8D, 0xB2, 0xEC, 0xB4, 0xDD, 0x1E, 0xB0, 0xCB, 0x1A, 0x5B, 0x88, 0xD1, 0x57,
 0x64, 0x62, 0x67, 0x17, 0x65, 0xB3, 0x0C, 0x80, 0xE3, 0xA5, 0xA9, 0xDF, 0xF5, 0xCB, 0x33, 0x54,
 0xEE, 0xE5, 0x4B, 0x0C, 0xCF, 0xE9, 0x02, 0xA8, 0xAC, 0x1A, 0x59, 0x66, 0xE3, 0x6F, 0x00, 0x89,
 0xDD, 0xFF, 0xFA, 0x8C, 0xDC, 0x9E, 0x07, 0x7D, 0xF0, 0xAF, 0x0E, 0xE7, 0x1E, 0xA1, 0xE1, 0x55,
 0x4A, 0xBF, 0xFB, 0x96, 0xB7, 0x23, 0x93, 0xFF, 0x76, 0xAF, 0x14, 0xE6, 0x7D, 0x99, 0xD6, 0xB1,
 0x4A, 0x6C, 0x8F, 0xA2, 0x6C, 0xAE, 0x01, 0xD0, 0xEF, 0xF4, 0xE1, 0x1C, 0x4F, 0x1D, 0x21, 0xBD,
 0x2F, 0x0F, 0x4B, 0xA6, 0xDC, 0x04, 0x1D, 0x3C, 0x00, 0xD2, 0x9B, 0xD1, 0xD5, 0xFF, 0x63, 0xDA,
 0xA4, 0xB0, 0xBA, 0x35, 0x92, 0x7E, 0x90, 0xBA, 0xFC, 0x49, 0x81, 0xA0, 0xF4, 0xA6, 0x01, 0x1B,
 0xAD, 0xB1, 0x85, 0x02, 0x53, 0xD4, 0x88, 0x4D, 0x52, 0x94, 0xBD, 0x30, 0x00, 0xB6, 0x87, 0xB8,
 0xD3, 0xC6, 0x89, 0xD5, 0x75, 0xDB, 0x20, 0x12, 0xED, 0x9B, 0x71, 0xEA, 0x47, 0xFF, 0x60, 0x3A,
 0xB7, 0x06, 0x4C, 0x6B, 0x41, 0xFF, 0x8F, 0xF6, 0x2B, 0xB0, 0x0F, 0x1B, 0x60, 0x8D, 0x2C, 0x35,
 0x73, 0x20, 0x22, 0x08, 0xF2, 0x8F, 0x6C, 0xDD, 0xB1, 0xB6, 0xDA, 0x5B, 0x33, 0x5D, 0x3B, 0x7C,
 0xBE, 0x2E, 0x19, 0xF3, 0x74, 0x98, 0xE5, 0xAA, 0x62, 0xA7, 0x3F, 0x2E, 0x63, 0x88, 0x1F, 0xEF,
 0xF2, 0x9B, 0xAF, 0x59, 0xCD, 0xE2, 0x29, 0x96, 0x59, 0xF6, 0x4F, 0xAE, 0x1E, 0xCD, 0xF6, 0x43,
 0x6F, 0x86, 0x34, 0x3D, 0x22, 0x27, 0x9F, 0x73, 0xED, 0xDF, 0x0E, 0x00, 0x25, 0x65, 0x45, 0xCD,
 0x1E, 0xDF, 0xDB, 0x53, 0xEC, 0xD1, 0x11, 0xAD, 0x3D, 0xF5, 0x82, 0xDB, 0x50, 0x66, 0xA5, 0x50,
 0x29, 0xFF, 0xF1, 0xF9, 0x19, 0x67, 0xDE, 0x08, 0x56, 0x6E, 0x72, 0xDE, 0x3E, 0x77, 0x76, 0xA7,
 0xCA, 0x2B, 0x0B, 0xC5, 0x26, 0x23, 0xCA, 0x1E, 0x6F, 0x00, 0xD5, 0x67, 0xBB, 0xD6, 0x40, 0xD6,
 0x0C, 0x68, 0x9C, 0x3C, 0x25, 0x99, 0x9E, 0xAA, 0x37, 0xC5, 0xF8, 0x2D, 0xF6, 0x74, 0xCB, 0xED,
 0x23, 0x04, 0x43, 0x3F, 0x60, 0x00, 0x98, 0x3D, 0xAE, 0x3F, 0xFB, 0xFF, 0xFB, 0x20, 0xF2, 0x04,
 0x21, 0x1E, 0x8B, 0xEA, 0xFC, 0xA9, 0xB6, 0xDF, 0x18, 0x99, 0x11, 0xEC, 0x75, 0xC0, 0x4D, 0xCB,
 0x15, 0x6E, 0x07, 0x8B, 0xA8, 0x3D, 0x11, 0x15, 0xE3, 0xFD, 0x87, 0xEA, 0x5F, 0xA9, 0xF8, 0x75,
 0xD0, 0xDC, 0x3E, 0x4F, 0xC5, 0x0B, 0xAC, 0xED, 0xC5, 0xFE, 0xFC, 0xE8, 0x74, 0xF6, 0x87, 0xBC,
 0x51, 0x63, 0x11, 0xB3, 0xF1, 0xA8, 0xEB, 0xBB, 0x3F, 0x3D, 0x3E, 0xEB, 0x16, 0x46, 0x7A, 0x7B,
 0xFB, 0xE0, 0x56, 0x14, 0x05, 0x33, 0x43, 0x4C, 0x81, 0xC9, 0xF0, 0xC5, 0x1B, 0x40, 0xDC, 0xF9,
 0xF6, 0x33, 0x4A, 0xBA, 0xFD, 0xA2, 0x86, 0x70, 0xDB, 0x7C, 0xCC, 0xC0, 0xCD, 0x20, 0x30, 0x07,
 0x7C, 0x11, 0xB1, 0x19, 0xCE, 0x8E, 0x0F, 0x10, 0x80, 0xC0, 0xEF, 0x22, 0x40, 0x3B, 0xFB, 0x5D,
 0xF1, 0xE6, 0xB4, 0x10, 0x80, 0x00, 0x04, 0x76, 0x02, 0x0C, 0x00, 0x92, 0x01, 0x02, 0x10, 0x80,
 0xC0, 0x2F, 0x25, 0xC0, 0x00, 0xF8, 0xA5, 0x81, 0xE7, 0xD8, 0x10, 0x80, 0x00, 0x04, 0x18, 0x00,
 0xE4, 0x00, 0x04, 0x20, 0x00, 0x81, 0x5F, 0x4A, 0x80, 0x01, 0xF0, 0x4B, 0x03, 0xCF, 0xB1, 0x21,
 0x00, 0x01, 0x08, 0x40, 0x60, 0x34, 0x81, 0xEA, 0x3F, 0x66, 0x84, 0xFD, 0x76, 0x44, 0xE1, 0xB3,
 0x36, 0x9F, 0xEA, 0x7A, 0x26, 0x7F, 0xD6, 0xCE, 0x9F, 0xEA, 0xF8, 0x1A, 0xFF, 0x87, 0xBD, 0xC7,
 0xAF, 0xF3, 0x7D, 0xA9, 0x2C, 0xFE, 0x3D, 0x03, 0x51, 0x76, 0xF5, 0x41, 0x5C, 0x28, 0xCA, 0xB0,
 0xEF, 0x8D, 0xB2, 0x08, 0x56, 0x94, 0xAD, 0xC7, 0xDF, 0xCB, 0xD3, 0xAB, 0x17, 0xC1, 0x8A, 0xB2,
 0xF5, 0xF8, 0x8B, 0x07, 0x17, 0x65, 0xEB, 0xF1, 0x61, 0x00, 0x18, 0x15, 0x27, 0x66, 0x86, 0x28,
 0x5B, 0x2F, 0x81, 0xC4, 0x83, 0x8B, 0xB2, 0xF5, 0xF8, 0x78, 0x1B, 0xBA, 0x57, 0x2F, 0x82, 0x15,
 0x65, 0xEB, 0xF1, 0x17, 0x0F, 0x2E, 0xCA, 0xD6, 0xE3, 0xC3, 0x00, 0x60, 0x00, 0xFC, 0x25, 0xF0,
 0x6B, 0x0B, 0x40, 0x3C, 0xB8, 0x28, 0xF3, 0xB6, 0xEF, 0xB8, 0x5E, 0x74, 0x4C, 0x94, 0xAD, 0xD7,
 0xE0, 0xC4, 0x83, 0x8B, 0xB2, 0xF5, 0xF8, 0xA8, 0x95, 0xFF, 0x6B, 0x01, 0x89, 0x07, 0x17, 0x65,
 0xEB, 0x25, 0x90, 0x78, 0x70, 0x51, 0xB6, 0x1E, 0x9F, 0x46, 0x8B, 0xEF, 0x66, 0x72, 0xB4, 0x29,
 0x1A, 0x11, 0x65, 0xEB, 0xF1, 0x17, 0x0F, 0x2E, 0xCA, 0xD6, 0xE3, 0xC3, 0x00, 0xE0, 0x06, 0xC0,
 0x0D, 0xC0, 0x7E, 0x10, 0xEF, 0x6E, 0x10, 0xB7, 0x2D, 0xE3, 0x8F, 0xB5, 0xED, 0x97, 0xBD, 0xB1,
 0xA5, 0x10, 0x8D, 0x88, 0xB2, 0xF5, 0x1A, 0x9C, 0x78, 0x70, 0x51, 0xB6, 0x1E, 0x1F, 0x06, 0x00,
 0x03, 0x80, 0x01, 0x60, 0x75, 0x59, 0xCF, 0x2B, 0xB2, 0xBD, 0xB9, 0x3F, 0xF5, 0x94, 0xC4, 0xEE,
 0xAF, 0xBF, 0xBB, 0xFB, 0xB5, 0x0D, 0x4E, 0x3C, 0xB8, 0x28, 0x63, 0x00, 0xD8, 0xA5, 0x72, 0x52,
 0x88, 0x64, 0x45, 0xD9, 0x7A, 0x01, 0x10, 0x0F, 0x2E, 0xCA, 0xE0, 0xE3, 0x4D, 0x50, 0x11, 0xAC,
 0x28, 0xDB, 0x3A, 0x72, 0xA3, 0xC5, 0x9B, 0xE3, 0xE1, 0x75, 0xFF, 0xA9, 0x5F, 0x57, 0x08, 0xC4,
 0xC4, 0x10, 0x65, 0xE3, 0xEB, 0x97, 0x1B, 0x00, 0x37, 0x00, 0x6E, 0x00, 0x76, 0xC9, 0x2B, 0x05,
 0xBC, 0xBF, 0xD5, 0xB9, 0xFE, 0x66, 0xDF, 0x20, 0xF7, 0xF1, 0x9F, 0x1B, 0x80, 0x19, 0x39, 0x25,
 0x70, 0x3A, 0xC6, 0xF1, 0x0D, 0xBA, 0xDA, 0x7F, 0x06, 0x00, 0x03, 0x80, 0x01, 0x60, 0xB6, 0x11,
 0xA9, 0x4C, 0x4E, 0xCD, 0xFD, 0xFA, 0xB0, 0x9F, 0xDE, 0xFD, 0xF5, 0xCE, 0x25, 0xF6, 0x91, 0xF5,
 0x1A, 0x9C, 0x78, 0x70, 0x51, 0xB6, 0x1E, 0x1F, 0x29, 0xB3, 0xF5, 0x3C, 0x5B, 0x0F, 0x90, 0x98,
 0x19, 0xA2, 0x0C, 0x3E, 0x76, 0xAF, 0xFD, 0xA9, 0x10, 0xC1, 0x8A, 0xB2, 0x52, 0xFE, 0xED, 0x01,
 0x90, 0xFE, 0xF2, 0x67, 0x3B, 0x8B, 0x78, 0x70, 0x51, 0x56, 0xCA, 0xE7, 0x36, 0xF4, 0xA2, 0x63,
 0xA2, 0x0C, 0xFF, 0xBD, 0xF5, 0x45, 0x02, 0x71, 0x03, 0x70, 0xF4, 0x11, 0x0A, 0xAC, 0x91, 0x2E,
 0xE2, 0x00, 0x70, 0x97, 0x68, 0x73, 0x81, 0xD8, 0x19, 0x45, 0x19, 0xF1, 0xF5, 0x46, 0x47, 0x04,
 0x2B, 0xCA, 0xC6, 0xF3, 0x67, 0x00, 0x30, 0x00, 0x18, 0x00, 0x76, 0xD5, 0x8B, 0x05, 0xBC, 0xC9,
 0x9E, 0x3E, 0x06, 0xEC, 0xFF, 0xDE, 0xDE, 0x4F, 0x56, 0xB8, 0x1C, 0x93, 0xAD, 0xFE, 0x4F, 0x88,
 0xFD, 0x36, 0xB4, 0xAF, 0xF3, 0x61, 0x00, 0x30, 0x00, 0x18, 0x00, 0x76, 0x63, 0x14, 0xEB, 0x7C,
 0xEF, 0xFE, 0xD7, 0x5E, 0x5F, 0xD1, 0xFD, 0x79, 0x05, 0x64, 0x46, 0x4E, 0x0C, 0x9C, 0x28, 0x1B,
 0xFF, 0x84, 0x2E, 0x3A, 0x26, 0xCA, 0x6E, 0x70, 0x89, 0x2B, 0x45, 0xD9, 0x7A, 0x80, 0xC4, 0x83,
 0x8B, 0x32, 0xF8, 0x98, 0x15, 0x7B, 0x12, 0x88, 0x60, 0x45, 0xD9, 0x18, 0xFE, 0xA7, 0x77, 0x41,
 0xDE, 0x23, 0xBB, 0xF4, 0xE2, 0xC1, 0x45, 0xD9, 0x18, 0x3E, 0xC7, 0x5D, 0x44, 0xC7, 0x44, 0x19,
 0xFE, 0xBB, 0x92, 0xC7, 0xF1, 0xE8, 0x47, 0x00, 0x52, 0x6E, 0x82, 0x24, 0xA8, 0x37, 0x41, 0xC5,
 0xC4, 0x13, 0x65, 0xE3, 0xF9, 0x7B, 0xCF, 0xEB, 0xD5, 0x8B, 0x07, 0x17, 0x65, 0xE3, 0xF9, 0x88,
 0x8E, 0x89, 0x32, 0xFC, 0xF7, 0xE6, 0x0F, 0xAF, 0x80, 0x78, 0x05, 0xE4, 0x78, 0x0E, 0xA0, 0xC0,
 0xBC, 0x05, 0x76, 0xBD, 0x0D, 0xB4, 0xDF, 0x05, 0x79, 0xDF, 0x14, 0x89, 0x9D, 0x51, 0x94, 0x11,
 0xDF, 0x8E, 0xF8, 0x2A, 0x4B, 0xA6, 0xE5, 0xCF, 0x00, 0x60, 0x00, 0x30, 0x00, 0xEC, 0x12, 0xEE,
 0x2B, 0xE0, 0xBD, 0xFB, 0xEF, 0xCB, 0xAF, 0xFF, 0xE6, 0xF4, 0x3E, 0xC4, 0xFB, 0xFA, 0x48, 0x74,
 0x4C, 0x94, 0x31, 0x00, 0xEC, 0x54, 0xF8, 0xA9, 0x10, 0xC1, 0x8A, 0xB2, 0xF1, 0xFC, 0x19, 0x00,
 0x0C, 0x00, 0x06, 0x80, 0x5D, 0xF5, 0x7D, 0x05, 0x7C, 0xDB, 0xCD, 0x9F, 0x66, 0xC0, 0xB6, 0x45,
 0x7B, 0x42, 0x8C, 0x6F, 0x10, 0xE2, 0xC1, 0x45, 0x19, 0xFE, 0xDB, 0xA9, 0x36, 0x76, 0xC0, 0x30,
 0x00, 0x18, 0x00, 0x0C, 0x00, 0xBB, 0x2A, 0x3B, 0x1A, 0xDC, 0xA9, 0x95, 0x5F, 0xDF, 0xED, 0x1C,
 0xFF, 0x8D, 0xF7, 0x4D, 0xD1, 0xEE, 0xB1, 0xE8, 0x98, 0x28, 0xA3, 0x41, 0xDB, 0xA9, 0x30, 0xB6,
 0x41, 0x8B, 0x81, 0x13, 0x65, 0x37, 0xA7, 0x13, 0x57, 0x8A, 0x32, 0x12, 0xE8, 0xB7, 0x25, 0x90,
 0x98, 0x18, 0xA2, 0x6C, 0xA5, 0xFC, 0x39, 0xF5, 0xF4, 0xA7, 0x16, 0x7F, 0x7A, 0xF0, 0x3F, 0x76,
 0xF6, 0xEB, 0xCC, 0x58, 0x89, 0xCF, 0x76, 0x16, 0x31, 0x31, 0x44, 0x19, 0x7C, 0xBC, 0xFD, 0x87,
 0x00, 0x70, 0x03, 0x70, 0xD4, 0x21, 0x05, 0x26, 0x16, 0x58, 0xBB, 0xDD, 0xEF, 0xBD, 0x6F, 0x6F,
 0xF1, 0x8A, 0xFE, 0x76, 0x6B, 0xB1, 0x33, 0x8A, 0x32, 0xE2, 0x2B, 0xC6, 0x77, 0x99, 0x1B, 0x18,
 0x03, 0x80, 0x01, 0xC0, 0x00, 0xB0, 0xAB, 0xDE, 0xD5, 0x40, 0x6F, 0xDF, 0xE3, 0xB7, 0x5F, 0xF2,
 0xF0, 0x0A, 0xA8, 0x1D, 0x03, 0x17, 0xFF, 0xA3, 0x29, 0x71, 0xA1, 0x28, 0x5B, 0x6F, 0x40, 0x32,
 0x00, 0x18, 0x00, 0x0C, 0x80, 0xAA, 0x01, 0x70, 0xB2, 0x7B, 0x7A, 0xDB, 0x73, 0x6A, 0x3A, 0xED,
 0xFF, 0xFA, 0xE4, 0xA2, 0xD8, 0xB9, 0x44, 0xD9, 0x7A, 0x0D, 0x4E, 0x3C, 0xB8, 0x28, 0x5B, 0x8F,
 0x0F, 0x03, 0x80, 0x01, 0xC0, 0x00, 0x18, 0x34, 0x00, 0xB6, 0x57, 0xDE, 0xD7, 0x87, 0xFD, 0xE3,
 0xFB, 0x84, 0xC6, 0x7F, 0xE5, 0x15, 0x90, 0x1D, 0xA7, 0x8B, 0x42, 0xEC, 0xEC, 0xA2, 0x6C, 0xCD,
 0x01, 0x70, 0x4C, 0xCA, 0xC6, 0xEF, 0x3B, 0xE8, 0x9F, 0x32, 0xBE, 0xBD, 0x11, 0xF6, 0xE1, 0x73,
 0x5B, 0x60, 0x9F, 0xCB, 0xCF, 0xFD, 0xCD, 0xFE, 0x53, 0xCB, 0x6E, 0xB4, 0x9B, 0xF6, 0xDA, 0x35,
 0xF8, 0x9C, 0x5E, 0xD1, 0x7C, 0x2E, 0xBE, 0x2B, 0xF9, 0xDF, 0xD7, 0x75, 0x59, 0x05, 0x01, 0x08,
 0x3C, 0x12, 0xF0, 0x36, 0x71, 0x50, 0x42, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01,
 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10,
 0x80, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00,
 0x81, 0x38, 0x01, 0xF1, 0xCF, 0x60, 0x45, 0xFE, 0x9C, 0xAC, 0xB8, 0x45, 0xFC, 0x2C, 0x58, 0x80,
 0x80, 0x97, 0x80, 0x98, 0x9C, 0xD3, 0xE6, 0x3F, 0xFE, 0xB7, 0x23, 0x0E, 0x1F, 0xA3, 0x22, 0xC4,
 0xCC, 0x16, 0x65, 0xD7, 0xCD, 0xC4, 0x85, 0xA2, 0xCC, 0x5B, 0xDE, 0xE8, 0x21, 0x60, 0x36, 0x08,
 0x05, 0x51, 0x77, 0x7E, 0x8A, 0x0B, 0x45, 0xD9, 0xF8, 0xFA, 0x12, 0x1D, 0x13, 0x65, 0xF8, 0xAF,
 0x24, 0xDB, 0x51, 0x23, 0x82, 0x15, 0x65, 0x37, 0xBB, 0x8B, 0x2B, 0x45, 0xD9, 0xF8, 0x00, 0x7B,
 0x81, 0xA2, 0x87, 0xC0, 0xC8, 0x02, 0x13, 0x0B, 0x47, 0x94, 0x8D, 0xAF, 0x2F, 0xD1, 0x31, 0x51,
 0x86, 0xFF, 0xDE, 0xEA, 0x13, 0xC1, 0x8A, 0x32, 0x06, 0x80, 0x97, 0x3F, 0xFA, 0xC5, 0x09, 0x88,
 0x95, 0x23, 0xCA, 0x68, 0x70, 0xDE, 0x74, 0x11, 0xC1, 0x8A, 0x32, 0xF8, 0x7B, 0xF9, 0x7F, 0xFE,
 0x67, 0x01, 0xB9, 0x0F, 0xCC, 0x02, 0x08, 0x1C, 0x08, 0x88, 0x9D, 0x45, 0x94, 0xD1, 0x80, 0xBC,
 0xC9, 0x25, 0x82, 0x15, 0x65, 0xF0, 0xF7, 0xF2, 0x67, 0x00, 0xB8, 0x89, 0xB1, 0x60, 0x25, 0x02,
 0x62, 0x67, 0x11, 0x65, 0x34, 0x20, 0x6F, 0x6E, 0x88, 0x60, 0x45, 0x19, 0xFC, 0xBD, 0xFC, 0x17,
 0x1C, 0x00, 0xDD, 0xB9, 0xA2, 0xB0, 0xFB, 0x63, 0x7C, 0xFB, 0xA5, 0x88, 0xBD, 0x9A, 0xA3, 0xD9,
 0xF4, 0x2D, 0x8E, 0x9E, 0x97, 0x9E, 0xC2, 0x7B, 0xEA, 0x77, 0xF5, 0x22, 0x67, 0x51, 0x46, 0x03,
 0xF2, 0x46, 0x53, 0x04, 0x2B, 0xCA, 0xE0, 0xEF, 0xE5, 0xBF, 0xDA, 0x00, 0xA8, 0x6E, 0x6D, 0x75,
 0xF6, 0xAB, 0x1B, 0x74, 0xB5, 0x7D, 0x77, 0xE6, 0xCD, 0xB1, 0x40, 0xEC, 0x2C, 0xA2, 0x8C, 0x06,
 0xE4, 0x8D, 0xAA, 0x08, 0x56, 0x94, 0xC1, 0xDF, 0xCB, 0x9F, 0x01, 0xE0, 0x23, 0xC6, 0x00, 0xF0,
 0xF1, 0x9A, 0x5E, 0x2D, 0x76, 0x16, 0x51, 0x46, 0x03, 0xF2, 0x06, 0x5C, 0x04, 0x2B, 0xCA, 0xE0,
 0xEF, 0xE5, 0xCF, 0x00, 0xF0, 0x11, 0x63, 0x00, 0xF8, 0x78, 0x4D, 0xAF, 0x16, 0x3B, 0x8B, 0x28,
 0xA3, 0x01, 0x79, 0x03, 0x2E, 0x82, 0x15, 0x65, 0xF0, 0xF7, 0xF2, 0x67, 0x00, 0x54, 0x11, 0xF3,
 0xDA, 0x1D, 0xF0, 0x8A, 0xA6, 0xF4, 0x1B, 0xC3, 0x9F, 0xF3, 0xEE, 0x47, 0xD8, 0x7E, 0xE3, 0x25,
 0xF0, 0x8A, 0x5E, 0xF4, 0x53, 0x94, 0xD1, 0x80, 0xBC, 0x41, 0x14, 0xC1, 0x8A, 0x32, 0xF8, 0x7B,
 0xF9, 0xAF, 0x36, 0x00, 0xDC, 0xE7, 0x67, 0x41, 0x06, 0x81, 0x53, 0xEB, 0x3F, 0xFE, 0x63, 0x86,
 0xF9, 0x42, 0x1B, 0x62, 0x67, 0x11, 0x65, 0x34, 0x20, 0x6F, 0xA8, 0x44, 0xB0, 0xA2, 0x0C, 0xFE,
 0x5E, 0xFE, 0x0C, 0x00, 0x37, 0x31, 0x16, 0xDC, 0x96, 0xD9, 0xD3, 0x0C, 0x98, 0x1C, 0x97, 0xD8,
 0x59, 0x44, 0x19, 0x0D, 0xC8, 0x1B, 0x6E, 0x11, 0xAC, 0x28, 0x83, 0xBF, 0x97, 0x3F, 0x03, 0xC0,
 0x4D, 0x8C, 0x05, 0x27, 0x02, 0x8D, 0xC7, 0xFF, 0xF9, 0xDF, 0x05, 0x89, 0x9D, 0x45, 0x94, 0xD1,
 0x80, 0xBC, 0xD5, 0x21, 0x82, 0x15, 0x65, 0xF0, 0xF7, 0xF2, 0x67, 0x00, 0xB8, 0x89, 0xB1, 0x60,
 0xE4, 0x00, 0x30, 0xA7, 0xCB, 0xF1, 0xDB, 0x49, 0x47, 0x68, 0xC4, 0xCE, 0x22, 0xCA, 0x68, 0x40,
 0xDE, 0x10, 0x88, 0x60, 0x45, 0x19, 0xFC, 0xBD, 0xFC, 0x19, 0x00, 0x6E, 0x62, 0x2C, 0x38, 0x12,
 0x10, 0x1B, 0x74, 0x1F, 0x34, 0xD1, 0x78, 0xE4, 0x9E, 0x21, 0x76, 0x16, 0x51, 0x46, 0x03, 0xF2,
 0x06, 0x5A, 0x04, 0x2B, 0xCA, 0xE0, 0xEF, 0xE5, 0xCF, 0x00, 0x70, 0x13, 0x63, 0xC1, 0xB0, 0x01,
 0xF0, 0x67, 0x23, 0x7D, 0x06, 0xF4, 0xC5, 0x45, 0xEC, 0x2C, 0xA2, 0x8C, 0x06, 0xE4, 0x8D, 0x82,
 0x08, 0x56, 0x94, 0xC1, 0xDF, 0xCB, 0x9F, 0x01, 0xE0, 0x26, 0xC6, 0x82, 0x91, 0xAF, 0x80, 0xAA,
 0x69, 0x8B, 0x9D, 0x45, 0x94, 0xD1, 0x80, 0xBC, 0xF1, 0x12, 0xC1, 0x8A, 0x32, 0xF8, 0x7B, 0xF9,
 0x33, 0x00, 0xDC, 0xC4, 0x58, 0xC0, 0x00, 0xD0, 0x73, 0x40, 0xEC, 0x5C, 0xA2, 0x8C, 0x06, 0xA7,
 0x93, 0xDF, 0x94, 0x22, 0x58, 0x51, 0xB6, 0x1E, 0xFF, 0xCF, 0x03, 0xF2, 0x26, 0x04, 0xFA, 0x74,
 0x02, 0xED, 0xB7, 0x34, 0xE9, 0xDB, 0xE5, 0x1A, 0x14, 0x2B, 0x5F, 0x94, 0xAD, 0xD7, 0x20, 0xC4,
 0x83, 0x8B, 0x32, 0xF8, 0x78, 0xB3, 0x57, 0x04, 0x2B, 0xCA, 0x6E, 0x76, 0x17, 0x57, 0x8A, 0xB2,
 0xF1, 0x01, 0xF6, 0x02, 0x45, 0x5F, 0x41, 0xE0, 0x69, 0x06, 0x54, 0xEC, 0x95, 0x6B, 0x53, 0x4C,
 0x6C, 0x51, 0x36, 0x3E, 0xFF, 0x45, 0xC7, 0x44, 0x19, 0xFE, 0x7B, 0xB3, 0x4B, 0x04, 0x2B, 0xCA,
 0xC6, 0xF3, 0xE7, 0x06, 0xE0, 0x8D, 0x38, 0xFA, 0x47, 0x02, 0xA7, 0x31, 0xF0, 0x09, 0x52, 0x62,
 0x65, 0x8A, 0xB2, 0xF1, 0x05, 0x2C, 0x3A, 0x26, 0xCA, 0xF0, 0xDF, 0x9B, 0xB4, 0x22, 0x58, 0x51,
 0x36, 0x9E, 0x3F, 0x03, 0xC0, 0x1B, 0x71, 0xF4, 0x4B, 0x11, 0x10, 0x2B, 0x53, 0x94, 0x8D, 0x2F,
 0x60, 0xD1, 0x31, 0x51, 0x86, 0xFF, 0xDE, 0xE4, 0x16, 0xC1, 0x8A, 0xB2, 0xF1, 0xFC, 0x19, 0x00,
 0xDE, 0x88, 0xA3, 0x5F, 0x8A, 0x80, 0x58, 0x99, 0xA2, 0x6C, 0x7C, 0x01, 0x8B, 0x8E, 0x89, 0x32,
 0xFC, 0xF7, 0x26, 0xB7, 0x08, 0x56, 0x94, 0x8D, 0xE7, 0xCF, 0x00, 0xF0, 0x46, 0x1C, 0xFD, 0x52,
 0x04, 0xC4, 0xCA, 0x14, 0x65, 0xE3, 0x0B, 0x58, 0x74, 0x4C, 0x94, 0xE1, 0xBF, 0x37, 0xB9, 0x45,
 0xB0, 0xA2, 0x6C, 0x3C, 0xFF, 0x11, 0x7F, 0xD1, 0xE6, 0xE9, 0x0B, 0xE1, 0x17, 0x5F, 0x19, 0x7B,
 0xF3, 0x03, 0xFD, 0xE4, 0x04, 0xC4, 0xE4, 0x8C, 0x14, 0xB0, 0xB8, 0x45, 0x1F, 0x28, 0xD1, 0x38,
 0xFE, 0x9B, 0xA0, 0x7E, 0x27, 0xFF, 0xBE, 0x53, 0xB3, 0x0A, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20,
 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00,
 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04,
 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x98, 0x88, 0x80, 0xF9, 0xA7, 0xA3, 0x76, 0x41,
 0x9F, 0xD3, 0xD8, 0x6F, 0x73, 0x83, 0x0F, 0x7C, 0xB6, 0x1C, 0xA0, 0xBE, 0xDA, 0xB5, 0x00, 0x9F,
 0x0A, 0x3E, 0x9F, 0xFF, 0x8B, 0x60, 0x62, 0xE5, 0x88, 0xB2, 0x6B, 0x92, 0x89, 0x0B, 0x45, 0x19,
 0xF6, 0xBD, 0x65, 0x2C, 0x82, 0x15, 0x65, 0xF0, 0x87, 0xFF, 0x2D, 0x81, 0x5F, 0x9B, 0x3F, 0x0C,
 0x00, 0xA3, 0x22, 0xC4, 0xCC, 0x10, 0x65, 0x34, 0x20, 0x1A, 0x10, 0x0D, 0xE8, 0x48, 0x40, 0x2C,
 0x1C, 0x51, 0x46, 0x7D, 0x79, 0xEB, 0x8B, 0x01, 0xC0, 0x00, 0xF8, 0x4B, 0x80, 0x02, 0x33, 0xDF,
 0x44, 0xB9, 0x4B, 0xEB, 0x9F, 0x05, 0x22, 0x58, 0x51, 0x46, 0x83, 0xF3, 0x46, 0x41, 0x04, 0x2B,
 0xCA, 0xD6, 0xE3, 0x4F, 0x82, 0x32, 0x00, 0x1C, 0x7D, 0x6A, 0xBD, 0x02, 0x10, 0x2B, 0x5F, 0x94,
 0xC1, 0x87, 0x06, 0xFD, 0xAD, 0x1B, 0x1E, 0x03, 0x80, 0x01, 0xC0, 0x00, 0xB0, 0xBB, 0x16, 0x03,
 0x80, 0x1B, 0x52, 0xA4, 0xB3, 0x4F, 0x9B, 0x3F, 0x0C, 0x00, 0x06, 0x00, 0x03, 0x80, 0x01, 0xF0,
 0x48, 0x40, 0xEC, 0x5C, 0xA2, 0x8C, 0x1B, 0x92, 0x9D, 0x6A, 0x3F, 0x15, 0x22, 0x58, 0x51, 0x76,
 0xB3, 0xBB, 0xB8, 0x52, 0x94, 0x11, 0xE0, 0xD9, 0x02, 0x2C, 0x06, 0x4E, 0x94, 0x11, 0x5F, 0xE2,
 0x1B, 0x79, 0x10, 0x26, 0x7F, 0x66, 0xCB, 0x1F, 0x6E, 0x00, 0xDC, 0x00, 0xB8, 0x01, 0xD8, 0x55,
 0xC9, 0x80, 0xE4, 0x15, 0x50, 0x64, 0xF2, 0x4D, 0x9B, 0x3F, 0x0C, 0x00, 0x06, 0x00, 0x03, 0x80,
 0x01, 0xC0, 0x2B, 0xA0, 0xFE, 0xBF, 0x88, 0x67, 0x67, 0x8F, 0xFC, 0x87, 0xC1, 0xC6, 0xDF, 0x90,
 0x18, 0x00, 0x0C, 0x00, 0x06, 0x80, 0x5D, 0xC2, 0xD3, 0x3E, 0xC1, 0x89, 0x8E, 0x89, 0xB2, 0xF1,
 0x0D, 0x48, 0x74, 0x4C, 0x94, 0xE1, 0xBF, 0x9D, 0xCA, 0x27, 0x85, 0x48, 0x56, 0x94, 0x11, 0x00,
 0x6F, 0x00, 0x44, 0xB0, 0xA2, 0x0C, 0xFE, 0xF0, 0x8F, 0xBC, 0xA9, 0x20, 0x7F, 0x7E, 0x5B, 0xFE,
 0x70, 0x03, 0xE0, 0x06, 0xC0, 0x0D, 0xC0, 0xAE, 0x7A, 0x06, 0x30, 0xDF, 0x00, 0x22, 0x93, 0x75,
 0xDA, 0xFC, 0x61, 0x00, 0x30, 0x00, 0x18, 0x00, 0x0C, 0x00, 0xBE, 0x01, 0xF0, 0x0D, 0xA0, 0x59,
 0x05, 0xD3, 0x4E, 0x30, 0xD1, 0x31, 0x51, 0xC6, 0x15, 0xD8, 0xEE, 0x85, 0x3F, 0x15, 0x22, 0x58,
 0x51, 0x06, 0x7F, 0xF8, 0x47, 0x1E, 0xB4, 0xC9, 0x1F, 0x6F, 0xFE, 0x70, 0x03, 0xE0, 0x06, 0xC0,
 0x0D, 0xC0, 0xAE, 0x1A, 0x06, 0x18, 0xAF, 0x80, 0x22, 0x93, 0x69, 0xDA, 0xFC, 0x61, 0x00, 0x30,
 0x00, 0x18, 0x00, 0x0C, 0x00, 0x5E, 0x01, 0xF1, 0x0A, 0x88, 0x57, 0x40, 0x77, 0x04, 0xC4, 0xD1,
 0x2D, 0xCA, 0xB8, 0xA2, 0xDA, 0xBD, 0x96, 0x57, 0x4C, 0x1E, 0x46, 0x62, 0xE2, 0x89, 0x32, 0xF2,
 0xD3, 0xC3, 0xDE, 0xF1, 0xE4, 0x34, 0x2D, 0x7F, 0x6E, 0x00, 0xDC, 0x00, 0x1C, 0x79, 0x4C, 0x83,
 0xF8, 0x6D, 0x0D, 0x42, 0xEC, 0x5C, 0xA2, 0x8C, 0xFC, 0x99, 0x2D, 0x7F, 0x18, 0x00, 0x0C, 0x00,
 0x06, 0x80, 0x5D, 0x95, 0x34, 0x38, 0xBE, 0x01, 0xF0, 0x0D, 0xC0, 0xAE, 0x13, 0x26, 0xBC, 0x97,
 0x91, 0xD8, 0x59, 0x44, 0x19, 0xFC, 0xE1, 0x1F, 0xE9, 0x53, 0xE4, 0xCF, 0x6F, 0xCB, 0x1F, 0x6E,
 0x00, 0xDC, 0x00, 0xB8, 0x01, 0xD8, 0x55, 0xCF, 0x00, 0xE6, 0x06, 0x10, 0x99, 0xAC, 0xD3, 0xE6,
 0x0F, 0x03, 0x80, 0x01, 0xC0, 0x00, 0x60, 0x00, 0x3C, 0x12, 0x10, 0x3B, 0x97, 0x28, 0xE3, 0x86,
 0x61, 0xA7, 0xDA, 0x4F, 0x85, 0x08, 0x56, 0x94, 0xDD, 0xEC, 0x2E, 0xAE, 0x14, 0x65, 0x04, 0x78,
 0xB6, 0x00, 0x8B, 0x81, 0x13, 0x65, 0xC4, 0x97, 0xF8, 0x46, 0x1E, 0x84, 0xC9, 0x9F, 0xD9, 0xF2,
 0x87, 0x1B, 0x00, 0x37, 0x00, 0x6E, 0x00, 0x76, 0x55, 0x32, 0x20, 0x79, 0x05, 0x14, 0x99, 0x7C,
 0xD3, 0xE6, 0xCF, 0xDF, 0x01, 0x20, 0xFE, 0xB2, 0xAB, 0xE4, 0x4E, 0x21, 0x1A, 0x8F, 0x00, 0x12,
 0xB7, 0xC0, 0xFF, 0x36, 0x28, 0xF8, 0xC0, 0xE7, 0xF6, 0x09, 0x9D, 0xFA, 0x6A, 0x94, 0x86, 0x08,
 0x67, 0xDA, 0xFE, 0xD6, 0x57, 0xF5, 0xAC, 0x82, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00,
 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04,
 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40,
 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x26, 0x22, 0xF0, 0xF5, 0x3F, 0xC6, 0x84, 0xFF, 0xED, 0x64,
 0x82, 0x0F, 0x7C, 0xB6, 0x1C, 0xE8, 0x6B, 0x3A, 0xE4, 0xCF, 0xDA, 0xF9, 0xC3, 0x5F, 0x04, 0x33,
 0xEA, 0x42, 0xAC, 0x1C, 0x51, 0x76, 0xDD, 0x4C, 0x5C, 0x28, 0xCA, 0xB0, 0xEF, 0x6D, 0x73, 0x22,
 0x58, 0x51, 0x06, 0x7F, 0xF8, 0xDF, 0x12, 0x98, 0x36, 0x7F, 0x18, 0x00, 0x0C, 0x80, 0xBF, 0x04,
 0xA6, 0x4D, 0x50, 0xD1, 0x31, 0x51, 0x46, 0x83, 0xA6, 0x41, 0x7F, 0xAB, 0x41, 0x8B, 0x89, 0x2D,
 0xCA, 0x6E, 0xCE, 0x2E, 0xAE, 0x14, 0x65, 0x14, 0x18, 0x05, 0x46, 0x81, 0x1D, 0x09, 0x88, 0x85,
 0x23, 0xCA, 0xA8, 0x2F, 0xEA, 0x2B, 0xB7, 0xBE, 0xD4, 0x47, 0x3F, 0x12, 0xD4, 0x7C, 0x15, 0xE8,
 0x4D, 0xCD, 0x4D, 0x2F, 0x82, 0x15, 0x65, 0x34, 0x08, 0x6F, 0x14, 0x44, 0xB0, 0xA2, 0x0C, 0xFE,
 0xF0, 0xCF, 0x6D, 0xD0, 0x62, 0xE2, 0x89, 0x32, 0x6E, 0x00, 0xDE, 0xFC, 0xA4, 0x41, 0xF3, 0x8A,
 0xCC, 0x31, 0xA7, 0x19, 0x00, 0xDE, 0x02, 0x13, 0x3B, 0x97, 0x28, 0x83, 0xBF, 0x97, 0x3F, 0x0D,
 0x8E, 0x06, 0x47, 0x83, 0xB3, 0xAB, 0x86, 0x06, 0xC4, 0x0D, 0x38, 0xF2, 0x68, 0x3F, 0x6D, 0xFE,
 0x30, 0x00, 0x18, 0x00, 0x0C, 0x00, 0x06, 0xC0, 0x23, 0x01, 0xB1, 0x73, 0x89, 0x32, 0x9E, 0xD0,
 0xED, 0x54, 0xFB, 0xA9, 0x10, 0xC1, 0x8A, 0x32, 0x5E, 0x01, 0x79, 0xF9, 0x33, 0x20, 0x19, 0x90,
 0x0C, 0x48, 0xBB, 0x6A, 0xBA, 0x1B, 0x90, 0xB8, 0x50, 0x94, 0x31, 0x60, 0xEC, 0x50, 0x9D, 0x14,
 0x22, 0x59, 0x51, 0x46, 0x00, 0xBC, 0x01, 0x10, 0xC1, 0x8A, 0x32, 0xF8, 0xC3, 0x3F, 0xF2, 0xA6,
 0x82, 0xFC, 0xF9, 0x6D, 0xF9, 0xC3, 0x13, 0x2E, 0x4F, 0xB8, 0x3C, 0xE1, 0xDA, 0x55, 0xCF, 0x00,
 0xE6, 0x1B, 0x40, 0x64, 0xB2, 0x4E, 0x9B, 0x3F, 0x0C, 0x00, 0x06, 0x00, 0x03, 0x80, 0x01, 0xC0,
 0x37, 0x80, 0xFE, 0x1F, 0x95, 0x61, 0x67, 0x8F, 0xFC, 0xA7, 0xBD, 0xC7, 0xDF, 0xC0, 0x18, 0x00,
 0x0C, 0x00, 0x06, 0x80, 0x5D, 0xC2, 0xD3, 0x3E, 0xC1, 0x89, 0x8E, 0x89, 0xB2, 0xF1, 0x0D, 0x48,
 0x74, 0x4C, 0x94, 0xE1, 0xBF, 0x9D, 0xCA, 0x7C, 0x03, 0x70, 0x31, 0x12, 0x33, 0x4F, 0x94, 0x91,
 0xA0, 0x2E, 0xF8, 0x7F, 0xC4, 0x22, 0x58, 0x51, 0x06, 0x7F, 0xF8, 0x47, 0xDE, 0xE4, 0xAC, 0x97,
 0x3F, 0x14, 0x18, 0x37, 0x00, 0x6E, 0x00, 0x76, 0x57, 0x64, 0xC0, 0xF0, 0x0D, 0x20, 0x32, 0x39,
 0xA6, 0xCD, 0x1F, 0x06, 0x00, 0x03, 0x80, 0x01, 0xC0, 0x00, 0xE0, 0x1B, 0x00, 0xDF, 0x00, 0x9A,
 0x55, 0x30, 0xED, 0x04, 0x13, 0x1D, 0x13, 0x65, 0xEB, 0x5D, 0xF1, 0xC4, 0x83, 0x8B, 0x32, 0xF8,
 0xD8, 0xB3, 0xE2, 0xA7, 0x42, 0x04, 0x2B, 0xCA, 0xE0, 0x0F, 0xFF, 0xC8, 0x45, 0xE4, 0x66, 0xAD,
 0x98, 0x79, 0xA2, 0x8C, 0x04, 0x25, 0x41, 0x73, 0x13, 0x54, 0x4C, 0x3C, 0x51, 0x46, 0x7E, 0x92,
 0x9F, 0xE4, 0xE7, 0x0F, 0x02, 0x62, 0xE5, 0x88, 0x32, 0x0A, 0x8C, 0x02, 0xA3, 0xC0, 0x8E, 0x04,
 0xC4, 0xC2, 0x11, 0x65, 0xD4, 0x17, 0xF5, 0x95, 0x5B, 0x5F, 0x7C, 0x03, 0xE0, 0x1B, 0x00, 0xDF,
 0x00, 0xEC, 0xAE, 0x42, 0x83, 0xE6, 0x23, 0x70, 0xA4, 0xF3, 0x4E, 0x9B, 0x3F, 0x0C, 0x00, 0x06,
 0x00, 0x03, 0x80, 0x01, 0xC0, 0x47, 0x60, 0x3E, 0x02, 0xF3, 0x11, 0xF8, 0x8E, 0x80, 0x38, 0xBA,
 0x45, 0x19, 0x57, 0x78, 0xBB, 0xD7, 0xF2, 0x11, 0xD5, 0xC3, 0x48, 0x4C, 0x3C, 0x51, 0x46, 0x7E,
 0x7A, 0xD8, 0x3B, 0x9E, 0x9C, 0xA6, 0xE5, 0xCF, 0x0D, 0x80, 0x1B, 0x80, 0x23, 0x8F, 0x69, 0x10,
 0xBF, 0xAD, 0x41, 0x88, 0x9D, 0x4B, 0x94, 0x91, 0x3F, 0xB3, 0xE5, 0x0F, 0x03, 0x80, 0x01, 0xC0,
 0x00, 0xB0, 0xAB, 0x92, 0x06, 0xC7, 0x37, 0x00, 0xBE, 0x01, 0xD8, 0x75, 0xC2, 0x84, 0xF7, 0x32,
 0x12, 0x3B, 0x8B, 0x28, 0x83, 0x3F, 0xFC, 0x23, 0x7D, 0x8A, 0xFC, 0xF9, 0x6D, 0xF9, 0xF3, 0xF7,
 0x06, 0x20, 0xFE, 0xF2, 0xA2, 0xD9, 0xF4, 0xA2, 0xF1, 0x48, 0x83, 0x13, 0xB7, 0xC0, 0xFF, 0x36,
 0x28, 0xF8, 0xC0, 0xE7, 0x76, 0x00, 0x50, 0x5F, 0x8D, 0xD2, 0x10, 0xE1, 0x4C, 0xDB, 0xDF, 0xFA,
 0xAA, 0x9E, 0x55, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80,
 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01,
 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10,
 0x80, 0xC0, 0x44, 0x04, 0xBE, 0xFE, 0xC7, 0x98, 0xF0, 0xBF, 0x9D, 0x4C, 0xF0, 0x81, 0xCF, 0x96,
 0x03, 0x7D, 0x4D, 0x87, 0xFC, 0x59, 0x3B, 0x7F, 0xF8, 0x9B, 0xC0, 0x46, 0x5D, 0x88, 0x95, 0x23,
 0xCA, 0xAE, 0x9B, 0x89, 0x0B, 0x45, 0x19, 0xF6, 0xBD, 0x6D, 0x4E, 0x04, 0x2B, 0xCA, 0xE0, 0x0F,
 0xFF, 0x5B, 0x02, 0xD3, 0xE6, 0x0F, 0x03, 0x80, 0x01, 0xF0, 0x97, 0xC0, 0xB4, 0x09, 0x2A, 0x3A,
 0x26, 0xCA, 0x68, 0xD0, 0x34, 0xE8, 0x6F, 0x35, 0x68, 0x31, 0xB1, 0x45, 0xD9, 0xCD, 0xD9, 0xC5,
 0x95, 0xA2, 0x8C, 0x02, 0xA3, 0xC0, 0x28, 0xB0, 0x23, 0x01, 0xB1, 0x70, 0x44, 0x19, 0xF5, 0x45,
 0x7D, 0xE5, 0xD6, 0x97, 0xFA, 0xE8, 0x47, 0x82, 0x9A, 0xAF, 0x02, 0xBD, 0xA9, 0xB9, 0xE9, 0x45,
 0xB0, 0xA2, 0x8C, 0x06, 0xE1, 0x8D, 0x82, 0x08, 0x56, 0x94, 0xC1, 0x1F, 0xFE, 0xB9, 0x0D, 0x5A,
 0x4C, 0x3C, 0x51, 0xC6, 0x0D, 0xC0, 0x9B, 0x9F, 0x34, 0x68, 0x5E, 0x91, 0x39, 0xE6, 0x34, 0x03,
 0xC0, 0x5B, 0x60, 0x62, 0xE7, 0x12, 0x65, 0xF0, 0xF7, 0xF2, 0xA7, 0xC1, 0xD1, 0xE0, 0x68, 0x70,
 0x76, 0xD5, 0xD0, 0x80, 0xB8, 0x01, 0x47, 0x1E, 0xED, 0xA7, 0xCD, 0x1F, 0x06, 0x00, 0x03, 0x80,
 0x01, 0xC0, 0x00, 0x78, 0x24, 0x20, 0x76, 0x2E, 0x51, 0xC6, 0x13, 0xBA, 0x9D, 0x6A, 0x3F, 0x15,
 0x22, 0x58, 0x51, 0xC6, 0x2B, 0x20, 0x2F, 0x7F, 0x06, 0x24, 0x03, 0x92, 0x01, 0x69, 0x57, 0x4D,
 0x77, 0x03, 0x12, 0x17, 0x8A, 0x32, 0x06, 0x8C, 0x1D, 0xAA, 0x93, 0x42, 0x24, 0x2B, 0xCA, 0x08,
 0x80, 0x37, 0x00, 0x22, 0x58, 0x51, 0x06, 0x7F, 0xF8, 0x47, 0xDE, 0x54, 0x90, 0x3F, 0xBF, 0x2D,
 0x7F, 0x78, 0xC2, 0xE5, 0x09, 0x97, 0x27, 0x5C, 0xBB, 0xEA, 0x19, 0xC0, 0x7C, 0x03, 0x88, 0x4C,
 0xD6, 0x69, 0xF3, 0x87, 0x01, 0xC0, 0x00, 0x60, 0x00, 0x30, 0x00, 0xF8, 0x06, 0xD0, 0xFF, 0xA3,
 0x32, 0xEC, 0xEC, 0x91, 0xFF, 0xB4, 0xF7, 0xF8, 0x1B, 0x18, 0x03, 0x80, 0x01, 0xC0, 0x00, 0xB0,
 0x4B, 0x78, 0xDA, 0x27, 0x38, 0xD1, 0x31, 0x51, 0x36, 0xBE, 0x01, 0x89, 0x8E, 0x89, 0x32, 0xFC,
 0xB7, 0x53, 0x99, 0x6F, 0x00, 0x2E, 0x46, 0x62, 0xE6, 0x89, 0x32, 0x12, 0xD4, 0x05, 0xFF, 0x8F,
 0x58, 0x04, 0x2B, 0xCA, 0xE0, 0x0F, 0xFF, 0xC8, 0x9B, 0x9C, 0xF5, 0xF2, 0x87, 0x02, 0xE3, 0x06,
 0xC0, 0x0D, 0xC0, 0xEE, 0x8A, 0x0C, 0x18, 0xBE, 0x01, 0x44, 0x26, 0xC7, 0xB4, 0xF9, 0xC3, 0x00,
 0x60, 0x00, 0x30, 0x00, 0x18, 0x00, 0x7C, 0x03, 0xE0, 0x1B, 0x40, 0xB3, 0x0A, 0xA6, 0x9D, 0x60,
 0xA2, 0x63, 0xA2, 0x6C, 0xBD, 0x2B, 0x9E, 0x78, 0x70, 0x51, 0x06, 0x1F, 0x7B, 0x56, 0xFC, 0x54,
 0x88, 0x60, 0x45, 0x19, 0xFC, 0xE1, 0x1F, 0xB9, 0x88, 0xDC, 0xAC, 0x15, 0x33, 0x4F, 0x94, 0x91,
 0xA0, 0x24, 0x68, 0x6E, 0x82, 0x8A, 0x89, 0x27, 0xCA, 0xC8, 0x4F, 0xF2, 0x93, 0xFC, 0xFC, 0x41,
 0x40, 0xAC, 0x1C, 0x51, 0x46, 0x81, 0x51, 0x60, 0x14, 0xD8, 0x91, 0x80, 0x58, 0x38, 0xA2, 0x8C,
 0xFA, 0xA2, 0xBE, 0x72, 0xEB, 0x8B, 0x6F, 0x00, 0x7C, 0x03, 0xE0, 0x1B, 0x80, 0xDD, 0x55, 0x68,
 0xD0, 0x7C, 0x04, 0x8E, 0x74, 0xDE, 0x69, 0xF3, 0x87, 0x01, 0xC0, 0x00, 0x60, 0x00, 0x30, 0x00,
 0xF8, 0x08, 0xCC, 0x47, 0x60, 0x3E, 0x02, 0xDF, 0x11, 0x10, 0x47, 0xB7, 0x28, 0xE3, 0x0A, 0x6F,
 0xF7, 0x5A, 0x3E, 0xA2, 0x7A, 0x18, 0x89, 0x89, 0x27, 0xCA, 0xC8, 0x4F, 0x0F, 0x7B, 0xC7, 0x93,
 0xD3, 0xB4, 0xFC, 0xB9, 0x01, 0x70, 0x03, 0x70, 0xE4, 0x31, 0x0D, 0xE2, 0xB7, 0x35, 0x08, 0xB1,
 0x73, 0x89, 0x32, 0xF2, 0x67, 0xB6, 0xFC, 0x61, 0x00, 0x30, 0x00, 0x18, 0x00, 0x76, 0x55, 0xD2,
 0xE0, 0xF8, 0x06, 0xC0, 0x37, 0x00, 0xBB, 0x4E, 0x98, 0xF0, 0x5E, 0x46, 0x62, 0x67, 0x11, 0x65,
 0xF0, 0x87, 0x7F, 0xA4, 0x4F, 0x91, 0x3F, 0xBF, 0x2D, 0x7F, 0xFE, 0xDE, 0x00, 0xC4, 0x5F, 0x5E,
 0x34, 0x9B, 0x5E, 0x34, 0x1E, 0x69, 0x70, 0xE2, 0x16, 0xF8, 0xDF, 0x06, 0x05, 0x1F, 0xF8, 0xDC,
 0x0E, 0x00, 0xEA, 0xAB, 0x51, 0x1A, 0x22, 0x9C, 0x69, 0xFB, 0x5B, 0x5F, 0xD5, 0xB3, 0x0A, 0x02,
 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20,
 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00,
 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x98, 0x88, 0xC0,
 0xD7, 0xFF, 0x18, 0x13, 0xFE, 0xB7, 0x93, 0x09, 0x3E, 0xF0, 0xD9, 0x72, 0xA0, 0xAF, 0xE9, 0x90,
 0x3F, 0x6B, 0xE7, 0x0F, 0x7F, 0x13, 0xD8, 0xA8, 0x0B, 0xB1, 0x72, 0x44, 0xD9, 0x75, 0x33, 0x71,
 0xA1, 0x28, 0xC3, 0xBE, 0xB7, 0xCD, 0x89, 0x60, 0x45, 0x19, 0xFC, 0xE1, 0x7F, 0x4B, 0x60, 0xDA,
 0xFC, 0x61, 0x00, 0x30, 0x00, 0xFE, 0x12, 0x98, 0x36, 0x41, 0x45, 0xC7, 0x44, 0x19, 0x0D, 0x9A,
 0x06, 0xFD, 0xAD, 0x06, 0x2D, 0x26, 0xB6, 0x28, 0xBB, 0x39, 0xBB, 0xB8, 0x52, 0x94, 0x51, 0x60,
 0x14, 0x18, 0x05, 0x76, 0x24, 0x20, 0x16, 0x8E, 0x28, 0xA3, 0xBE, 0xA8, 0xAF, 0xDC, 0xFA, 0x52,
 0x1F, 0xFD, 0x48, 0x50, 0xF3, 0x55, 0xA0, 0x37, 0x35, 0x37, 0xBD, 0x08, 0x56, 0x94, 0xD1, 0x20,
 0xBC, 0x51, 0x10, 0xC1, 0x8A, 0x32, 0xF8, 0xC3, 0x3F, 0xB7, 0x41, 0x8B, 0x89, 0x27, 0xCA, 0xB8,
 0x01, 0x78, 0xF3, 0x93, 0x06, 0xCD, 0x2B, 0x32, 0xC7, 0x9C, 0x66, 0x00, 0x78, 0x0B, 0x4C, 0xEC,
 0x5C, 0xA2, 0x0C, 0xFE, 0x5E, 0xFE, 0x34, 0x38, 0x1A, 0x1C, 0x0D, 0xCE, 0xAE, 0x1A, 0x1A, 0x10,
 0x37, 0xE0, 0xC8, 0xA3, 0xFD, 0xB4, 0xF9, 0xC3, 0x00, 0x60, 0x00, 0x30, 0x00, 0x18, 0x00, 0x8F,
 0x04, 0xC4, 0xCE, 0x25, 0xCA, 0x78, 0x42, 0xB7, 0x53, 0xED, 0xA7, 0x42, 0x04, 0x2B, 0xCA, 0x78,
 0x05, 0xE4, 0xE5, 0xCF, 0x80, 0x64, 0x40, 0x32, 0x20, 0xED, 0xAA, 0xE9, 0x6E, 0x40, 0xE2, 0x42,
 0x51, 0xC6, 0x80, 0xB1, 0x43, 0x75, 0x52, 0x88, 0x64, 0x45, 0x19, 0x01, 0xF0, 0x06, 0x40, 0x04,
 0x2B, 0xCA, 0xE0, 0x0F, 0xFF, 0xC8, 0x9B, 0x0A, 0xF2, 0xE7, 0xB7, 0xE5, 0x0F, 0x4F, 0xB8, 0x3C,
 0xE1, 0xF2, 0x84, 0x6B, 0x57, 0x3D, 0x03, 0x98, 0x6F, 0x00, 0x91, 0xC9, 0x3A, 0x6D, 0xFE, 0x30,
 0x00, 0x18, 0x00, 0x0C, 0x00, 0x06, 0x00, 0xDF, 0x00, 0xFA, 0x7F, 0x54, 0x86, 0x9D, 0x3D, 0xF2,
 0x9F, 0xF6, 0x1E, 0x7F, 0x03, 0x63, 0x00, 0x30, 0x00, 0x18, 0x00, 0x76, 0x09, 0x4F, 0xFB, 0x04,
 0x27, 0x3A, 0x26, 0xCA, 0xC6, 0x37, 0x20, 0xD1, 0x31, 0x51, 0x86, 0xFF, 0x76, 0x2A, 0xF3, 0x0D,
 0xC0, 0xC5, 0x48, 0xCC, 0x3C, 0x51, 0x46, 0x82, 0xBA, 0xE0, 0xFF, 0x11, 0x8B, 0x60, 0x45, 0x19,
 0xFC, 0xE1, 0x1F, 0x79, 0x93, 0xB3, 0x5E, 0xFE, 0x50, 0x60, 0xDC, 0x00, 0xB8, 0x01, 0xD8, 0x5D,
 0x91, 0x01, 0xC3, 0x37, 0x80, 0xC8, 0xE4, 0x98, 0x36, 0x7F, 0x18, 0x00, 0x0C, 0x00, 0x06, 0x00,
 0x03, 0x80, 0x6F, 0x00, 0x7C, 0x03, 0x68, 0x56, 0xC1, 0xB4, 0x13, 0x4C, 0x74, 0x4C, 0x94, 0xAD,
 0x77, 0xC5, 0x13, 0x0F, 0x2E, 0xCA, 0xE0, 0x63, 0xCF, 0x8A, 0x9F, 0x0A, 0x11, 0xAC, 0x28, 0x83,
 0x3F, 0xFC, 0x23, 0x17, 0x91, 0x9B, 0xB5, 0x62, 0xE6, 0x89, 0x32, 0x12, 0x94, 0x04, 0xCD, 0x4D,
 0x50, 0x31, 0xF1, 0x44, 0x19, 0xF9, 0x49, 0x7E, 0x92, 0x9F, 0x3F, 0x08, 0x88, 0x95, 0x23, 0xCA,
 0x28, 0x30, 0x0A, 0x8C, 0x02, 0x3B, 0x12, 0x10, 0x0B, 0x47, 0x94, 0x51, 0x5F, 0xD4, 0x57, 0x6E,
 0x7D, 0xF1, 0x0D, 0x80, 0x6F, 0x00, 0x7C, 0x03, 0xB0, 0xBB, 0x0A, 0x0D, 0x9A, 0x8F, 0xC0, 0x91,
 0xCE, 0x3B, 0x6D, 0xFE, 0x30, 0x00, 0x18, 0x00, 0x0C, 0x00, 0x06, 0x00, 0x1F, 0x81, 0xF9, 0x08,
 0xCC, 0x47, 0xE0, 0x3B, 0x02, 0xE2, 0xE8, 0x16, 0x65, 0x5C, 0xE1, 0xED, 0x5E, 0xCB, 0x47, 0x54,
 0x0F, 0x23, 0x31, 0xF1, 0x44, 0x19, 0xF9, 0xE9, 0x61, 0xEF, 0x78, 0x72, 0x9A, 0x96, 0x3F, 0x37,
 0x00, 0x6E, 0x00, 0x8E, 0x3C, 0xA6, 0x41, 0xFC, 0xB6, 0x06, 0x21, 0x76, 0x2E, 0x51, 0x46, 0xFE,
 0xCC, 0x96, 0x3F, 0x0C, 0x00, 0x06, 0x00, 0x03, 0xC0, 0xAE, 0x4A, 0x1A, 0x1C, 0xDF, 0x00, 0xF8,
 0x06, 0x60, 0xD7, 0x09, 0x13, 0xDE, 0xCB, 0x48, 0xEC, 0x2C, 0xA2, 0x0C, 0xFE, 0xF0, 0x8F, 0xF4,
 0x29, 0xF2, 0xE7, 0xB7, 0xE5, 0xCF, 0xDF, 0x1B, 0x80, 0xF8, 0xCB, 0x8B, 0x66, 0xD3, 0x8B, 0xC6,
 0x23, 0x0D, 0x4E, 0xDC, 0x02, 0xFF, 0xDB, 0xA0, 0xE0, 0x03, 0x9F, 0xDB, 0x01, 0x40, 0x7D, 0x35,
 0x4A, 0x43, 0x84, 0x33, 0x6D, 0x7F, 0xEB, 0xAB, 0x7A, 0x56, 0x41, 0x00, 0x02, 0x10, 0x80, 0x00,
 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08,
 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80,
 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x13, 0x11, 0xF8, 0xFA, 0x1F, 0x63, 0xC2,
 0xFF, 0x76, 0x32, 0xC1, 0x07, 0x3E, 0x5B, 0x0E, 0xF4, 0x35, 0x1D, 0xF2, 0x67, 0xED, 0xFC, 0xE1,
 0x6F, 0x02, 0x1B, 0x75, 0x21, 0x56, 0x8E, 0x28, 0xBB, 0x6E, 0x26, 0x2E, 0x14, 0x65, 0xD8, 0xF7,
 0xB6, 0x39, 0x11, 0xAC, 0x28, 0x83, 0x3F, 0xFC, 0x6F, 0x09, 0x4C, 0x9B, 0x3F, 0x0C, 0x00, 0x06,
 0xC0, 0x5F, 0x02, 0xD3, 0x26, 0xA8, 0xE8, 0x98, 0x28, 0xA3, 0x41, 0xD3, 0xA0, 0xBF, 0xD5, 0xA0,
 0xC5, 0xC4, 0x16, 0x65, 0x37, 0x67, 0x17, 0x57, 0x8A, 0x32, 0x0A, 0x8C, 0x02, 0xA3, 0xC0, 0x8E,
 0x04, 0xC4, 0xC2, 0x11, 0x65, 0xD4, 0x17, 0xF5, 0x95, 0x5B, 0x5F, 0xEA, 0xA3, 0x1F, 0x09, 0x6A,
 0xBE, 0x0A, 0xF4, 0xA6, 0xE6, 0xA6, 0x17, 0xC1, 0x8A, 0x32, 0x1A, 0x84, 0x37, 0x0A, 0x22, 0x58,
 0x51, 0x06, 0x7F, 0xF8, 0xE7, 0x36, 0x68, 0x31, 0xF1, 0x44, 0x19, 0x37, 0x00, 0x6F, 0x7E, 0xD2,
 0xA0, 0x79, 0x45, 0xE6, 0x98, 0xD3, 0x0C, 0x00, 0x6F, 0x81, 0x89, 0x9D, 0x4B, 0x94, 0xC1, 0xDF,
 0xCB, 0x9F, 0x06, 0x47, 0x83, 0xA3, 0xC1, 0xD9, 0x55, 0x43, 0x03, 0xE2, 0x06, 0x1C, 0x79, 0xB4,
 0x9F, 0x36, 0x7F, 0x18, 0x00, 0x0C, 0x00, 0x06, 0x00, 0x03, 0xE0, 0x91, 0x80, 0xD8, 0xB9, 0x44,
 0x19, 0x4F, 0xE8, 0x76, 0xAA, 0xFD, 0x54, 0x88, 0x60, 0x45, 0x19, 0xAF, 0x80, 0xBC, 0xFC, 0x19,
 0x90, 0x0C, 0x48, 0x06, 0xA4, 0x5D, 0x35, 0xDD, 0x0D, 0x48, 0x5C, 0x28, 0xCA, 0x18, 0x30, 0x76,
 0xA8, 0x4E, 0x0A, 0x91, 0xAC, 0x28, 0x23, 0x00, 0xDE, 0x00, 0x88, 0x60, 0x45, 0x19, 0xFC, 0xE1,
 0x1F, 0x79, 0x53, 0x41, 0xFE, 0xFC, 0xB6, 0xFC, 0xE1, 0x09, 0x97, 0x27, 0x5C, 0x9E, 0x70, 0xED,
 0xAA, 0x67, 0x00, 0xF3, 0x0D, 0x20, 0x32, 0x59, 0xA7, 0xCD, 0x1F, 0x06, 0x00, 0x03, 0x80, 0x01,
 0xC0, 0x00, 0xE0, 0x1B, 0x40, 0xFF, 0x8F, 0xCA, 0xB0, 0xB3, 0x47, 0xFE, 0xD3, 0xDE, 0xE3, 0x6F,
 0x60, 0x0C, 0x00, 0x06, 0x00, 0x03, 0xC0, 0x2E, 0xE1, 0x69, 0x9F, 0xE0, 0x44, 0xC7, 0x44, 0xD9,
 0xF8, 0x06, 0x24, 0x3A, 0x26, 0xCA, 0xF0, 0xDF, 0x4E, 0x65, 0xBE, 0x01, 0xB8, 0x18, 0x89, 0x99,
 0x27, 0xCA, 0x48, 0x50, 0x17, 0xFC, 0x3F, 0x62, 0x11, 0xAC, 0x28, 0x83, 0x3F, 0xFC, 0x23, 0x6F,
 0x72, 0xD6, 0xCB, 0x1F, 0x0A, 0x8C, 0x1B, 0x00, 0x37, 0x00, 0xBB, 0x2B, 0x32, 0x60, 0xF8, 0x06,
 0x10, 0x99, 0x1C, 0xD3, 0xE6, 0x0F, 0x03, 0x80, 0x01, 0xC0, 0x00, 0x60, 0x00, 0xF0, 0x0D, 0x80,
 0x6F, 0x00, 0xCD, 0x2A, 0x98, 0x76, 0x82, 0x89, 0x8E, 0x89, 0xB2, 0xF5, 0xAE, 0x78, 0xE2, 0xC1,
 0x45, 0x19, 0x7C, 0xEC, 0x59, 0xF1, 0x53, 0x21, 0x82, 0x15, 0x65, 0xF0, 0x87, 0x7F, 0xE4, 0x22,
 0x72, 0xB3, 0x56, 0xCC, 0x3C, 0x51, 0x46, 0x82, 0x92, 0xA0, 0xB9, 0x09, 0x2A, 0x26, 0x9E, 0x28,
 0x23, 0x3F, 0xC9, 0x4F, 0xF2, 0xF3, 0x07, 0x01, 0xB1, 0x72, 0x44, 0x19, 0x05, 0x46, 0x81, 0x51,
 0x60, 0x47, 0x02, 0x62, 0xE1, 0x88, 0x32, 0xEA, 0x8B, 0xFA, 0xCA, 0xAD, 0x2F, 0xBE, 0x01, 0xF0,
 0x0D, 0x80, 0x6F, 0x00, 0x76, 0x57, 0xA1, 0x41, 0xF3, 0x11, 0x38, 0xD2, 0x79, 0xA7, 0xCD, 0x1F,
 0x06, 0x00, 0x03, 0x80, 0x01, 0xC0, 0x00, 0xE0, 0x23, 0x30, 0x1F, 0x81, 0xF9, 0x08, 0x7C, 0x47,
 0x40, 0x1C, 0xDD, 0xA2, 0x8C, 0x2B, 0xBC, 0xDD, 0x6B, 0xF9, 0x88, 0xEA, 0x61, 0x24, 0x26, 0x9E,
 0x28, 0x23, 0x3F, 0x3D, 0xEC, 0x1D, 0x4F, 0x4E, 0xD3, 0xF2, 0xE7, 0x06, 0xC0, 0x0D, 0xC0, 0x91,
 0xC7, 0x34, 0x88, 0xDF, 0xD6, 0x20, 0xC4, 0xCE, 0x25, 0xCA, 0xC8, 0x9F, 0xD9, 0xF2, 0x87, 0x01,
 0xC0, 0x00, 0x60, 0x00, 0xD8, 0x55, 0x49, 0x83, 0xE3, 0x1B, 0x00, 0xDF, 0x00, 0xEC, 0x3A, 0x61,
 0xC2, 0x7B, 0x19, 0x89, 0x9D, 0x45, 0x94, 0xC1, 0x1F, 0xFE, 0x91, 0x3E, 0x45, 0xFE, 0xFC, 0xB6,
 0xFC, 0xF9, 0x7B, 0x03, 0x10, 0x7F, 0x79, 0xD1, 0x6C, 0x7A, 0xD1, 0x78, 0xA4, 0xC1, 0x89, 0x5B,
 0xE0, 0x7F, 0x1B, 0x14, 0x7C, 0xE0, 0x73, 0x3B, 0x00, 0xA8, 0xAF, 0x46, 0x69, 0x88, 0x70, 0xA6,
 0xED, 0x6F, 0x7D, 0x55, 0xCF, 0x2A, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00,
 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02,
 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20,
 0x00, 0x01, 0x08, 0x40, 0x60, 0x22, 0x02, 0x5F, 0xFF, 0x63, 0x4C, 0xF8, 0xDF, 0x4E, 0x26, 0xF8,
 0xC0, 0x67, 0xCB, 0x81, 0xBE, 0xA6, 0x43, 0xFE, 0xAC, 0x9D, 0x3F, 0xFC, 0x4D, 0x60, 0xA3, 0x2E,
 0xC4, 0xCA, 0x11, 0x65, 0xD7, 0xCD, 0xC4, 0x85, 0xA2, 0x0C, 0xFB, 0xDE, 0x36, 0x27, 0x82, 0x15,
 0x65, 0xF0, 0x87, 0xFF, 0x2D, 0x81, 0x69, 0xF3, 0x87, 0x01, 0xC0, 0x00, 0xF8, 0x4B, 0x60, 0xDA,
 0x04, 0x15, 0x1D, 0x13, 0x65, 0x34, 0x68, 0x1A, 0xF4, 0xB7, 0x1A, 0xB4, 0x98, 0xD8, 0xA2, 0xEC,
 0xE6, 0xEC, 0xE2, 0x4A, 0x51, 0x46, 0x81, 0x51, 0x60, 0x14, 0xD8, 0x91, 0x80, 0x58, 0x38, 0xA2,
 0x8C, 0xFA, 0xA2, 0xBE, 0x72, 0xEB, 0x4B, 0x7D, 0xF4, 0x23, 0x41, 0xCD, 0x57, 0x81, 0xDE, 0xD4,
 0xDC, 0xF4, 0x22, 0x58, 0x51, 0x46, 0x83, 0xF0, 0x46, 0x41, 0x04, 0x2B, 0xCA, 0xE0, 0x0F, 0xFF,
 0xDC, 0x06, 0x2D, 0x26, 0x9E, 0x28, 0xE3, 0x06, 0xE0, 0xCD, 0x4F, 0x1A, 0x34, 0xAF, 0xC8, 0x1C,
 0x73, 0x9A, 0x01, 0xE0, 0x2D, 0x30, 0xB1, 0x73, 0x89, 0x32, 0xF8, 0x7B, 0xF9, 0xD3, 0xE0, 0x68,
 0x70, 0x34, 0x38, 0xBB, 0x6A, 0x68, 0x40, 0xDC, 0x80, 0x23, 0x8F, 0xF6, 0xD3, 0xE6, 0x0F, 0x03,
 0x80, 0x01, 0xC0, 0x00, 0x60, 0x00, 0x3C, 0x12, 0x10, 0x3B, 0x97, 0x28, 0xE3, 0x09, 0xDD, 0x4E,
 0xB5, 0x9F, 0x0A, 0x11, 0xAC, 0x28, 0xE3, 0x15, 0x90, 0x97, 0x3F, 0x03, 0x92, 0x01, 0xC9, 0x80,
 0xB4, 0xAB, 0xA6, 0xBB, 0x01, 0x89, 0x0B, 0x45, 0x19, 0x03, 0xC6, 0x0E, 0xD5, 0x49, 0x21, 0x92,
 0x15, 0x65, 0x04, 0xC0, 0x1B, 0x00, 0x11, 0xAC, 0x28, 0x83, 0x3F, 0xFC, 0x23, 0x6F, 0x2A, 0xC8,
 0x9F, 0xDF, 0x96, 0x3F, 0x3C, 0xE1, 0xF2, 0x84, 0xCB, 0x13, 0xAE, 0x5D, 0xF5, 0x0C, 0x60, 0xBE,
 0x01, 0x44, 0x26, 0xEB, 0xB4, 0xF9, 0xC3, 0x00, 0x60, 0x00, 0x30, 0x00, 0x18, 0x00, 0x7C, 0x03,
 0xE8, 0xFF, 0x51, 0x19, 0x76, 0xF6, 0xC8, 0x7F, 0xDA, 0x7B, 0xFC, 0x0D, 0x8C, 0x01, 0xC0, 0x00,
 0x60, 0x00, 0xD8, 0x25, 0x3C, 0xED, 0x13, 0x9C, 0xE8, 0x98, 0x28, 0x1B, 0xDF, 0x80, 0x44, 0xC7,
 0x44, 0x19, 0xFE, 0xDB, 0xA9, 0xCC, 0x37, 0x00, 0x17, 0x23, 0x31, 0xF3, 0x44, 0x19, 0x09, 0xEA,
 0x82, 0xFF, 0x47, 0x2C, 0x82, 0x15, 0x65, 0xF0, 0x87, 0x7F, 0xE4, 0x4D, 0xCE, 0x7A, 0xF9, 0x43,
 0x81, 0x71, 0x03, 0xE0, 0x06, 0x60, 0x77, 0x45, 0x06, 0x0C, 0xDF, 0x00, 0x22, 0x93, 0x63, 0xDA,
 0xFC, 0x61, 0x00, 0x30, 0x00, 0x18, 0x00, 0x0C, 0x00, 0xBE, 0x01, 0xF0, 0x0D, 0xA0, 0x59, 0x05,
 0xD3, 0x4E, 0x30, 0xD1, 0x31, 0x51, 0xB6, 0xDE, 0x15, 0x4F, 0x3C, 0xB8, 0x28, 0x83, 0x8F, 0x3D,
 0x2B, 0x7E, 0x2A, 0x44, 0xB0, 0xA2, 0x0C, 0xFE, 0xF0, 0x8F, 0x5C, 0x44, 0x6E, 0xD6, 0x8A, 0x99,
 0x27, 0xCA, 0x48, 0x50, 0x12, 0x34, 0x37, 0x41, 0xC5, 0xC4, 0x13, 0x65, 0xE4, 0x27, 0xF9, 0x49,
 0x7E, 0xFE, 0x20, 0x20, 0x56, 0x8E, 0x28, 0xA3, 0xC0, 0x28, 0x30, 0x0A, 0xEC, 0x48, 0x40, 0x2C,
 0x1C, 0x51, 0x46, 0x7D, 0x51, 0x5F, 0xB9, 0xF5, 0xC5, 0x37, 0x00, 0xBE, 0x01, 0xF0, 0x0D, 0xC0,
 0xEE, 0x2A, 0x34, 0x68, 0x3E, 0x02, 0x47, 0x3A, 0xEF, 0xB4, 0xF9, 0xC3, 0x00, 0x60, 0x00, 0x30,
 0x00, 0x18, 0x00, 0x7C, 0x04, 0xE6, 0x23, 0x30, 0x1F, 0x81, 0xEF, 0x08, 0x88, 0xA3, 0x5B, 0x94,
 0x71, 0x85, 0xB7, 0x7B, 0x2D, 0x1F, 0x51, 0x3D, 0x8C, 0xC4, 0xC4, 0x13, 0x65, 0xE4, 0xA7, 0x87,
 0xBD, 0xE3, 0xC9, 0x69, 0x5A, 0xFE, 0xDC, 0x00, 0xB8, 0x01, 0x38, 0xF2, 0x98, 0x06, 0xF1, 0xDB,
 0x1A, 0x84, 0xD8, 0xB9, 0x44, 0x19, 0xF9, 0x33, 0x5B, 0xFE, 0x30, 0x00, 0x18, 0x00, 0x0C, 0x00,
 0xBB, 0x2A, 0x69, 0x70, 0x7C, 0x03, 0xE0, 0x1B, 0x80, 0x5D, 0x27, 0x4C, 0x78, 0x2F, 0x23, 0xB1,
 0xB3, 0x88, 0x32, 0xF8, 0xC3, 0x3F, 0xD2, 0xA7, 0xC8, 0x9F, 0xDF, 0x96, 0x3F, 0x7F, 0x6F, 0x00,
 0xE2, 0x2F, 0x2F, 0x9A, 0x4D, 0x2F, 0x1A, 0x8F, 0x34, 0x38, 0x71, 0x0B, 0xFC, 0x6F, 0x83, 0x82,
 0x0F, 0x7C, 0x6E, 0x07, 0x00, 0xF5, 0xD5, 0x28, 0x0D, 0x11, 0xCE, 0xB4, 0xFD, 0xAD, 0xAF, 0xEA,
 0x59, 0x05, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40,
 0x00, 0x02, 0x10, 0x80, 0x00, 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00,
 0x04, 0x20, 0x00, 0x01, 0x08, 0x40, 0x00, 0x02, 0xEF, 0x11, 0xF8, 0x7F, 0x7E, 0xBB, 0x99, 0xBE,
 0xEE, 0xDD, 0x4B, 0xCD, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82
};
const int fonts_size = 14816;
# 11 "d:/devkitPro/0wn/strobe-alarm-clock-grrlib/source/strobe.c" 2
# 29 "d:/devkitPro/0wn/strobe-alarm-clock-grrlib/source/strobe.c"
GRRLIB_texImg *text_fonts;


int alarmhour;
int alarmmin;
int chour;
char *cam_pm;
char *am_pm = "AM";
BOOL am_pm_format = 1;
BOOL alarmon = 0;

void seconds(int seconds)
{
    clock_t begin = clock() + (seconds * 1000);
    while(clock() <= begin) {}
}

void strobe() {
     int c = 0;
     WPAD_Rumble(0,5);
     time_t rawTime;
     struct tm* localTime;
     char stimebuf[1024];
     while(c < 10300) {
     WPAD_ScanPads();
     time(&rawTime);
     localTime = localtime(&rawTime);
     if (am_pm_format) {
     strftime(stimebuf, sizeof(stimebuf), "%I:%M:%S %p", localTime);
     } else {
     strftime(stimebuf, sizeof(stimebuf), "%H:%M:%S", localTime);
     }
     if(WPAD_ButtonsDown(0) & 0x0080) {
     GRRLIB_FillScreen(0x000000FF);
     GRRLIB_Printf(150, 200, text_fonts, 0x00FFFFFF, 1, "Goodbye!");
     GRRLIB_Render();
     sleep(6);
     GRRLIB_Exit();
     GRRLIB_FreeTexture(text_fonts);
     exit(0);
   }
     if(WPAD_ButtonsDown(0) & 0x0008) {
     WPAD_Rumble(0,0);
     alarmon = 0;
     GRRLIB_Printf(100, 100, text_fonts, 0x00FFFFFF, 1, stimebuf);
     GRRLIB_Printf(100, 250, text_fonts, 0x00FFFFFF, 1, "Alarm is off");
     GRRLIB_Render();
     break;
     }
     if (!alarmon) {
     WPAD_Rumble(0,0);
     alarmon = 0;
     GRRLIB_Printf(100, 100, text_fonts, 0x00FFFFFF, 1, stimebuf);
     GRRLIB_Printf(100, 250, text_fonts, 0x00FFFFFF, 1, "Alarm is off");
     GRRLIB_Render();
     break;
     }
     WPAD_SetLeds(0, 0x10);
     GRRLIB_FillScreen(0x00FFFFFF);
     GRRLIB_Render();
    sleep(0.3);
    WPAD_SetLeds(0, 0x20);
    GRRLIB_FillScreen(0x000000FF);
     GRRLIB_Render();
    sleep(0.3);
    WPAD_SetLeds(0, 0x40);
     GRRLIB_FillScreen(0xFFFFFFFF);
     GRRLIB_Render();
    sleep(0.3);
    WPAD_SetLeds(0, 0x80);
    GRRLIB_FillScreen(0x000000FF);
     GRRLIB_Render();
    sleep(0.3);
    WPAD_SetLeds(0, 0x00);
    GRRLIB_FillScreen(0x00FFFFFF);
     GRRLIB_Render();
    sleep(0.3);
    WPAD_SetLeds(0, 0x20);
    GRRLIB_FillScreen(0x0000FFFF);
     GRRLIB_Render();
    sleep(0.3);
    WPAD_SetLeds(0, 0x40);
    GRRLIB_FillScreen(0x000000FF);
     GRRLIB_Render();
    sleep(0.3);
    WPAD_SetLeds(0, 0x80);
    GRRLIB_FillScreen(0x00FFFFFF);
     GRRLIB_Render();
    sleep(0.3);
    WPAD_SetLeds(0, 0x00);
    GRRLIB_FillScreen(0x000000FF);
     c++;
     }

}

int main() {
    GRRLIB_texImg *text_fonts = GRRLIB_LoadTexture(fonts);
    GRRLIB_InitTileSet(text_fonts, 32, 32, 0);
    GRRLIB_Init();
    WPAD_Init();
    GRRLIB_FillScreen(0x000000FF);
    GRRLIB_Render();

    if (WPAD_Probe(0, ((void *)0)) != 0) {
    GRRLIB_Printf(50, 200, text_fonts, 0x00FFFFFF, 1, "Strobe Alarm Clock");
    GRRLIB_Printf(136, 300, text_fonts, 0x00FFFFFF, 1, "<:3   )~~~");
    GRRLIB_Printf(100, 400, text_fonts, 0x00FFFFFF, 1, "wiimote found");
    GRRLIB_Render();
    }


   while (1)
   {
    WPAD_Rumble(0,0);
    WPAD_ScanPads();
  if(WPAD_ButtonsDown(0) & 0x0080) {
      GRRLIB_FillScreen(0x000000FF);
      GRRLIB_Printf(150, 200, text_fonts, 0x00FFFFFF, 1, "Goodbye!");
      GRRLIB_Render();
      sleep(6);
      GRRLIB_Exit();
      GRRLIB_FreeTexture(text_fonts);
      exit(0);
  }


   if(WPAD_ButtonsDown(0) & 0x0010) {
        char timestring[1024];
     time_t rawtime;
        struct tm* localTime;
     time (&rawtime);
     localTime = localtime(&rawtime);
     sprintf(timestring,"%s", asctime(localTime));
        GRRLIB_Printf(15, 250, text_fonts, 0x00FFFFFF, 1, timestring);
        GRRLIB_Render();
   }



   if(WPAD_ButtonsDown(0) & 0x0008) {
        alarmon = 1;
        time_t rawTime;
        struct tm* localTime;
        char timebuf[1024];
        while(1) {
        WPAD_ScanPads();
        time(&rawTime);
        localTime = localtime(&rawTime);
        if (am_pm_format) {
        strftime(timebuf, sizeof(timebuf), "%I:%M:%S %p", localTime);
        } else {
        strftime(timebuf, sizeof(timebuf), "%H:%M:%S", localTime);
        }
        GRRLIB_Printf(100, 100, text_fonts, 0x00FFFFFF, 1, timebuf);
        GRRLIB_Printf(100, 250, text_fonts, 0x00FFFFFF, 1, "Alarm is on");
        seconds(1);
        GRRLIB_Render();

        if (am_pm_format) {
      if (localTime->tm_hour > 11) {
        chour = localTime->tm_hour;
      chour -= 12;
        cam_pm = "PM";
        }
      else
      {
        chour = localTime->tm_hour;
        if (chour == 0) {
        chour = 12;
        }
        cam_pm = "AM";
      }
       if (chour == alarmhour && localTime->tm_min == alarmmin) {
        if (strcasecmp(cam_pm,am_pm) == 0) {
        strobe();
        }
      }
      } else {
       if (localTime->tm_hour == alarmhour && localTime->tm_min == alarmmin) {
        strobe();
        }
      }

        if(WPAD_ButtonsDown(0) & 0x0008) {
        alarmon = 0;
        GRRLIB_Printf(100, 100, text_fonts, 0x00FFFFFF, 1, timebuf);
        GRRLIB_Printf(100, 250, text_fonts, 0x00FFFFFF, 1, "Alarm is off");
        GRRLIB_Render();
        break;
        }
        if(WPAD_ButtonsDown(0) & 0x0004) {
        alarmon = 0;
        GRRLIB_Printf(100, 100, text_fonts, 0x00FFFFFF, 1, timebuf);
        GRRLIB_Printf(100, 250, text_fonts, 0x00FFFFFF, 1, "Alarm is off");
        GRRLIB_Render();
        break;
        }
      if(WPAD_ButtonsDown(0) & 0x0080) {
      GRRLIB_FillScreen(0x000000FF);
        GRRLIB_Printf(150, 200, text_fonts, 0x00FFFFFF, 1, "Goodbye!");
        GRRLIB_Render();
        sleep(6);
        GRRLIB_Exit();
        GRRLIB_FreeTexture(text_fonts);
        exit(0);
      }

      }
   }



   if(WPAD_ButtonsDown(0) & 0x0004) {
        time_t rawTime;
        struct tm* localTime;
        char ctimebuf[1024];
        while(1) {
        WPAD_ScanPads();
        if(WPAD_ButtonsDown(0) & 0x0008) {
        break;
        }
        if(WPAD_ButtonsDown(0) & 0x0004) {
        break;
        }
      if(WPAD_ButtonsDown(0) & 0x0080) {
        GRRLIB_FillScreen(0x000000FF);
        GRRLIB_Printf(150, 200, text_fonts, 0x00FFFFFF, 1, "Goodbye!");
        GRRLIB_Render();
        sleep(6);
        GRRLIB_Exit();
        GRRLIB_FreeTexture(text_fonts);
        exit(0);
      }
        time(&rawTime);
        localTime = localtime(&rawTime);
        if (am_pm_format) {
        strftime(ctimebuf, sizeof(ctimebuf), "%I:%M:%S %p", localTime);
        } else {
        strftime(ctimebuf, sizeof(ctimebuf), "%H:%M:%S", localTime);
        }
        GRRLIB_Printf(100, 100, text_fonts, 0x00FFFFFF, 1, ctimebuf);
        seconds(1);
        GRRLIB_Render();
        }
   }



   if(WPAD_ButtonsDown(0) & 0x1000) {
        GRRLIB_Printf(50, 200, text_fonts, 0x00FFFFFF, 1, "Strobe Alarm Clock");
        GRRLIB_Printf(136, 300, text_fonts, 0x00FFFFFF, 1, "<:3   )~~~");
        GRRLIB_Render();

   }



   if(WPAD_ButtonsDown(0) & 0x0002) {
        while(1) {
        WPAD_ScanPads();
        char setupstr[1024];
        GRRLIB_Printf(60, 30, text_fonts, 0x00FFFFFF, 1, "Setup Alarm Time");
        if (am_pm_format) {
        sprintf(setupstr,"%i:%i %s",alarmhour,alarmmin,am_pm);
      } else {
        sprintf(setupstr,"%i:%i",alarmhour,alarmmin);
        }
        GRRLIB_Printf(60, 100, text_fonts, 0x00FFFFFF, 1, setupstr);
        GRRLIB_Printf(15, 200, text_fonts, 0x00FFFFFF, 1, "Press up/down for");
        GRRLIB_Printf(15, 250, text_fonts, 0x00FFFFFF, 1, "Hours");
        GRRLIB_Printf(15, 300, text_fonts, 0x00FFFFFF, 1, "Press left/right");
        GRRLIB_Printf(15, 350, text_fonts, 0x00FFFFFF, 1, "for Minutes");
        if (am_pm_format) {
        GRRLIB_Printf(15, 400, text_fonts, 0x00FFFFFF, 1, "Press -/+ for AM/PM");
        }
        GRRLIB_Render();
        if(WPAD_ButtonsDown(0) & 0x0008) {
        GRRLIB_Printf(60, 150, text_fonts, 0x00FFFFFF, 1, setupstr);
     GRRLIB_Printf(60, 230, text_fonts, 0x00FFFFFF, 1, "Alarm Time is set");
     GRRLIB_Render();
        break;
        }
        if(WPAD_ButtonsDown(0) & 0x0004) {
        GRRLIB_Printf(60, 150, text_fonts, 0x00FFFFFF, 1, setupstr);
        GRRLIB_Printf(60, 230, text_fonts, 0x00FFFFFF, 1, "Alarm Time is set");
     GRRLIB_Render();
        break;
        }
        if(WPAD_ButtonsDown(0) & 0x0002) {
        GRRLIB_Printf(60, 150, text_fonts, 0x00FFFFFF, 1, setupstr);
        GRRLIB_Printf(60, 230, text_fonts, 0x00FFFFFF, 1, "Alarm Time is set");
     GRRLIB_Render();
        break;
        }
      if(WPAD_ButtonsDown(0) & 0x0080) {
        GRRLIB_FillScreen(0x000000FF);
        GRRLIB_Printf(150, 200, text_fonts, 0x00FFFFFF, 1, "Goodbye!");
        GRRLIB_Render();
        sleep(6);
        GRRLIB_Exit();
        GRRLIB_FreeTexture(text_fonts);
        exit(0);
      }

        if(WPAD_ButtonsDown(0) & 0x0400) {
        alarmhour--;
        GRRLIB_Render();
        }
        if(WPAD_ButtonsDown(0) & 0x0800) {
        alarmhour++;
        GRRLIB_Render();
        }
        if(WPAD_ButtonsDown(0) & 0x0100) {
        alarmmin--;
        GRRLIB_Render();
        }
        if(WPAD_ButtonsDown(0) & 0x0200) {
        alarmmin++;
        GRRLIB_Render();
        }
        if (am_pm_format) {
        if(WPAD_ButtonsDown(0) & 0x0010) {
        am_pm = "AM";
        GRRLIB_Render();
        }
        if(WPAD_ButtonsDown(0) & 0x1000) {
        am_pm = "PM";
        GRRLIB_Render();
        }
        }
        if (am_pm_format) {
        if (alarmhour > 12) {
        alarmhour = 12;
        GRRLIB_Render();
        }
        } else {
        if (alarmhour > 23) {
        alarmhour = 0;
        GRRLIB_Render();
        }
        }
        if (alarmmin > 59) {
        alarmmin = 0;
        GRRLIB_Render();
        }
        if (am_pm_format) {
        if (alarmhour < 1) {
        alarmhour = 12;
        GRRLIB_Render();
        }
        } else {
        if (alarmhour < 0) {
        alarmhour = 0;
        GRRLIB_Render();
        }
        }
        if (alarmmin < 0) {
        alarmmin = 0;
        GRRLIB_Render();
        }
        }
   }


   if(WPAD_ButtonsDown(0) & 0x0001) {
        while(1) {
        WPAD_ScanPads();
        GRRLIB_Printf(50, 100, text_fonts, 0x00FFFFFF, 1, "Alarm Time Format");
        GRRLIB_Printf(50, 200, text_fonts, 0x00FFFFFF, 1, "Press A for 12 HR");
        GRRLIB_Printf(50, 300, text_fonts, 0x00FFFFFF, 1, "Press B for 24 HR");
        GRRLIB_Printf(50, 400, text_fonts, 0x00FFFFFF, 1, "Press 2 to exit");
        GRRLIB_Render();
        if(WPAD_ButtonsDown(0) & 0x0008) {
        am_pm_format = 1;
        GRRLIB_FillScreen(0x000000FF);
     GRRLIB_Printf(50, 250, text_fonts, 0x00FFFFFF, 1, "12 HR is set");
     GRRLIB_Render();
     break;
        }
        if(WPAD_ButtonsDown(0) & 0x0004) {
        am_pm_format = 0;
        GRRLIB_FillScreen(0x000000FF);
        GRRLIB_Printf(50, 250, text_fonts, 0x00FFFFFF, 1, "24 HR is set");
     GRRLIB_Render();
     break;
        }
        if(WPAD_ButtonsDown(0) & 0x0002) {
        GRRLIB_FillScreen(0x000000FF);
        GRRLIB_Render();
     break;
        }
        if(WPAD_ButtonsDown(0) & 0x0001) {
        GRRLIB_FillScreen(0x000000FF);
        GRRLIB_Render();
     break;
        }
      if(WPAD_ButtonsDown(0) & 0x0080) {
        GRRLIB_FillScreen(0x000000FF);
        GRRLIB_Printf(150, 200, text_fonts, 0x00FFFFFF, 1, "Goodbye!");
        GRRLIB_Render();
        sleep(6);
        GRRLIB_Exit();
        GRRLIB_FreeTexture(text_fonts);
        exit(0);
      }
       }

   }


 }

  GRRLIB_Exit();
  GRRLIB_FreeTexture(text_fonts);
  exit(0);
  return 0;
}
